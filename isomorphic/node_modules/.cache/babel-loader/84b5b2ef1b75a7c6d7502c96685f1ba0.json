{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nrequire('whatwg-fetch');\n\nvar _getName = function _getName(id) {\n  return id.split('-').map(function (s) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }).join(' ');\n};\n\nmodule.exports = function () {\n  function Provider(core, opts) {\n    _classCallCheck(this, Provider);\n\n    this.core = core;\n    this.opts = opts;\n    this.provider = opts.provider;\n    this.id = this.provider;\n    this.authProvider = opts.authProvider || this.provider;\n    this.name = this.opts.name || _getName(this.id);\n    this.onReceiveResponse = this.onReceiveResponse.bind(this);\n  }\n\n  _createClass(Provider, [{\n    key: 'onReceiveResponse',\n    value: function onReceiveResponse(response) {\n      var uppyServer = this.core.state.uppyServer || {};\n      var host = this.opts.host;\n      var headers = response.headers; // Store the self-identified domain name for the uppy-server we just hit.\n\n      if (headers.has('i-am') && headers.get('i-am') !== uppyServer[host]) {\n        this.core.setState({\n          uppyServer: Object.assign({}, uppyServer, _defineProperty({}, host, headers.get('i-am')))\n        });\n      }\n\n      return response;\n    }\n  }, {\n    key: 'checkAuth',\n    value: function checkAuth() {\n      return fetch(this.hostname + '/' + this.id + '/authorized', {\n        method: 'get',\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(this.onReceiveResponse).then(function (res) {\n        return res.json().then(function (payload) {\n          return payload.authenticated;\n        });\n      });\n    }\n  }, {\n    key: 'authUrl',\n    value: function authUrl() {\n      return this.opts.host + '/' + this.id + '/connect';\n    }\n  }, {\n    key: 'fileUrl',\n    value: function fileUrl(id) {\n      return this.opts.host + '/' + this.id + '/get/' + id;\n    }\n  }, {\n    key: 'list',\n    value: function list(directory) {\n      return fetch(this.hostname + '/' + this.id + '/list/' + (directory || ''), {\n        method: 'get',\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(this.onReceiveResponse).then(function (res) {\n        return res.json();\n      });\n    }\n  }, {\n    key: 'logout',\n    value: function logout() {\n      var redirect = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : location.href;\n      return fetch(this.hostname + '/' + this.id + '/logout?redirect=' + redirect, {\n        method: 'get',\n        credentials: 'include',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      });\n    }\n  }, {\n    key: 'hostname',\n    get: function get() {\n      var uppyServer = this.core.state.uppyServer || {};\n      var host = this.opts.host;\n      return uppyServer[host] || host;\n    }\n  }]);\n\n  return Provider;\n}();","map":null,"metadata":{},"sourceType":"script"}