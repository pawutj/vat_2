{"ast":null,"code":"// ==ClosureCompiler==\n// @compilation_level ADVANCED_OPTIMIZATIONS\n// @externs_url https://raw.githubusercontent.com/google/closure-compiler/master/contrib/externs/maps/google_maps_api_v3_16.js\n// ==/ClosureCompiler==\n\n/**\r\n * @name CSS3 InfoBubble with tabs for Google Maps API V3\r\n * @version 0.8\r\n * @author Luke Mahe\r\n * @fileoverview\r\n * This library is a CSS Infobubble with tabs. It uses css3 rounded corners and\r\n * drop shadows and animations. It also allows tabs\r\n */\n\n/*\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *     http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * A CSS3 InfoBubble v0.8\r\n * @param {Object.<string, *>=} opt_options Optional properties to set.\r\n * @extends {google.maps.OverlayView}\r\n * @constructor\r\n */\nfunction InfoBubble(opt_options) {\n  this.extend(InfoBubble, google.maps.OverlayView);\n  this.tabs_ = [];\n  this.activeTab_ = null;\n  this.baseZIndex_ = 100;\n  this.isOpen_ = false;\n  var options = opt_options || {};\n\n  if (options['backgroundColor'] == undefined) {\n    options['backgroundColor'] = this.BACKGROUND_COLOR_;\n  }\n\n  if (options['borderColor'] == undefined) {\n    options['borderColor'] = this.BORDER_COLOR_;\n  }\n\n  if (options['borderRadius'] == undefined) {\n    options['borderRadius'] = this.BORDER_RADIUS_;\n  }\n\n  if (options['borderWidth'] == undefined) {\n    options['borderWidth'] = this.BORDER_WIDTH_;\n  }\n\n  if (options['padding'] == undefined) {\n    options['padding'] = this.PADDING_;\n  }\n\n  if (options['arrowPosition'] == undefined) {\n    options['arrowPosition'] = this.ARROW_POSITION_;\n  }\n\n  if (options['disableAutoPan'] == undefined) {\n    options['disableAutoPan'] = false;\n  }\n\n  if (options['disableAnimation'] == undefined) {\n    options['disableAnimation'] = false;\n  }\n\n  if (options['minWidth'] == undefined) {\n    options['minWidth'] = this.MIN_WIDTH_;\n  }\n\n  if (options['shadowStyle'] == undefined) {\n    options['shadowStyle'] = this.SHADOW_STYLE_;\n  }\n\n  if (options['arrowSize'] == undefined) {\n    options['arrowSize'] = this.ARROW_SIZE_;\n  }\n\n  if (options['arrowStyle'] == undefined) {\n    options['arrowStyle'] = this.ARROW_STYLE_;\n  }\n\n  if (options['closeSrc'] == undefined) {\n    options['closeSrc'] = this.CLOSE_SRC_;\n  }\n\n  this.buildDom_();\n  this.setValues(options);\n}\n\nwindow['InfoBubble'] = InfoBubble;\n/**\r\n * Default arrow size\r\n * @const\r\n * @private\r\n */\n\nInfoBubble.prototype.ARROW_SIZE_ = 15;\n/**\r\n * Default arrow style\r\n * @const\r\n * @private\r\n */\n\nInfoBubble.prototype.ARROW_STYLE_ = 0;\n/**\r\n * Default shadow style\r\n * @const\r\n * @private\r\n */\n\nInfoBubble.prototype.SHADOW_STYLE_ = 1;\n/**\r\n * Default min width\r\n * @const\r\n * @private\r\n */\n\nInfoBubble.prototype.MIN_WIDTH_ = 50;\n/**\r\n * Default arrow position\r\n * @const\r\n * @private\r\n */\n\nInfoBubble.prototype.ARROW_POSITION_ = 50;\n/**\r\n * Default padding\r\n * @const\r\n * @private\r\n */\n\nInfoBubble.prototype.PADDING_ = 10;\n/**\r\n * Default border width\r\n * @const\r\n * @private\r\n */\n\nInfoBubble.prototype.BORDER_WIDTH_ = 1;\n/**\r\n * Default border color\r\n * @const\r\n * @private\r\n */\n\nInfoBubble.prototype.BORDER_COLOR_ = '#ccc';\n/**\r\n * Default border radius\r\n * @const\r\n * @private\r\n */\n\nInfoBubble.prototype.BORDER_RADIUS_ = 10;\n/**\r\n * Default background color\r\n * @const\r\n * @private\r\n */\n\nInfoBubble.prototype.BACKGROUND_COLOR_ = '#fff';\n/**\r\n * Default close image source\r\n * @const\r\n * @private\r\n */\n\nInfoBubble.prototype.CLOSE_SRC_ = 'https://maps.gstatic.com/intl/en_us/mapfiles/iw_close.gif';\n/**\r\n * Extends a objects prototype by anothers.\r\n *\r\n * @param {Object} obj1 The object to be extended.\r\n * @param {Object} obj2 The object to extend with.\r\n * @return {Object} The new extended object.\r\n * @ignore\r\n */\n\nInfoBubble.prototype.extend = function (obj1, obj2) {\n  return function (object) {\n    for (var property in object.prototype) {\n      this.prototype[property] = object.prototype[property];\n    }\n\n    return this;\n  }.apply(obj1, [obj2]);\n};\n/**\r\n * Builds the InfoBubble dom\r\n * @private\r\n */\n\n\nInfoBubble.prototype.buildDom_ = function () {\n  var bubble = this.bubble_ = document.createElement('DIV');\n  bubble.style['position'] = 'absolute';\n  bubble.style['zIndex'] = this.baseZIndex_;\n  var tabsContainer = this.tabsContainer_ = document.createElement('DIV');\n  tabsContainer.style['position'] = 'relative'; // Close button\n\n  var close = this.close_ = document.createElement('IMG');\n  close.style['position'] = 'absolute';\n  close.style['border'] = 0;\n  close.style['zIndex'] = this.baseZIndex_ + 1;\n  close.style['cursor'] = 'pointer';\n  close.className = 'js-info-bubble-close';\n  close.src = this.get('closeSrc');\n  var that = this;\n  google.maps.event.addDomListener(close, 'click', function () {\n    that.close();\n    google.maps.event.trigger(that, 'closeclick');\n  }); // Content area\n\n  var contentContainer = this.contentContainer_ = document.createElement('DIV');\n  contentContainer.style['overflowX'] = 'auto';\n  contentContainer.style['overflowY'] = 'auto';\n  contentContainer.style['cursor'] = 'default';\n  contentContainer.style['clear'] = 'both';\n  contentContainer.style['position'] = 'relative';\n  var content = this.content_ = document.createElement('DIV');\n  contentContainer.appendChild(content); // Arrow\n\n  var arrow = this.arrow_ = document.createElement('DIV');\n  arrow.style['position'] = 'relative';\n  var arrowOuter = this.arrowOuter_ = document.createElement('DIV');\n  var arrowInner = this.arrowInner_ = document.createElement('DIV');\n  var arrowSize = this.getArrowSize_();\n  arrowOuter.style['position'] = arrowInner.style['position'] = 'absolute';\n  arrowOuter.style['left'] = arrowInner.style['left'] = '50%';\n  arrowOuter.style['height'] = arrowInner.style['height'] = '0';\n  arrowOuter.style['width'] = arrowInner.style['width'] = '0';\n  arrowOuter.style['marginLeft'] = this.px(-arrowSize);\n  arrowOuter.style['borderWidth'] = this.px(arrowSize);\n  arrowOuter.style['borderBottomWidth'] = 0; // Shadow\n\n  var bubbleShadow = this.bubbleShadow_ = document.createElement('DIV');\n  bubbleShadow.style['position'] = 'absolute'; // Hide the InfoBubble by default\n\n  bubble.style['display'] = bubbleShadow.style['display'] = 'none';\n  bubble.appendChild(this.tabsContainer_);\n  bubble.appendChild(close);\n  bubble.appendChild(contentContainer);\n  arrow.appendChild(arrowOuter);\n  arrow.appendChild(arrowInner);\n  bubble.appendChild(arrow);\n  var stylesheet = document.createElement('style');\n  stylesheet.setAttribute('type', 'text/css');\n  /**\r\n   * The animation for the infobubble\r\n   * @type {string}\r\n   */\n\n  this.animationName_ = '_ibani_' + Math.round(Math.random() * 10000);\n  var css = '.' + this.animationName_ + '{-webkit-animation-name:' + this.animationName_ + ';-webkit-animation-duration:0.5s;' + '-webkit-animation-iteration-count:1;}' + '@-webkit-keyframes ' + this.animationName_ + ' {from {' + '-webkit-transform: scale(0)}50% {-webkit-transform: scale(1.2)}90% ' + '{-webkit-transform: scale(0.95)}to {-webkit-transform: scale(1)}}';\n  stylesheet.textContent = css;\n  document.getElementsByTagName('head')[0].appendChild(stylesheet);\n};\n/**\r\n * Sets the background class name\r\n *\r\n * @param {string} className The class name to set.\r\n */\n\n\nInfoBubble.prototype.setBackgroundClassName = function (className) {\n  this.set('backgroundClassName', className);\n};\n\nInfoBubble.prototype['setBackgroundClassName'] = InfoBubble.prototype.setBackgroundClassName;\n/**\r\n * changed MVC callback\r\n */\n\nInfoBubble.prototype.backgroundClassName_changed = function () {\n  this.content_.className = this.get('backgroundClassName');\n};\n\nInfoBubble.prototype['backgroundClassName_changed'] = InfoBubble.prototype.backgroundClassName_changed;\n/**\r\n * Sets the class of the tab\r\n *\r\n * @param {string} className the class name to set.\r\n */\n\nInfoBubble.prototype.setTabClassName = function (className) {\n  this.set('tabClassName', className);\n};\n\nInfoBubble.prototype['setTabClassName'] = InfoBubble.prototype.setTabClassName;\n/**\r\n * tabClassName changed MVC callback\r\n */\n\nInfoBubble.prototype.tabClassName_changed = function () {\n  this.updateTabStyles_();\n};\n\nInfoBubble.prototype['tabClassName_changed'] = InfoBubble.prototype.tabClassName_changed;\n/**\r\n * Gets the style of the arrow\r\n *\r\n * @private\r\n * @return {number} The style of the arrow.\r\n */\n\nInfoBubble.prototype.getArrowStyle_ = function () {\n  return parseInt(this.get('arrowStyle'), 10) || 0;\n};\n/**\r\n * Sets the style of the arrow\r\n *\r\n * @param {number} style The style of the arrow.\r\n */\n\n\nInfoBubble.prototype.setArrowStyle = function (style) {\n  this.set('arrowStyle', style);\n};\n\nInfoBubble.prototype['setArrowStyle'] = InfoBubble.prototype.setArrowStyle;\n/**\r\n * Arrow style changed MVC callback\r\n */\n\nInfoBubble.prototype.arrowStyle_changed = function () {\n  this.arrowSize_changed();\n};\n\nInfoBubble.prototype['arrowStyle_changed'] = InfoBubble.prototype.arrowStyle_changed;\n/**\r\n * Gets the size of the arrow\r\n *\r\n * @private\r\n * @return {number} The size of the arrow.\r\n */\n\nInfoBubble.prototype.getArrowSize_ = function () {\n  return parseInt(this.get('arrowSize'), 10) || 0;\n};\n/**\r\n * Sets the size of the arrow\r\n *\r\n * @param {number} size The size of the arrow.\r\n */\n\n\nInfoBubble.prototype.setArrowSize = function (size) {\n  this.set('arrowSize', size);\n};\n\nInfoBubble.prototype['setArrowSize'] = InfoBubble.prototype.setArrowSize;\n/**\r\n * Arrow size changed MVC callback\r\n */\n\nInfoBubble.prototype.arrowSize_changed = function () {\n  this.borderWidth_changed();\n};\n\nInfoBubble.prototype['arrowSize_changed'] = InfoBubble.prototype.arrowSize_changed;\n/**\r\n * Set the position of the InfoBubble arrow\r\n *\r\n * @param {number} pos The position to set.\r\n */\n\nInfoBubble.prototype.setArrowPosition = function (pos) {\n  this.set('arrowPosition', pos);\n};\n\nInfoBubble.prototype['setArrowPosition'] = InfoBubble.prototype.setArrowPosition;\n/**\r\n * Get the position of the InfoBubble arrow\r\n *\r\n * @private\r\n * @return {number} The position..\r\n */\n\nInfoBubble.prototype.getArrowPosition_ = function () {\n  return parseInt(this.get('arrowPosition'), 10) || 0;\n};\n/**\r\n * arrowPosition changed MVC callback\r\n */\n\n\nInfoBubble.prototype.arrowPosition_changed = function () {\n  var pos = this.getArrowPosition_();\n  this.arrowOuter_.style['left'] = this.arrowInner_.style['left'] = pos + '%';\n  this.redraw_();\n};\n\nInfoBubble.prototype['arrowPosition_changed'] = InfoBubble.prototype.arrowPosition_changed;\n/**\r\n * Set the zIndex of the InfoBubble\r\n *\r\n * @param {number} zIndex The zIndex to set.\r\n */\n\nInfoBubble.prototype.setZIndex = function (zIndex) {\n  this.set('zIndex', zIndex);\n};\n\nInfoBubble.prototype['setZIndex'] = InfoBubble.prototype.setZIndex;\n/**\r\n * Get the zIndex of the InfoBubble\r\n *\r\n * @return {number} The zIndex to set.\r\n */\n\nInfoBubble.prototype.getZIndex = function () {\n  return parseInt(this.get('zIndex'), 10) || this.baseZIndex_;\n};\n/**\r\n * zIndex changed MVC callback\r\n */\n\n\nInfoBubble.prototype.zIndex_changed = function () {\n  var zIndex = this.getZIndex();\n  this.bubble_.style['zIndex'] = this.baseZIndex_ = zIndex;\n  this.close_.style['zIndex'] = zIndex + 1;\n};\n\nInfoBubble.prototype['zIndex_changed'] = InfoBubble.prototype.zIndex_changed;\n/**\r\n * Set the style of the shadow\r\n *\r\n * @param {number} shadowStyle The style of the shadow.\r\n */\n\nInfoBubble.prototype.setShadowStyle = function (shadowStyle) {\n  this.set('shadowStyle', shadowStyle);\n};\n\nInfoBubble.prototype['setShadowStyle'] = InfoBubble.prototype.setShadowStyle;\n/**\r\n * Get the style of the shadow\r\n *\r\n * @private\r\n * @return {number} The style of the shadow.\r\n */\n\nInfoBubble.prototype.getShadowStyle_ = function () {\n  return parseInt(this.get('shadowStyle'), 10) || 0;\n};\n/**\r\n * shadowStyle changed MVC callback\r\n */\n\n\nInfoBubble.prototype.shadowStyle_changed = function () {\n  var shadowStyle = this.getShadowStyle_();\n  var display = '';\n  var shadow = '';\n  var backgroundColor = '';\n\n  switch (shadowStyle) {\n    case 0:\n      display = 'none';\n      break;\n\n    case 1:\n      shadow = '40px 15px 10px rgba(33,33,33,0.3)';\n      backgroundColor = 'transparent';\n      break;\n\n    case 2:\n      shadow = '0 0 2px rgba(33,33,33,0.3)';\n      backgroundColor = 'rgba(33,33,33,0.35)';\n      break;\n  }\n\n  this.bubbleShadow_.style['boxShadow'] = this.bubbleShadow_.style['webkitBoxShadow'] = this.bubbleShadow_.style['MozBoxShadow'] = shadow;\n  this.bubbleShadow_.style['backgroundColor'] = backgroundColor;\n\n  if (this.isOpen_) {\n    this.bubbleShadow_.style['display'] = display;\n    this.draw();\n  }\n};\n\nInfoBubble.prototype['shadowStyle_changed'] = InfoBubble.prototype.shadowStyle_changed;\n/**\r\n * Show the close button\r\n */\n\nInfoBubble.prototype.showCloseButton = function () {\n  this.set('hideCloseButton', false);\n};\n\nInfoBubble.prototype['showCloseButton'] = InfoBubble.prototype.showCloseButton;\n/**\r\n * Hide the close button\r\n */\n\nInfoBubble.prototype.hideCloseButton = function () {\n  this.set('hideCloseButton', true);\n};\n\nInfoBubble.prototype['hideCloseButton'] = InfoBubble.prototype.hideCloseButton;\n/**\r\n * hideCloseButton changed MVC callback\r\n */\n\nInfoBubble.prototype.hideCloseButton_changed = function () {\n  this.close_.style['display'] = this.get('hideCloseButton') ? 'none' : '';\n};\n\nInfoBubble.prototype['hideCloseButton_changed'] = InfoBubble.prototype.hideCloseButton_changed;\n/**\r\n * Set the background color\r\n *\r\n * @param {string} color The color to set.\r\n */\n\nInfoBubble.prototype.setBackgroundColor = function (color) {\n  if (color) {\n    this.set('backgroundColor', color);\n  }\n};\n\nInfoBubble.prototype['setBackgroundColor'] = InfoBubble.prototype.setBackgroundColor;\n/**\r\n * backgroundColor changed MVC callback\r\n */\n\nInfoBubble.prototype.backgroundColor_changed = function () {\n  var backgroundColor = this.get('backgroundColor');\n  this.contentContainer_.style['backgroundColor'] = backgroundColor;\n  this.arrowInner_.style['borderColor'] = backgroundColor + ' transparent transparent';\n  this.updateTabStyles_();\n};\n\nInfoBubble.prototype['backgroundColor_changed'] = InfoBubble.prototype.backgroundColor_changed;\n/**\r\n * Set the border color\r\n *\r\n * @param {string} color The border color.\r\n */\n\nInfoBubble.prototype.setBorderColor = function (color) {\n  if (color) {\n    this.set('borderColor', color);\n  }\n};\n\nInfoBubble.prototype['setBorderColor'] = InfoBubble.prototype.setBorderColor;\n/**\r\n * borderColor changed MVC callback\r\n */\n\nInfoBubble.prototype.borderColor_changed = function () {\n  var borderColor = this.get('borderColor');\n  var contentContainer = this.contentContainer_;\n  var arrowOuter = this.arrowOuter_;\n  contentContainer.style['borderColor'] = borderColor;\n  arrowOuter.style['borderColor'] = borderColor + ' transparent transparent';\n  contentContainer.style['borderStyle'] = arrowOuter.style['borderStyle'] = this.arrowInner_.style['borderStyle'] = 'solid';\n  this.updateTabStyles_();\n};\n\nInfoBubble.prototype['borderColor_changed'] = InfoBubble.prototype.borderColor_changed;\n/**\r\n * Set the radius of the border\r\n *\r\n * @param {number} radius The radius of the border.\r\n */\n\nInfoBubble.prototype.setBorderRadius = function (radius) {\n  this.set('borderRadius', radius);\n};\n\nInfoBubble.prototype['setBorderRadius'] = InfoBubble.prototype.setBorderRadius;\n/**\r\n * Get the radius of the border\r\n *\r\n * @private\r\n * @return {number} The radius of the border.\r\n */\n\nInfoBubble.prototype.getBorderRadius_ = function () {\n  return parseInt(this.get('borderRadius'), 10) || 0;\n};\n/**\r\n * borderRadius changed MVC callback\r\n */\n\n\nInfoBubble.prototype.borderRadius_changed = function () {\n  var borderRadius = this.getBorderRadius_();\n  var borderWidth = this.getBorderWidth_();\n  this.contentContainer_.style['borderRadius'] = this.contentContainer_.style['MozBorderRadius'] = this.contentContainer_.style['webkitBorderRadius'] = this.bubbleShadow_.style['borderRadius'] = this.bubbleShadow_.style['MozBorderRadius'] = this.bubbleShadow_.style['webkitBorderRadius'] = this.px(borderRadius);\n  this.tabsContainer_.style['paddingLeft'] = this.tabsContainer_.style['paddingRight'] = this.px(borderRadius + borderWidth);\n  this.redraw_();\n};\n\nInfoBubble.prototype['borderRadius_changed'] = InfoBubble.prototype.borderRadius_changed;\n/**\r\n * Get the width of the border\r\n *\r\n * @private\r\n * @return {number} width The width of the border.\r\n */\n\nInfoBubble.prototype.getBorderWidth_ = function () {\n  return parseInt(this.get('borderWidth'), 10) || 0;\n};\n/**\r\n * Set the width of the border\r\n *\r\n * @param {number} width The width of the border.\r\n */\n\n\nInfoBubble.prototype.setBorderWidth = function (width) {\n  this.set('borderWidth', width);\n};\n\nInfoBubble.prototype['setBorderWidth'] = InfoBubble.prototype.setBorderWidth;\n/**\r\n * borderWidth change MVC callback\r\n */\n\nInfoBubble.prototype.borderWidth_changed = function () {\n  var borderWidth = this.getBorderWidth_();\n  this.contentContainer_.style['borderWidth'] = this.px(borderWidth);\n  this.tabsContainer_.style['top'] = this.px(borderWidth);\n  this.updateArrowStyle_();\n  this.updateTabStyles_();\n  this.borderRadius_changed();\n  this.redraw_();\n};\n\nInfoBubble.prototype['borderWidth_changed'] = InfoBubble.prototype.borderWidth_changed;\n/**\r\n * Update the arrow style\r\n * @private\r\n */\n\nInfoBubble.prototype.updateArrowStyle_ = function () {\n  var borderWidth = this.getBorderWidth_();\n  var arrowSize = this.getArrowSize_();\n  var arrowStyle = this.getArrowStyle_();\n  var arrowOuterSizePx = this.px(arrowSize);\n  var arrowInnerSizePx = this.px(Math.max(0, arrowSize - borderWidth));\n  var outer = this.arrowOuter_;\n  var inner = this.arrowInner_;\n  this.arrow_.style['marginTop'] = this.px(-borderWidth);\n  outer.style['borderTopWidth'] = arrowOuterSizePx;\n  inner.style['borderTopWidth'] = arrowInnerSizePx; // Full arrow or arrow pointing to the left\n\n  if (arrowStyle == 0 || arrowStyle == 1) {\n    outer.style['borderLeftWidth'] = arrowOuterSizePx;\n    inner.style['borderLeftWidth'] = arrowInnerSizePx;\n  } else {\n    outer.style['borderLeftWidth'] = inner.style['borderLeftWidth'] = 0;\n  } // Full arrow or arrow pointing to the right\n\n\n  if (arrowStyle == 0 || arrowStyle == 2) {\n    outer.style['borderRightWidth'] = arrowOuterSizePx;\n    inner.style['borderRightWidth'] = arrowInnerSizePx;\n  } else {\n    outer.style['borderRightWidth'] = inner.style['borderRightWidth'] = 0;\n  }\n\n  if (arrowStyle < 2) {\n    outer.style['marginLeft'] = this.px(-arrowSize);\n    inner.style['marginLeft'] = this.px(-(arrowSize - borderWidth));\n  } else {\n    outer.style['marginLeft'] = inner.style['marginLeft'] = 0;\n  } // If there is no border then don't show thw outer arrow\n\n\n  if (borderWidth == 0) {\n    outer.style['display'] = 'none';\n  } else {\n    outer.style['display'] = '';\n  }\n};\n/**\r\n * Set the padding of the InfoBubble\r\n *\r\n * @param {number} padding The padding to apply.\r\n */\n\n\nInfoBubble.prototype.setPadding = function (padding) {\n  this.set('padding', padding);\n};\n\nInfoBubble.prototype['setPadding'] = InfoBubble.prototype.setPadding;\n/**\r\n * Set the close image url\r\n *\r\n * @param {string} src The url of the image used as a close icon\r\n */\n\nInfoBubble.prototype.setCloseSrc = function (src) {\n  if (src && this.close_) {\n    this.close_.src = src;\n  }\n};\n\nInfoBubble.prototype['setCloseSrc'] = InfoBubble.prototype.setCloseSrc;\n/**\r\n * Set the padding of the InfoBubble\r\n *\r\n * @private\r\n * @return {number} padding The padding to apply.\r\n */\n\nInfoBubble.prototype.getPadding_ = function () {\n  return parseInt(this.get('padding'), 10) || 0;\n};\n/**\r\n * padding changed MVC callback\r\n */\n\n\nInfoBubble.prototype.padding_changed = function () {\n  var padding = this.getPadding_();\n  this.contentContainer_.style['padding'] = this.px(padding);\n  this.updateTabStyles_();\n  this.redraw_();\n};\n\nInfoBubble.prototype['padding_changed'] = InfoBubble.prototype.padding_changed;\n/**\r\n * Add px extention to the number\r\n *\r\n * @param {number} num The number to wrap.\r\n * @return {string|number} A wrapped number.\r\n */\n\nInfoBubble.prototype.px = function (num) {\n  if (num) {\n    // 0 doesn't need to be wrapped\n    return num + 'px';\n  }\n\n  return num;\n};\n/**\r\n * Add events to stop propagation\r\n * @private\r\n */\n\n\nInfoBubble.prototype.addEvents_ = function () {\n  // We want to cancel all the events so they do not go to the map\n  var events = ['mousedown', 'mousemove', 'mouseover', 'mouseout', 'mouseup', 'mousewheel', 'DOMMouseScroll', 'touchstart', 'touchend', 'touchmove', 'dblclick', 'contextmenu', 'click'];\n  var bubble = this.bubble_;\n  this.listeners_ = [];\n\n  for (var i = 0, event; event = events[i]; i++) {\n    this.listeners_.push(google.maps.event.addDomListener(bubble, event, function (e) {\n      e.cancelBubble = true;\n\n      if (e.stopPropagation) {\n        e.stopPropagation();\n      }\n    }));\n  }\n};\n/**\r\n * On Adding the InfoBubble to a map\r\n * Implementing the OverlayView interface\r\n */\n\n\nInfoBubble.prototype.onAdd = function () {\n  if (!this.bubble_) {\n    this.buildDom_();\n  }\n\n  this.addEvents_();\n  var panes = this.getPanes();\n\n  if (panes) {\n    panes.floatPane.appendChild(this.bubble_);\n    panes.floatShadow.appendChild(this.bubbleShadow_);\n  }\n  /* once the infoBubble has been added to the DOM, fire 'domready' event */\n\n\n  google.maps.event.trigger(this, 'domready');\n};\n\nInfoBubble.prototype['onAdd'] = InfoBubble.prototype.onAdd;\n/**\r\n * Draw the InfoBubble\r\n * Implementing the OverlayView interface\r\n */\n\nInfoBubble.prototype.draw = function () {\n  var projection = this.getProjection();\n\n  if (!projection) {\n    // The map projection is not ready yet so do nothing\n    return;\n  }\n\n  var latLng =\n  /** @type {google.maps.LatLng} */\n  this.get('position');\n\n  if (!latLng) {\n    this.close();\n    return;\n  }\n\n  var tabHeight = 0;\n\n  if (this.activeTab_) {\n    tabHeight = this.activeTab_.offsetHeight;\n  }\n\n  var anchorHeight = this.getAnchorHeight_();\n  var arrowSize = this.getArrowSize_();\n  var arrowPosition = this.getArrowPosition_();\n  arrowPosition = arrowPosition / 100;\n  var pos = projection.fromLatLngToDivPixel(latLng);\n  var width = this.contentContainer_.offsetWidth;\n  var height = this.bubble_.offsetHeight;\n\n  if (!width) {\n    return;\n  } // Adjust for the height of the info bubble\n\n\n  var top = pos.y - (height + arrowSize);\n\n  if (anchorHeight) {\n    // If there is an anchor then include the height\n    top -= anchorHeight;\n  }\n\n  var left = pos.x - width * arrowPosition;\n  this.bubble_.style['top'] = this.px(top);\n  this.bubble_.style['left'] = this.px(left);\n  var shadowStyle = parseInt(this.get('shadowStyle'), 10);\n\n  switch (shadowStyle) {\n    case 1:\n      // Shadow is behind\n      this.bubbleShadow_.style['top'] = this.px(top + tabHeight - 1);\n      this.bubbleShadow_.style['left'] = this.px(left);\n      this.bubbleShadow_.style['width'] = this.px(width);\n      this.bubbleShadow_.style['height'] = this.px(this.contentContainer_.offsetHeight - arrowSize);\n      break;\n\n    case 2:\n      // Shadow is below\n      width = width * 0.8;\n\n      if (anchorHeight) {\n        this.bubbleShadow_.style['top'] = this.px(pos.y);\n      } else {\n        this.bubbleShadow_.style['top'] = this.px(pos.y + arrowSize);\n      }\n\n      this.bubbleShadow_.style['left'] = this.px(pos.x - width * arrowPosition);\n      this.bubbleShadow_.style['width'] = this.px(width);\n      this.bubbleShadow_.style['height'] = this.px(2);\n      break;\n  }\n};\n\nInfoBubble.prototype['draw'] = InfoBubble.prototype.draw;\n/**\r\n * Removing the InfoBubble from a map\r\n */\n\nInfoBubble.prototype.onRemove = function () {\n  if (this.bubble_ && this.bubble_.parentNode) {\n    this.bubble_.parentNode.removeChild(this.bubble_);\n  }\n\n  if (this.bubbleShadow_ && this.bubbleShadow_.parentNode) {\n    this.bubbleShadow_.parentNode.removeChild(this.bubbleShadow_);\n  }\n\n  for (var i = 0, listener; listener = this.listeners_[i]; i++) {\n    google.maps.event.removeListener(listener);\n  }\n};\n\nInfoBubble.prototype['onRemove'] = InfoBubble.prototype.onRemove;\n/**\r\n * Is the InfoBubble open\r\n *\r\n * @return {boolean} If the InfoBubble is open.\r\n */\n\nInfoBubble.prototype.isOpen = function () {\n  return this.isOpen_;\n};\n\nInfoBubble.prototype['isOpen'] = InfoBubble.prototype.isOpen;\n/**\r\n * Close the InfoBubble\r\n */\n\nInfoBubble.prototype.close = function () {\n  if (this.bubble_) {\n    this.bubble_.style['display'] = 'none'; // Remove the animation so we next time it opens it will animate again\n\n    this.bubble_.className = this.bubble_.className.replace(this.animationName_, '');\n  }\n\n  if (this.bubbleShadow_) {\n    this.bubbleShadow_.style['display'] = 'none';\n    this.bubbleShadow_.className = this.bubbleShadow_.className.replace(this.animationName_, '');\n  }\n\n  this.isOpen_ = false;\n};\n\nInfoBubble.prototype['close'] = InfoBubble.prototype.close;\n/**\r\n * Open the InfoBubble (asynchronous).\r\n *\r\n * @param {google.maps.Map=} opt_map Optional map to open on.\r\n * @param {google.maps.MVCObject=} opt_anchor Optional anchor to position at.\r\n */\n\nInfoBubble.prototype.open = function (opt_map, opt_anchor) {\n  var that = this;\n  window.setTimeout(function () {\n    that.open_(opt_map, opt_anchor);\n  }, 0);\n};\n/**\r\n * Open the InfoBubble\r\n * @private\r\n * @param {google.maps.Map=} opt_map Optional map to open on.\r\n * @param {google.maps.MVCObject=} opt_anchor Optional anchor to position at.\r\n */\n\n\nInfoBubble.prototype.open_ = function (opt_map, opt_anchor) {\n  this.updateContent_();\n\n  if (opt_map) {\n    this.setMap(opt_map);\n  }\n\n  if (opt_anchor) {\n    this.set('anchor', opt_anchor);\n    this.bindTo('anchorPoint', opt_anchor);\n    this.bindTo('position', opt_anchor);\n  } // Show the bubble and the show\n\n\n  this.bubble_.style['display'] = this.bubbleShadow_.style['display'] = '';\n  var animation = !this.get('disableAnimation');\n\n  if (animation) {\n    // Add the animation\n    this.bubble_.className += ' ' + this.animationName_;\n    this.bubbleShadow_.className += ' ' + this.animationName_;\n  }\n\n  this.redraw_();\n  this.isOpen_ = true;\n  var pan = !this.get('disableAutoPan');\n\n  if (pan) {\n    var that = this;\n    window.setTimeout(function () {\n      // Pan into view, done in a time out to make it feel nicer :)\n      that.panToView();\n    }, 200);\n  }\n};\n\nInfoBubble.prototype['open'] = InfoBubble.prototype.open;\n/**\r\n * Set the position of the InfoBubble\r\n *\r\n * @param {google.maps.LatLng} position The position to set.\r\n */\n\nInfoBubble.prototype.setPosition = function (position) {\n  if (position) {\n    this.set('position', position);\n  }\n};\n\nInfoBubble.prototype['setPosition'] = InfoBubble.prototype.setPosition;\n/**\r\n * Returns the position of the InfoBubble\r\n *\r\n * @return {google.maps.LatLng} the position.\r\n */\n\nInfoBubble.prototype.getPosition = function () {\n  return (\n    /** @type {google.maps.LatLng} */\n    this.get('position')\n  );\n};\n\nInfoBubble.prototype['getPosition'] = InfoBubble.prototype.getPosition;\n/**\r\n * position changed MVC callback\r\n */\n\nInfoBubble.prototype.position_changed = function () {\n  this.draw();\n};\n\nInfoBubble.prototype['position_changed'] = InfoBubble.prototype.position_changed;\n/**\r\n * Pan the InfoBubble into view\r\n */\n\nInfoBubble.prototype.panToView = function () {\n  var projection = this.getProjection();\n\n  if (!projection) {\n    // The map projection is not ready yet so do nothing\n    return;\n  }\n\n  if (!this.bubble_) {\n    // No Bubble yet so do nothing\n    return;\n  }\n\n  var anchorHeight = this.getAnchorHeight_();\n  var height = this.bubble_.offsetHeight + anchorHeight;\n  var map = this.get('map');\n  var mapDiv = map.getDiv();\n  var mapHeight = mapDiv.offsetHeight;\n  var latLng = this.getPosition();\n  var centerPos = projection.fromLatLngToContainerPixel(map.getCenter());\n  var pos = projection.fromLatLngToContainerPixel(latLng); // Find out how much space at the top is free\n\n  var spaceTop = centerPos.y - height; // Fine out how much space at the bottom is free\n\n  var spaceBottom = mapHeight - centerPos.y;\n  var needsTop = spaceTop < 0;\n  var deltaY = 0;\n\n  if (needsTop) {\n    spaceTop *= -1;\n    deltaY = (spaceTop + spaceBottom) / 2;\n  }\n\n  pos.y -= deltaY;\n  latLng = projection.fromContainerPixelToLatLng(pos);\n\n  if (map.getCenter() != latLng) {\n    map.panTo(latLng);\n  }\n};\n\nInfoBubble.prototype['panToView'] = InfoBubble.prototype.panToView;\n/**\r\n * Converts a HTML string to a document fragment.\r\n *\r\n * @param {string} htmlString The HTML string to convert.\r\n * @return {Node} A HTML document fragment.\r\n * @private\r\n */\n\nInfoBubble.prototype.htmlToDocumentFragment_ = function (htmlString) {\n  htmlString = htmlString.replace(/^\\s*([\\S\\s]*)\\b\\s*$/, '$1');\n  var tempDiv = document.createElement('DIV');\n  tempDiv.innerHTML = htmlString;\n\n  if (tempDiv.childNodes.length == 1) {\n    return (\n      /** @type {!Node} */\n      tempDiv.removeChild(tempDiv.firstChild)\n    );\n  } else {\n    var fragment = document.createDocumentFragment();\n\n    while (tempDiv.firstChild) {\n      fragment.appendChild(tempDiv.firstChild);\n    }\n\n    return fragment;\n  }\n};\n/**\r\n * Removes all children from the node.\r\n *\r\n * @param {Node} node The node to remove all children from.\r\n * @private\r\n */\n\n\nInfoBubble.prototype.removeChildren_ = function (node) {\n  if (!node) {\n    return;\n  }\n\n  var child;\n\n  while (child = node.firstChild) {\n    node.removeChild(child);\n  }\n};\n/**\r\n * Sets the content of the infobubble.\r\n *\r\n * @param {string|Node} content The content to set.\r\n */\n\n\nInfoBubble.prototype.setContent = function (content) {\n  this.set('content', content);\n};\n\nInfoBubble.prototype['setContent'] = InfoBubble.prototype.setContent;\n/**\r\n * Get the content of the infobubble.\r\n *\r\n * @return {string|Node} The marker content.\r\n */\n\nInfoBubble.prototype.getContent = function () {\n  return (\n    /** @type {Node|string} */\n    this.get('content')\n  );\n};\n\nInfoBubble.prototype['getContent'] = InfoBubble.prototype.getContent;\n/**\r\n * Sets the marker content and adds loading events to images\r\n */\n\nInfoBubble.prototype.updateContent_ = function () {\n  if (!this.content_) {\n    // The Content area doesnt exist.\n    return;\n  }\n\n  this.removeChildren_(this.content_);\n  var content = this.getContent();\n\n  if (content) {\n    if (typeof content == 'string') {\n      content = this.htmlToDocumentFragment_(content);\n    }\n\n    this.content_.appendChild(content);\n    var that = this;\n    var images = this.content_.getElementsByTagName('IMG');\n\n    for (var i = 0, image; image = images[i]; i++) {\n      // Because we don't know the size of an image till it loads, add a\n      // listener to the image load so the marker can resize and reposition\n      // itself to be the correct height.\n      google.maps.event.addDomListener(image, 'load', function () {\n        that.imageLoaded_();\n      });\n    }\n  }\n\n  this.redraw_();\n};\n/**\r\n * Image loaded\r\n * @private\r\n */\n\n\nInfoBubble.prototype.imageLoaded_ = function () {\n  var pan = !this.get('disableAutoPan');\n  this.redraw_();\n\n  if (pan && (this.tabs_.length == 0 || this.activeTab_.index == 0)) {\n    this.panToView();\n  }\n};\n/**\r\n * Updates the styles of the tabs\r\n * @private\r\n */\n\n\nInfoBubble.prototype.updateTabStyles_ = function () {\n  if (this.tabs_ && this.tabs_.length) {\n    for (var i = 0, tab; tab = this.tabs_[i]; i++) {\n      this.setTabStyle_(tab.tab);\n    }\n\n    this.activeTab_.style['zIndex'] = this.baseZIndex_;\n    var borderWidth = this.getBorderWidth_();\n    var padding = this.getPadding_() / 2;\n    this.activeTab_.style['borderBottomWidth'] = 0;\n    this.activeTab_.style['paddingBottom'] = this.px(padding + borderWidth);\n  }\n};\n/**\r\n * Sets the style of a tab\r\n * @private\r\n * @param {Element} tab The tab to style.\r\n */\n\n\nInfoBubble.prototype.setTabStyle_ = function (tab) {\n  var backgroundColor = this.get('backgroundColor');\n  var borderColor = this.get('borderColor');\n  var borderRadius = this.getBorderRadius_();\n  var borderWidth = this.getBorderWidth_();\n  var padding = this.getPadding_();\n  var marginRight = this.px(-Math.max(padding, borderRadius));\n  var borderRadiusPx = this.px(borderRadius);\n  var index = this.baseZIndex_;\n\n  if (tab.index) {\n    index -= tab.index;\n  } // The styles for the tab\n\n\n  var styles = {\n    'cssFloat': 'left',\n    'position': 'relative',\n    'cursor': 'pointer',\n    'backgroundColor': backgroundColor,\n    'border': this.px(borderWidth) + ' solid ' + borderColor,\n    'padding': this.px(padding / 2) + ' ' + this.px(padding),\n    'marginRight': marginRight,\n    'whiteSpace': 'nowrap',\n    'borderRadiusTopLeft': borderRadiusPx,\n    'MozBorderRadiusTopleft': borderRadiusPx,\n    'webkitBorderTopLeftRadius': borderRadiusPx,\n    'borderRadiusTopRight': borderRadiusPx,\n    'MozBorderRadiusTopright': borderRadiusPx,\n    'webkitBorderTopRightRadius': borderRadiusPx,\n    'zIndex': index,\n    'display': 'inline'\n  };\n\n  for (var style in styles) {\n    tab.style[style] = styles[style];\n  }\n\n  var className = this.get('tabClassName');\n\n  if (className != undefined) {\n    tab.className += ' ' + className;\n  }\n};\n/**\r\n * Add user actions to a tab\r\n * @private\r\n * @param {Object} tab The tab to add the actions to.\r\n */\n\n\nInfoBubble.prototype.addTabActions_ = function (tab) {\n  var that = this;\n  tab.listener_ = google.maps.event.addDomListener(tab, 'click', function () {\n    that.setTabActive_(this);\n  });\n};\n/**\r\n * Set a tab at a index to be active\r\n *\r\n * @param {number} index The index of the tab.\r\n */\n\n\nInfoBubble.prototype.setTabActive = function (index) {\n  var tab = this.tabs_[index - 1];\n\n  if (tab) {\n    this.setTabActive_(tab.tab);\n  }\n};\n\nInfoBubble.prototype['setTabActive'] = InfoBubble.prototype.setTabActive;\n/**\r\n * Set a tab to be active\r\n * @private\r\n * @param {Object} tab The tab to set active.\r\n */\n\nInfoBubble.prototype.setTabActive_ = function (tab) {\n  if (!tab) {\n    this.setContent('');\n    this.updateContent_();\n    return;\n  }\n\n  var padding = this.getPadding_() / 2;\n  var borderWidth = this.getBorderWidth_();\n\n  if (this.activeTab_) {\n    var activeTab = this.activeTab_;\n    activeTab.style['zIndex'] = this.baseZIndex_ - activeTab.index;\n    activeTab.style['paddingBottom'] = this.px(padding);\n    activeTab.style['borderBottomWidth'] = this.px(borderWidth);\n  }\n\n  tab.style['zIndex'] = this.baseZIndex_;\n  tab.style['borderBottomWidth'] = 0;\n  tab.style['marginBottomWidth'] = '-10px';\n  tab.style['paddingBottom'] = this.px(padding + borderWidth);\n  this.setContent(this.tabs_[tab.index].content);\n  this.updateContent_();\n  this.activeTab_ = tab;\n  this.redraw_();\n};\n/**\r\n * Set the max width of the InfoBubble\r\n *\r\n * @param {number} width The max width.\r\n */\n\n\nInfoBubble.prototype.setMaxWidth = function (width) {\n  this.set('maxWidth', width);\n};\n\nInfoBubble.prototype['setMaxWidth'] = InfoBubble.prototype.setMaxWidth;\n/**\r\n * maxWidth changed MVC callback\r\n */\n\nInfoBubble.prototype.maxWidth_changed = function () {\n  this.redraw_();\n};\n\nInfoBubble.prototype['maxWidth_changed'] = InfoBubble.prototype.maxWidth_changed;\n/**\r\n * Set the max height of the InfoBubble\r\n *\r\n * @param {number} height The max height.\r\n */\n\nInfoBubble.prototype.setMaxHeight = function (height) {\n  this.set('maxHeight', height);\n};\n\nInfoBubble.prototype['setMaxHeight'] = InfoBubble.prototype.setMaxHeight;\n/**\r\n * maxHeight changed MVC callback\r\n */\n\nInfoBubble.prototype.maxHeight_changed = function () {\n  this.redraw_();\n};\n\nInfoBubble.prototype['maxHeight_changed'] = InfoBubble.prototype.maxHeight_changed;\n/**\r\n * Set the min width of the InfoBubble\r\n *\r\n * @param {number} width The min width.\r\n */\n\nInfoBubble.prototype.setMinWidth = function (width) {\n  this.set('minWidth', width);\n};\n\nInfoBubble.prototype['setMinWidth'] = InfoBubble.prototype.setMinWidth;\n/**\r\n * minWidth changed MVC callback\r\n */\n\nInfoBubble.prototype.minWidth_changed = function () {\n  this.redraw_();\n};\n\nInfoBubble.prototype['minWidth_changed'] = InfoBubble.prototype.minWidth_changed;\n/**\r\n * Set the min height of the InfoBubble\r\n *\r\n * @param {number} height The min height.\r\n */\n\nInfoBubble.prototype.setMinHeight = function (height) {\n  this.set('minHeight', height);\n};\n\nInfoBubble.prototype['setMinHeight'] = InfoBubble.prototype.setMinHeight;\n/**\r\n * minHeight changed MVC callback\r\n */\n\nInfoBubble.prototype.minHeight_changed = function () {\n  this.redraw_();\n};\n\nInfoBubble.prototype['minHeight_changed'] = InfoBubble.prototype.minHeight_changed;\n/**\r\n * Add a tab\r\n *\r\n * @param {string} label The label of the tab.\r\n * @param {string|Element} content The content of the tab.\r\n */\n\nInfoBubble.prototype.addTab = function (label, content) {\n  var tab = document.createElement('DIV');\n  tab.innerHTML = label;\n  this.setTabStyle_(tab);\n  this.addTabActions_(tab);\n  this.tabsContainer_.appendChild(tab);\n  this.tabs_.push({\n    label: label,\n    content: content,\n    tab: tab\n  });\n  tab.index = this.tabs_.length - 1;\n  tab.style['zIndex'] = this.baseZIndex_ - tab.index;\n\n  if (!this.activeTab_) {\n    this.setTabActive_(tab);\n  }\n\n  tab.className = tab.className + ' ' + this.animationName_;\n  this.redraw_();\n};\n\nInfoBubble.prototype['addTab'] = InfoBubble.prototype.addTab;\n/**\r\n * Update a tab at a speicifc index\r\n *\r\n * @param {number} index The index of the tab.\r\n * @param {?string} opt_label The label to change to.\r\n * @param {?string} opt_content The content to update to.\r\n */\n\nInfoBubble.prototype.updateTab = function (index, opt_label, opt_content) {\n  if (!this.tabs_.length || index < 0 || index >= this.tabs_.length) {\n    return;\n  }\n\n  var tab = this.tabs_[index];\n\n  if (opt_label != undefined) {\n    tab.tab.innerHTML = tab.label = opt_label;\n  }\n\n  if (opt_content != undefined) {\n    tab.content = opt_content;\n  }\n\n  if (this.activeTab_ == tab.tab) {\n    this.setContent(tab.content);\n    this.updateContent_();\n  }\n\n  this.redraw_();\n};\n\nInfoBubble.prototype['updateTab'] = InfoBubble.prototype.updateTab;\n/**\r\n * Remove a tab at a specific index\r\n *\r\n * @param {number} index The index of the tab to remove.\r\n */\n\nInfoBubble.prototype.removeTab = function (index) {\n  if (!this.tabs_.length || index < 0 || index >= this.tabs_.length) {\n    return;\n  }\n\n  var tab = this.tabs_[index];\n  tab.tab.parentNode.removeChild(tab.tab);\n  google.maps.event.removeListener(tab.tab.listener_);\n  this.tabs_.splice(index, 1);\n  delete tab;\n\n  for (var i = 0, t; t = this.tabs_[i]; i++) {\n    t.tab.index = i;\n  }\n\n  if (tab.tab == this.activeTab_) {\n    // Removing the current active tab\n    if (this.tabs_[index]) {\n      // Show the tab to the right\n      this.activeTab_ = this.tabs_[index].tab;\n    } else if (this.tabs_[index - 1]) {\n      // Show a tab to the left\n      this.activeTab_ = this.tabs_[index - 1].tab;\n    } else {\n      // No tabs left to sho\n      this.activeTab_ = undefined;\n    }\n\n    this.setTabActive_(this.activeTab_);\n  }\n\n  this.redraw_();\n};\n\nInfoBubble.prototype['removeTab'] = InfoBubble.prototype.removeTab;\n/**\r\n * Get the size of an element\r\n * @private\r\n * @param {Node|string} element The element to size.\r\n * @param {number=} opt_maxWidth Optional max width of the element.\r\n * @param {number=} opt_maxHeight Optional max height of the element.\r\n * @return {google.maps.Size} The size of the element.\r\n */\n\nInfoBubble.prototype.getElementSize_ = function (element, opt_maxWidth, opt_maxHeight) {\n  var sizer = document.createElement('DIV');\n  sizer.style['display'] = 'inline';\n  sizer.style['position'] = 'absolute';\n  sizer.style['visibility'] = 'hidden';\n\n  if (typeof element == 'string') {\n    sizer.innerHTML = element;\n  } else {\n    sizer.appendChild(element.cloneNode(true));\n  }\n\n  document.body.appendChild(sizer);\n  var size = new google.maps.Size(sizer.offsetWidth, sizer.offsetHeight); // If the width is bigger than the max width then set the width and size again\n\n  if (opt_maxWidth && size.width > opt_maxWidth) {\n    sizer.style['width'] = this.px(opt_maxWidth);\n    size = new google.maps.Size(sizer.offsetWidth, sizer.offsetHeight);\n  } // If the height is bigger than the max height then set the height and size\n  // again\n\n\n  if (opt_maxHeight && size.height > opt_maxHeight) {\n    sizer.style['height'] = this.px(opt_maxHeight);\n    size = new google.maps.Size(sizer.offsetWidth, sizer.offsetHeight);\n  }\n\n  document.body.removeChild(sizer);\n  delete sizer;\n  return size;\n};\n/**\r\n * Redraw the InfoBubble\r\n * @private\r\n */\n\n\nInfoBubble.prototype.redraw_ = function () {\n  this.figureOutSize_();\n  this.positionCloseButton_();\n  this.draw();\n};\n/**\r\n * Figure out the optimum size of the InfoBubble\r\n * @private\r\n */\n\n\nInfoBubble.prototype.figureOutSize_ = function () {\n  var map = this.get('map');\n\n  if (!map) {\n    return;\n  }\n\n  var padding = this.getPadding_();\n  var borderWidth = this.getBorderWidth_();\n  var borderRadius = this.getBorderRadius_();\n  var arrowSize = this.getArrowSize_();\n  var mapDiv = map.getDiv();\n  var gutter = arrowSize * 2;\n  var mapWidth = mapDiv.offsetWidth - gutter;\n  var mapHeight = mapDiv.offsetHeight - gutter - this.getAnchorHeight_();\n  var tabHeight = 0;\n  var width =\n  /** @type {number} */\n  this.get('minWidth') || 0;\n  var height =\n  /** @type {number} */\n  this.get('minHeight') || 0;\n  var maxWidth =\n  /** @type {number} */\n  this.get('maxWidth') || 0;\n  var maxHeight =\n  /** @type {number} */\n  this.get('maxHeight') || 0;\n  maxWidth = Math.min(mapWidth, maxWidth);\n  maxHeight = Math.min(mapHeight, maxHeight);\n  var tabWidth = 0;\n\n  if (this.tabs_.length) {\n    // If there are tabs then you need to check the size of each tab's content\n    for (var i = 0, tab; tab = this.tabs_[i]; i++) {\n      var tabSize = this.getElementSize_(tab.tab, maxWidth, maxHeight);\n      var contentSize = this.getElementSize_(tab.content, maxWidth, maxHeight);\n\n      if (width < tabSize.width) {\n        width = tabSize.width;\n      } // Add up all the tab widths because they might end up being wider than\n      // the content\n\n\n      tabWidth += tabSize.width;\n\n      if (height < tabSize.height) {\n        height = tabSize.height;\n      }\n\n      if (tabSize.height > tabHeight) {\n        tabHeight = tabSize.height;\n      }\n\n      if (width < contentSize.width) {\n        width = contentSize.width;\n      }\n\n      if (height < contentSize.height) {\n        height = contentSize.height;\n      }\n    }\n  } else {\n    var content =\n    /** @type {string|Node} */\n    this.get('content');\n\n    if (typeof content == 'string') {\n      content = this.htmlToDocumentFragment_(content);\n    }\n\n    if (content) {\n      var contentSize = this.getElementSize_(content, maxWidth, maxHeight);\n\n      if (width < contentSize.width) {\n        width = contentSize.width;\n      }\n\n      if (height < contentSize.height) {\n        height = contentSize.height;\n      }\n    }\n  }\n\n  if (maxWidth) {\n    width = Math.min(width, maxWidth);\n  }\n\n  if (maxHeight) {\n    height = Math.min(height, maxHeight);\n  }\n\n  width = Math.max(width, tabWidth);\n\n  if (width == tabWidth) {\n    width = width + 2 * padding;\n  }\n\n  arrowSize = arrowSize * 2;\n  width = Math.max(width, arrowSize); // Maybe add this as a option so they can go bigger than the map if the user\n  // wants\n\n  if (width > mapWidth) {\n    width = mapWidth;\n  }\n\n  if (height > mapHeight) {\n    height = mapHeight - tabHeight;\n  }\n\n  if (this.tabsContainer_) {\n    this.tabHeight_ = tabHeight;\n    this.tabsContainer_.style['width'] = this.px(tabWidth);\n  }\n\n  this.contentContainer_.style['width'] = this.px(width);\n  this.contentContainer_.style['height'] = this.px(height);\n};\n/**\r\n *  Get the height of the anchor\r\n *\r\n *  This function is a hack for now and doesn't really work that good, need to\r\n *  wait for pixelBounds to be correctly exposed.\r\n *  @private\r\n *  @return {number} The height of the anchor.\r\n */\n\n\nInfoBubble.prototype.getAnchorHeight_ = function () {\n  var anchor = this.get('anchor');\n\n  if (anchor) {\n    var anchorPoint =\n    /** @type google.maps.Point */\n    this.get('anchorPoint');\n\n    if (anchorPoint) {\n      return -1 * anchorPoint.y;\n    }\n  }\n\n  return 0;\n};\n\nInfoBubble.prototype.anchorPoint_changed = function () {\n  this.draw();\n};\n\nInfoBubble.prototype['anchorPoint_changed'] = InfoBubble.prototype.anchorPoint_changed;\n/**\r\n * Position the close button in the right spot.\r\n * @private\r\n */\n\nInfoBubble.prototype.positionCloseButton_ = function () {\n  var br = this.getBorderRadius_();\n  var bw = this.getBorderWidth_();\n  var right = 2;\n  var top = 2;\n\n  if (this.tabs_.length && this.tabHeight_) {\n    top += this.tabHeight_;\n  }\n\n  top += bw;\n  right += bw;\n  var c = this.contentContainer_;\n\n  if (c && c.clientHeight < c.scrollHeight) {\n    // If there are scrollbars then move the cross in so it is not over\n    // scrollbar\n    right += 15;\n  }\n\n  this.close_.style['right'] = this.px(right);\n  this.close_.style['top'] = this.px(top);\n};\n/*\r\n * Sets InfoBubble Position\r\n * */\n\n\nInfoBubble.prototype.setBubbleOffset = function (xOffset, yOffset) {\n  this.bubbleOffsetX = parseInt(xOffset);\n  this.bubbleOffsetY = parseInt(yOffset);\n};\n/*\r\n * Gets InfoBubble Position\r\n * */\n\n\nInfoBubble.prototype.getBubbleOffset = function () {\n  return {\n    x: this.bubbleOffsetX || 0,\n    y: this.bubbleOffsetY || 0\n  };\n};\n/**\r\n * Draw the InfoBubble\r\n * Implementing the OverlayView interface\r\n */\n\n\nInfoBubble.prototype.draw = function () {\n  var projection = this.getProjection();\n\n  if (!projection) {\n    // The map projection is not ready yet so do nothing\n    return;\n  }\n\n  var latLng =\n  /** @type {google.maps.LatLng} */\n  this.get('position');\n\n  if (!latLng) {\n    this.close();\n    return;\n  }\n\n  var tabHeight = 0;\n\n  if (this.activeTab_) {\n    tabHeight = this.activeTab_.offsetHeight;\n  }\n\n  var anchorHeight = this.getAnchorHeight_();\n  var arrowSize = this.getArrowSize_();\n  var arrowPosition = this.getArrowPosition_();\n  arrowPosition = arrowPosition / 100;\n  var pos = projection.fromLatLngToDivPixel(latLng);\n  var width = this.contentContainer_.offsetWidth;\n  var height = this.bubble_.offsetHeight;\n\n  if (!width) {\n    return;\n  } // Adjust for the height of the info bubble\n\n\n  var top = pos.y - (height + arrowSize) + this.getBubbleOffset().y;\n\n  if (anchorHeight) {\n    // If there is an anchor then include the height\n    top -= anchorHeight;\n  }\n\n  var left = pos.x - width * arrowPosition + this.getBubbleOffset().x;\n  this.bubble_.style['top'] = this.px(top);\n  this.bubble_.style['left'] = this.px(left);\n  var shadowStyle = parseInt(this.get('shadowStyle'), 10);\n\n  switch (shadowStyle) {\n    case 1:\n      // Shadow is behind\n      this.bubbleShadow_.style['top'] = this.px(top + tabHeight - 1);\n      this.bubbleShadow_.style['left'] = this.px(left);\n      this.bubbleShadow_.style['width'] = this.px(width);\n      this.bubbleShadow_.style['height'] = this.px(this.contentContainer_.offsetHeight - arrowSize);\n      break;\n\n    case 2:\n      // Shadow is below\n      width = width * 0.8;\n\n      if (anchorHeight) {\n        this.bubbleShadow_.style['top'] = this.px(pos.y);\n      } else {\n        this.bubbleShadow_.style['top'] = this.px(pos.y + arrowSize);\n      }\n\n      this.bubbleShadow_.style['left'] = this.px(pos.x - width * arrowPosition);\n      this.bubbleShadow_.style['width'] = this.px(width);\n      this.bubbleShadow_.style['height'] = this.px(2);\n      break;\n  }\n};\n\nmodule.exports = InfoBubble;","map":null,"metadata":{},"sourceType":"script"}