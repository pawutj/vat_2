{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _svgNamespace = 'http://www.w3.org/2000/svg',\n    _appendChild = require('yo-yoify/lib/appendChild');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Plugin = require('../Plugin');\n\nvar Provider = require('../../uppy-base/src/plugins/Provider');\n\nvar View = require('../../generic-provider-views/index');\n\nmodule.exports = function (_Plugin) {\n  _inherits(Google, _Plugin);\n\n  function Google(core, opts) {\n    _classCallCheck(this, Google);\n\n    var _this // Visual\n    // set default options\n    = _possibleConstructorReturn(this, _Plugin.call(this, core, opts));\n\n    _this.type = 'acquirer';\n    _this.id = 'GoogleDrive';\n    _this.title = 'Google Drive';\n    _this.stateId = 'googleDrive';\n\n    _this.icon = function () {\n      var _path, _uppyIcon;\n\n      return _uppyIcon = document.createElementNS(_svgNamespace, 'svg'), _uppyIcon.setAttribute('width', '28'), _uppyIcon.setAttribute('height', '28'), _uppyIcon.setAttribute('viewBox', '0 0 16 16'), _uppyIcon.setAttribute('class', 'UppyIcon UppyModalTab-icon'), _appendChild(_uppyIcon, [' ', (_path = document.createElementNS(_svgNamespace, 'path'), _path.setAttribute('d', 'M2.955 14.93l2.667-4.62H16l-2.667 4.62H2.955zm2.378-4.62l-2.666 4.62L0 10.31l5.19-8.99 2.666 4.62-2.523 4.37zm10.523-.25h-5.333l-5.19-8.99h5.334l5.19 8.99z'), _path), ' ']), _uppyIcon;\n    }; // writing out the key explicitly for readability the key used to store\n    // the provider instance must be equal to this.id.\n\n\n    _this.GoogleDrive = new Provider(core, {\n      host: _this.opts.host,\n      provider: 'drive',\n      authProvider: 'google'\n    });\n    _this.files = [];\n    _this.onAuth = _this.onAuth.bind(_this);\n    _this.render = _this.render.bind(_this);\n    var defaultOptions = {}; // merge default options with the ones set by user\n\n    _this.opts = _extends({}, defaultOptions, opts);\n    return _this;\n  }\n\n  Google.prototype.install = function install() {\n    this.view = new View(this); // Set default state for Google Drive\n\n    this.core.setState({\n      // writing out the key explicitly for readability the key used to store\n      // the plugin state must be equal to this.stateId.\n      googleDrive: {\n        authenticated: false,\n        files: [],\n        folders: [],\n        directories: [],\n        activeRow: -1,\n        filterInput: '',\n        isSearchVisible: false\n      }\n    });\n    var target = this.opts.target;\n    var plugin = this;\n    this.target = this.mount(target, plugin);\n  };\n\n  Google.prototype.uninstall = function uninstall() {\n    this.unmount();\n  };\n\n  Google.prototype.onAuth = function onAuth(authenticated) {\n    this.view.updateState({\n      authenticated: authenticated\n    });\n\n    if (authenticated) {\n      this.view.getFolder('root');\n    }\n  };\n\n  Google.prototype.isFolder = function isFolder(item) {\n    return item.mimeType === 'application/vnd.google-apps.folder';\n  };\n\n  Google.prototype.getItemData = function getItemData(item) {\n    return _extends({}, item, {\n      size: parseFloat(item.fileSize)\n    });\n  };\n\n  Google.prototype.getItemIcon = function getItemIcon(item) {\n    var _img;\n\n    return _img = document.createElement('img'), _img.setAttribute('src', '' + String(item.iconLink) + ''), _img;\n  };\n\n  Google.prototype.getItemSubList = function getItemSubList(item) {\n    var _this2 = this;\n\n    return item.items.filter(function (i) {\n      return _this2.isFolder(i) || !i.mimeType.startsWith('application/vnd.google');\n    });\n  };\n\n  Google.prototype.getItemName = function getItemName(item) {\n    return item.title ? item.title : '/';\n  };\n\n  Google.prototype.getMimeType = function getMimeType(item) {\n    return item.mimeType;\n  };\n\n  Google.prototype.getItemId = function getItemId(item) {\n    return item.id;\n  };\n\n  Google.prototype.getItemRequestPath = function getItemRequestPath(item) {\n    return this.getItemId(item);\n  };\n\n  Google.prototype.getItemModifiedDate = function getItemModifiedDate(item) {\n    return item.modifiedByMeDate;\n  };\n\n  Google.prototype.getItemThumbnailUrl = function getItemThumbnailUrl(item) {\n    return this.opts.host + '/' + this.GoogleDrive.id + '/thumbnail/' + this.getItemRequestPath(item);\n  };\n\n  Google.prototype.render = function render(state) {\n    return this.view.render(state);\n  };\n\n  return Google;\n}(Plugin);","map":null,"metadata":{},"sourceType":"script"}