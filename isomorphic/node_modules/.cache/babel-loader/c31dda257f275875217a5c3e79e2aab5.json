{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.getRef = void 0;\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _reduxSaga = require(\"redux-saga\");\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _utils = require(\"./utils\");\n\nvar _marked =\n/*#__PURE__*/\n_regenerator.default.mark(read),\n    _marked2 =\n/*#__PURE__*/\n_regenerator.default.mark(create),\n    _marked3 =\n/*#__PURE__*/\n_regenerator.default.mark(update),\n    _marked4 =\n/*#__PURE__*/\n_regenerator.default.mark(patch),\n    _marked5 =\n/*#__PURE__*/\n_regenerator.default.mark(_delete),\n    _marked6 =\n/*#__PURE__*/\n_regenerator.default.mark(sync);\n\nvar getRef = function getRef(rsf, pathOrRef) {\n  return typeof pathOrRef === 'string' ? rsf.app.database().ref(pathOrRef) : pathOrRef;\n};\n\nexports.getRef = getRef;\n\nfunction read(pathOrRef) {\n  var ref, result;\n  return _regenerator.default.wrap(function read$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          ref = getRef(this, pathOrRef);\n          _context.next = 3;\n          return (0, _effects.call)([ref, ref.once], 'value');\n\n        case 3:\n          result = _context.sent;\n          return _context.abrupt(\"return\", result.val());\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\n\nfunction create(pathOrRef, data) {\n  var ref, result;\n  return _regenerator.default.wrap(function create$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          ref = getRef(this, pathOrRef);\n          _context2.next = 3;\n          return (0, _effects.call)([ref, ref.push], data);\n\n        case 3:\n          result = _context2.sent;\n          return _context2.abrupt(\"return\", result.key);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nfunction update(pathOrRef, data) {\n  var ref;\n  return _regenerator.default.wrap(function update$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          ref = getRef(this, pathOrRef);\n          _context3.next = 3;\n          return (0, _effects.call)([ref, ref.set], data);\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}\n\nfunction patch(pathOrRef, data) {\n  var ref;\n  return _regenerator.default.wrap(function patch$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          ref = getRef(this, pathOrRef);\n          _context4.next = 3;\n          return (0, _effects.call)([ref, ref.update], data);\n\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this);\n}\n\nfunction _delete(pathOrRef) {\n  var ref;\n  return _regenerator.default.wrap(function _delete$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          ref = getRef(this, pathOrRef);\n          _context5.next = 3;\n          return (0, _effects.call)([ref, ref.remove]);\n\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, this);\n}\n\nfunction channel(pathOrRef) {\n  var event = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'value';\n  var buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _reduxSaga.buffers.none();\n  var ref = getRef(this, pathOrRef);\n  var channel = (0, _reduxSaga.eventChannel)(function (emit) {\n    var callback = ref.on(event, function (dataSnapshot) {\n      return emit({\n        snapshot: dataSnapshot,\n        value: dataSnapshot.val()\n      });\n    }); // Returns unsubscribe function\n\n    return function () {\n      return ref.off(event, callback);\n    };\n  }, buffer);\n  return channel;\n}\n\nvar defaultTransform = function defaultTransform(data) {\n  return data.value;\n};\n\nfunction sync(pathOrRef, options, event) {\n  var channel;\n  return _regenerator.default.wrap(function sync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return (0, _effects.call)(this.database.channel, pathOrRef, event);\n\n        case 2:\n          channel = _context6.sent;\n          _context6.next = 5;\n          return (0, _effects.fork)(_utils.syncChannel, channel, (0, _objectSpread2.default)({\n            transform: defaultTransform\n          }, options));\n\n        case 5:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, this);\n}\n\nvar _default = {\n  read: read,\n  create: create,\n  update: update,\n  patch: patch,\n  delete: _delete,\n  channel: channel,\n  sync: sync\n};\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}