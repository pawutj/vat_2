{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ReactElementResize = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _lodash = require('lodash.debounce');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* global window */\n\n\nvar iframeStyle = {\n  display: 'block',\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  width: '100%',\n  height: '100%',\n  overflow: 'hidden',\n  border: 'none',\n  background: 'transparent',\n  pointerEvents: 'none',\n  zIndex: -1\n};\n\nvar ReactElementResize = exports.ReactElementResize = function (_React$Component) {\n  _inherits(ReactElementResize, _React$Component);\n\n  function ReactElementResize() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, ReactElementResize);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactElementResize.__proto__ || Object.getPrototypeOf(ReactElementResize)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      width: -1,\n      height: -1,\n      offsetLeft: -1,\n      offsetTop: -1,\n      scrollLeft: -1,\n      scrollTop: -1\n    }, _this.onContainerRef = function (ref) {\n      _this.container = ref;\n    }, _this.onResize = function () {\n      var _this$sensor$contentW = _this.sensor.contentWindow,\n          width = _this$sensor$contentW.innerWidth,\n          height = _this$sensor$contentW.innerHeight;\n      var onResize = _this.props.onResize;\n      onResize({\n        width: width,\n        height: height\n      });\n\n      _this.setState({\n        width: width,\n        height: height\n      });\n    }, _this.onScroll = function () {\n      var _this$container = _this.container,\n          offsetLeft = _this$container.offsetLeft,\n          offsetTop = _this$container.offsetTop,\n          scrollLeft = _this$container.scrollLeft,\n          scrollTop = _this$container.scrollTop;\n      var onScroll = _this.props.onScroll;\n      onScroll({\n        offsetLeft: offsetLeft,\n        offsetTop: offsetTop,\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop\n      });\n\n      _this.setState({\n        offsetLeft: offsetLeft,\n        offsetTop: offsetTop,\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop\n      });\n    }, _this.onSensorRef = function (ref) {\n      _this.sensor = ref;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(ReactElementResize, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      var _props = this.props,\n          debounceTimeout = _props.debounceTimeout,\n          debounceOptions = _props.debounceOptions,\n          onResize = _props.onResize,\n          onScroll = _props.onScroll;\n\n      if (onResize) {\n        this.onResizeDebounced = debounceTimeout > -1 ? (0, _lodash2.default)(this.onResize, debounceTimeout, debounceOptions) : this.onResize;\n      }\n\n      if (onScroll) {\n        this.onScrollDebounced = debounceTimeout > -1 ? (0, _lodash2.default)(this.onScroll, debounceTimeout, debounceOptions) : this.onScroll;\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props2 = this.props,\n          onResize = _props2.onResize,\n          onScroll = _props2.onScroll;\n\n      if (onResize) {\n        this.sensor.contentWindow.addEventListener('resize', this.onResizeDebounced, false);\n        this.rafOnResize = window.requestAnimationFrame(this.onResize);\n      }\n\n      if (onScroll) {\n        this.container.addEventListener('scroll', this.onScrollDebounced, false);\n        this.rafOnScroll = window.requestAnimationFrame(this.onScroll);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var _props3 = this.props,\n          onResize = _props3.onResize,\n          onScroll = _props3.onScroll;\n\n      if (onResize) {\n        window.cancelAnimationFrame(this.rafOnResize);\n        this.sensor.contentWindow.removeEventListener('resize', this.onResizeDebounced, false);\n\n        if (this.onResizeDebounced.cancel) {\n          this.onResizeDebounced.cancel();\n        }\n      }\n\n      if (onScroll) {\n        window.cancelAnimationFrame(this.rafOnScroll);\n        this.container.removeEventListener('scroll', this.onScrollDebounced, false);\n\n        if (this.onScrollDebounced.cancel) {\n          this.onScrollDebounced.cancel();\n        }\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props4 = this.props,\n          onResize = _props4.onResize,\n          onScroll = _props4.onScroll,\n          _debounceTimeout = _props4.debounceTimeout,\n          _debounceOptions = _props4.debounceOptions,\n          style = _props4.style,\n          render = _props4.children,\n          props = _objectWithoutProperties(_props4, ['onResize', 'onScroll', 'debounceTimeout', 'debounceOptions', 'style', 'children']);\n\n      var _state = this.state,\n          width = _state.width,\n          height = _state.height,\n          offsetLeft = _state.offsetLeft,\n          offsetTop = _state.offsetTop,\n          scrollLeft = _state.scrollLeft,\n          scrollTop = _state.scrollTop;\n      var shouldRender = onResize && width > -1 && height > -1 || onScroll && offsetLeft > -1 && offsetTop > -1 && scrollLeft > -1 && scrollTop > -1;\n      return _react2.default.createElement('div', _extends({\n        ref: this.onContainerRef,\n        style: _extends({\n          position: 'relative'\n        }, style)\n      }, props), onResize ? _react2.default.createElement('iframe', {\n        ref: this.onSensorRef,\n        title: 'Element resize sensor',\n        style: iframeStyle\n      }) : null, shouldRender ? render({\n        width: width,\n        height: height,\n        offsetLeft: offsetLeft,\n        offsetTop: offsetTop,\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop\n      }) : null);\n    }\n  }]);\n\n  return ReactElementResize;\n}(_react2.default.Component);\n\nReactElementResize.defaultProps = {\n  onResize: undefined,\n  onScroll: undefined,\n  debounceTimeout: -1,\n  debounceOptions: undefined,\n  style: {},\n  children: function children() {\n    return null;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}