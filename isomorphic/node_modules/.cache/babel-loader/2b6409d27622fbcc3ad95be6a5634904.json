{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\src\\\\components\\\\card\\\\index.js\";\nimport React, { Component } from 'react';\nimport CardReactFormContainer from 'card-react';\nimport Form from '../uielements/form';\nimport { Input } from 'antd';\nimport isoModal from '../feedback/modal';\nimport './card.css';\nimport { CardInfoWrapper, InfoFormWrapper } from './cardModal.style';\nimport { InputWrapper } from '../uielements/styles/input.style';\nimport Modals from './modal.style';\nimport WithDirection from '../../settings/withDirection';\nvar WDModal = Modals(isoModal);\nvar Modal = WithDirection(WDModal);\nvar InputField = InputWrapper(Input);\n\nvar _default =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(_default, _Component);\n\n  function _default() {\n    _classCallCheck(this, _default);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(_default).apply(this, arguments));\n  }\n\n  _createClass(_default, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          modalType = _this$props.modalType,\n          editView = _this$props.editView,\n          handleCancel = _this$props.handleCancel,\n          selectedCard = _this$props.selectedCard,\n          submitCard = _this$props.submitCard,\n          updateCard = _this$props.updateCard;\n      this.columns = [{\n        title: 'Number',\n        dataIndex: 'number',\n        key: 'number'\n      }, {\n        title: 'Full Name',\n        dataIndex: 'name',\n        key: 'name'\n      }, {\n        title: 'Expiry',\n        dataIndex: 'expiry',\n        key: 'expiry'\n      }, {\n        title: 'CVC',\n        dataIndex: 'cvc',\n        key: 'cvc'\n      }];\n\n      var saveButton = function saveButton() {\n        submitCard();\n      };\n\n      var containerId = 'card-wrapper';\n      var cardConfig = {\n        container: containerId,\n        // required an object contain the form inputs names. every input must have a unique name prop.\n        formInputsNames: {\n          number: 'number',\n          // optional — default \"number\"\n          expiry: 'expiry',\n          // optional — default \"expiry\"\n          cvc: 'cvc',\n          // optional — default \"cvc\"\n          name: 'name' // optional - default \"name\"\n\n        },\n        initialValues: selectedCard,\n        classes: {\n          valid: 'valid-input',\n          // optional — default 'jp-card-valid'\n          invalid: 'valid-input' // optional — default 'jp-card-invalid'\n\n        },\n        formatting: true,\n        // optional - default true\n        placeholders: {\n          number: '•••• •••• •••• ••••',\n          expiry: '••/••',\n          cvc: '•••',\n          name: 'Full Name'\n        }\n      };\n      return React.createElement(Modal, {\n        title: modalType === 'edit' ? 'Edit Card' : 'Add Card',\n        visible: editView,\n        onCancel: handleCancel,\n        cancelText: \"Cancel\",\n        onOk: saveButton,\n        okText: modalType === 'edit' ? 'Edit Card' : 'Add Card',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }, React.createElement(CardInfoWrapper, {\n        id: containerId,\n        className: \"isoCardWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }), React.createElement(CardReactFormContainer, Object.assign({}, cardConfig, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }), React.createElement(InfoFormWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Form, {\n        className: \"isoCardInfoForm\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, this.columns.map(function (column, index) {\n        var key = column.key,\n            title = column.title;\n        return React.createElement(InputField, {\n          placeholder: title,\n          type: \"text\",\n          className: \"isoCardInput \".concat(key),\n          onChange: function onChange(event) {\n            selectedCard[key] = event.target.value;\n            updateCard(selectedCard);\n          },\n          name: key,\n          key: index,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 93\n          },\n          __self: this\n        });\n      })))));\n    }\n  }]);\n\n  return _default;\n}(Component);\n\nexport { _default as default };","map":{"version":3,"sources":["C:\\Users\\USER\\Desktop\\vat\\isomorphic\\src\\components\\card\\index.js"],"names":["React","Component","CardReactFormContainer","Form","Input","isoModal","CardInfoWrapper","InfoFormWrapper","InputWrapper","Modals","WithDirection","WDModal","Modal","InputField","props","modalType","editView","handleCancel","selectedCard","submitCard","updateCard","columns","title","dataIndex","key","saveButton","containerId","cardConfig","container","formInputsNames","number","expiry","cvc","name","initialValues","classes","valid","invalid","formatting","placeholders","map","column","index","event","target","value"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport CardReactFormContainer from 'card-react';\nimport Form from '../uielements/form';\nimport { Input } from 'antd';\nimport isoModal from '../feedback/modal';\nimport './card.css';\nimport { CardInfoWrapper, InfoFormWrapper } from './cardModal.style';\nimport { InputWrapper } from '../uielements/styles/input.style';\nimport Modals from './modal.style';\nimport WithDirection from '../../settings/withDirection';\n\nconst WDModal = Modals(isoModal);\nconst Modal = WithDirection(WDModal);\n\nconst InputField = InputWrapper(Input);\n\nexport default class extends Component {\n  render() {\n    const {\n      modalType,\n      editView,\n      handleCancel,\n      selectedCard,\n      submitCard,\n      updateCard,\n    } = this.props;\n\n    this.columns = [\n      {\n        title: 'Number',\n        dataIndex: 'number',\n        key: 'number',\n      },\n      {\n        title: 'Full Name',\n        dataIndex: 'name',\n        key: 'name',\n      },\n      {\n        title: 'Expiry',\n        dataIndex: 'expiry',\n        key: 'expiry',\n      },\n      {\n        title: 'CVC',\n        dataIndex: 'cvc',\n        key: 'cvc',\n      },\n    ];\n\n    const saveButton = () => {\n      submitCard();\n    };\n    const containerId = 'card-wrapper';\n    const cardConfig = {\n      container: containerId, // required an object contain the form inputs names. every input must have a unique name prop.\n      formInputsNames: {\n        number: 'number', // optional — default \"number\"\n        expiry: 'expiry', // optional — default \"expiry\"\n        cvc: 'cvc', // optional — default \"cvc\"\n        name: 'name', // optional - default \"name\"\n      },\n      initialValues: selectedCard,\n      classes: {\n        valid: 'valid-input', // optional — default 'jp-card-valid'\n        invalid: 'valid-input', // optional — default 'jp-card-invalid'\n      },\n      formatting: true, // optional - default true\n      placeholders: {\n        number: '•••• •••• •••• ••••',\n        expiry: '••/••',\n        cvc: '•••',\n        name: 'Full Name',\n      },\n    };\n    return (\n      <Modal\n        title={modalType === 'edit' ? 'Edit Card' : 'Add Card'}\n        visible={editView}\n        onCancel={handleCancel}\n        cancelText=\"Cancel\"\n        onOk={saveButton}\n        okText={modalType === 'edit' ? 'Edit Card' : 'Add Card'}\n      >\n        <CardInfoWrapper id={containerId} className=\"isoCardWrapper\" />\n\n        <CardReactFormContainer {...cardConfig}>\n          <InfoFormWrapper>\n            <Form className=\"isoCardInfoForm\">\n              {this.columns.map((column, index) => {\n                const { key, title } = column;\n                return (\n                  <InputField\n                    placeholder={title}\n                    type=\"text\"\n                    className={`isoCardInput ${key}`}\n                    onChange={event => {\n                      selectedCard[key] = event.target.value;\n                      updateCard(selectedCard);\n                    }}\n                    name={key}\n                    key={index}\n                  />\n                );\n              })}\n            </Form>\n          </InfoFormWrapper>\n        </CardReactFormContainer>\n      </Modal>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}