{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Plugin = require('../Plugin');\n\nvar Translator = require('../../core/Translator');\n\nvar dragDrop = require('drag-drop');\n\nvar Dashboard = require('./Dashboard');\n\nvar StatusBar = require('../StatusBar');\n\nvar Informer = require('../Informer');\n\nvar _require = require('../../core/Utils'),\n    findDOMElement = _require.findDOMElement;\n\nvar prettyBytes = require('prettier-bytes');\n\nvar _require2 = require('./icons'\n/**\n * Modal Dialog & Dashboard\n */\n),\n    defaultTabIcon = _require2.defaultTabIcon;\n\nmodule.exports = function (_Plugin) {\n  _inherits(DashboardUI, _Plugin);\n\n  function DashboardUI(core, opts) {\n    _classCallCheck(this, DashboardUI);\n\n    var _this = _possibleConstructorReturn(this, _Plugin.call(this, core, opts));\n\n    _this.id = 'DashboardUI';\n    _this.title = 'Dashboard UI';\n    _this.type = 'orchestrator';\n    var defaultLocale = {\n      strings: {\n        selectToUpload: 'Select files to upload',\n        closeModal: 'Close Modal',\n        upload: 'Upload',\n        importFrom: 'Import files from',\n        dashboardWindowTitle: 'Uppy Dashboard Window (Press escape to close)',\n        dashboardTitle: 'Uppy Dashboard',\n        copyLinkToClipboardSuccess: 'Link copied to clipboard.',\n        copyLinkToClipboardFallback: 'Copy the URL below',\n        done: 'Done',\n        localDisk: 'Local Disk',\n        myDevice: 'My Device',\n        dropPasteImport: 'Drop files here, paste, import from one of the locations above or',\n        dropPaste: 'Drop files here, paste or',\n        browse: 'browse',\n        fileProgress: 'File progress: upload speed and ETA',\n        numberOfSelectedFiles: 'Number of selected files',\n        uploadAllNewFiles: 'Upload all new files' // set default options\n\n      }\n    };\n    var defaultOptions = {\n      target: 'body',\n      getMetaFromForm: true,\n      trigger: '#uppy-select-files',\n      inline: false,\n      width: 750,\n      height: 550,\n      semiTransparent: false,\n      defaultTabIcon: defaultTabIcon(),\n      showProgressDetails: false,\n      hideUploadButton: false,\n      note: false,\n      locale: defaultLocale // merge default options with the ones set by user\n\n    };\n    _this.opts = _extends({}, defaultOptions, opts);\n    _this.locale = _extends({}, defaultLocale, _this.opts.locale);\n    _this.locale.strings = _extends({}, defaultLocale.strings, _this.opts.locale.strings);\n    _this.translator = new Translator({\n      locale: _this.locale\n    });\n    _this.containerWidth = _this.translator.translate.bind(_this.translator);\n    _this.hideModal = _this.hideModal.bind(_this);\n    _this.showModal = _this.showModal.bind(_this);\n    _this.addTarget = _this.addTarget.bind(_this);\n    _this.actions = _this.actions.bind(_this);\n    _this.hideAllPanels = _this.hideAllPanels.bind(_this);\n    _this.showPanel = _this.showPanel.bind(_this);\n    _this.initEvents = _this.initEvents.bind(_this);\n    _this.handleEscapeKeyPress = _this.handleEscapeKeyPress.bind(_this);\n    _this.handleFileCard = _this.handleFileCard.bind(_this);\n    _this.handleDrop = _this.handleDrop.bind(_this);\n    _this.pauseAll = _this.pauseAll.bind(_this);\n    _this.resumeAll = _this.resumeAll.bind(_this);\n    _this.cancelAll = _this.cancelAll.bind(_this);\n    _this.updateDashboardElWidth = _this.updateDashboardElWidth.bind(_this);\n    _this.render = _this.render.bind(_this);\n    _this.install = _this.install.bind(_this);\n    return _this;\n  }\n\n  DashboardUI.prototype.addTarget = function addTarget(plugin) {\n    var callerPluginId = plugin.id || plugin.constructor.name;\n    var callerPluginName = plugin.title || callerPluginId;\n    var callerPluginIcon = plugin.icon || this.opts.defaultTabIcon;\n    var callerPluginType = plugin.type;\n\n    if (callerPluginType !== 'acquirer' && callerPluginType !== 'progressindicator' && callerPluginType !== 'presenter') {\n      var msg = 'Dashboard: Modal can only be used by plugins of types: acquirer, progressindicator, presenter';\n      this.core.log(msg);\n      return;\n    }\n\n    var target = {\n      id: callerPluginId,\n      name: callerPluginName,\n      icon: callerPluginIcon,\n      type: callerPluginType,\n      focus: plugin.focus,\n      render: plugin.render,\n      isHidden: true\n    };\n    var modal = this.core.getState().modal;\n    var newTargets = modal.targets.slice();\n    newTargets.push(target);\n    this.core.setState({\n      modal: _extends({}, modal, {\n        targets: newTargets\n      })\n    });\n    return this.target;\n  };\n\n  DashboardUI.prototype.hideAllPanels = function hideAllPanels() {\n    var modal = this.core.getState().modal;\n    this.core.setState({\n      modal: _extends({}, modal, {\n        activePanel: false\n      })\n    });\n  };\n\n  DashboardUI.prototype.showPanel = function showPanel(id) {\n    var modal = this.core.getState().modal;\n    var activePanel = modal.targets.filter(function (target) {\n      return target.type === 'acquirer' && target.id === id;\n    })[0];\n    this.core.setState({\n      modal: _extends({}, modal, {\n        activePanel: activePanel\n      })\n    });\n  };\n\n  DashboardUI.prototype.hideModal = function hideModal() {\n    var modal = this.core.getState().modal;\n    this.core.setState({\n      modal: _extends({}, modal, {\n        isHidden: true\n      })\n    });\n    document.body.classList.remove('is-UppyDashboard-open');\n    window.scrollTo(0, this.savedDocumentScrollPosition);\n  };\n\n  DashboardUI.prototype.showModal = function showModal() {\n    var modal = this.core.getState().modal;\n    this.core.setState({\n      modal: _extends({}, modal, {\n        isHidden: false\n      }) // save scroll position\n\n    });\n    this.savedDocumentScrollPosition = window.scrollY; // add class to body that sets position fixed, move everything back\n    // to scroll position\n\n    document.body.classList.add('is-UppyDashboard-open');\n    document.body.style.top = '-' + this.savedDocumentScrollPosition + 'px'; // focus on modal inner block\n\n    this.target.querySelector('.UppyDashboard-inner').focus // this.updateDashboardElWidth()\n    // to be sure, sometimes when the function runs, container size is still 0\n    ();\n    setTimeout(this.updateDashboardElWidth, 500);\n  }; // Close the Modal on esc key press\n\n\n  DashboardUI.prototype.handleEscapeKeyPress = function handleEscapeKeyPress(event) {\n    if (event.keyCode === 27) {\n      this.hideModal();\n    }\n  };\n\n  DashboardUI.prototype.initEvents = function initEvents() {\n    var _this2 = this; // Modal open button\n\n\n    var showModalTrigger = findDOMElement(this.opts.trigger);\n\n    if (!this.opts.inline && showModalTrigger) {\n      showModalTrigger.addEventListener('click', this.showModal);\n    }\n\n    if (!this.opts.inline && !showModalTrigger) {\n      this.core.log('Dashboard modal trigger not found, you wonâ€™t be able to select files. Make sure `trigger` is set correctly in Dashboard options', 'error');\n    }\n\n    document.body.addEventListener('keyup', this.handleEscapeKeyPress // Drag Drop\n    );\n    this.removeDragDropListener = dragDrop(this.el, function (files) {\n      _this2.handleDrop(files);\n    });\n  };\n\n  DashboardUI.prototype.removeEvents = function removeEvents() {\n    var showModalTrigger = findDOMElement(this.opts.trigger);\n\n    if (!this.opts.inline && showModalTrigger) {\n      showModalTrigger.removeEventListener('click', this.showModal);\n    }\n\n    this.removeDragDropListener();\n    document.body.removeEventListener('keyup', this.handleEscapeKeyPress);\n  };\n\n  DashboardUI.prototype.actions = function actions() {\n    this.core.on('core:file-added', this.hideAllPanels);\n    this.core.on('dashboard:file-card', this.handleFileCard);\n    window.addEventListener('resize', this.updateDashboardElWidth);\n  };\n\n  DashboardUI.prototype.removeActions = function removeActions() {\n    window.removeEventListener('resize', this.updateDashboardElWidth);\n    this.core.off('core:file-added', this.hideAllPanels);\n    this.core.off('dashboard:file-card', this.handleFileCard);\n  };\n\n  DashboardUI.prototype.updateDashboardElWidth = function updateDashboardElWidth() {\n    var dashboardEl = this.target.querySelector('.UppyDashboard-inner');\n    this.core.log('Dashboard width: ' + dashboardEl.offsetWidth);\n    var modal = this.core.getState().modal;\n    this.core.setState({\n      modal: _extends({}, modal, {\n        containerWidth: dashboardEl.offsetWidth\n      })\n    });\n  };\n\n  DashboardUI.prototype.handleFileCard = function handleFileCard(fileId) {\n    var modal = this.core.getState().modal;\n    this.core.setState({\n      modal: _extends({}, modal, {\n        fileCardFor: fileId || false\n      })\n    });\n  };\n\n  DashboardUI.prototype.handleDrop = function handleDrop(files) {\n    var _this3 = this;\n\n    this.core.log('All right, someone dropped something...');\n    files.forEach(function (file) {\n      _this3.core.addFile({\n        source: _this3.id,\n        name: file.name,\n        type: file.type,\n        data: file\n      });\n    });\n  };\n\n  DashboardUI.prototype.cancelAll = function cancelAll() {\n    this.core.emit('core:cancel-all');\n  };\n\n  DashboardUI.prototype.pauseAll = function pauseAll() {\n    this.core.emit('core:pause-all');\n  };\n\n  DashboardUI.prototype.resumeAll = function resumeAll() {\n    this.core.emit('core:resume-all');\n  };\n\n  DashboardUI.prototype.render = function render(state) {\n    var _this4 = this;\n\n    var files = state.files;\n    var newFiles = Object.keys(files).filter(function (file) {\n      return !files[file].progress.uploadStarted;\n    });\n    var inProgressFiles = Object.keys(files).filter(function (file) {\n      return !files[file].progress.uploadComplete && files[file].progress.uploadStarted && !files[file].isPaused;\n    });\n    var inProgressFilesArray = [];\n    inProgressFiles.forEach(function (file) {\n      inProgressFilesArray.push(files[file]);\n    } // total size and uploaded size\n    );\n    var totalSize = 0;\n    var totalUploadedSize = 0;\n    inProgressFilesArray.forEach(function (file) {\n      totalSize = totalSize + (file.progress.bytesTotal || 0);\n      totalUploadedSize = totalUploadedSize + (file.progress.bytesUploaded || 0);\n    });\n    totalSize = prettyBytes(totalSize);\n    totalUploadedSize = prettyBytes(totalUploadedSize);\n    var acquirers = state.modal.targets.filter(function (target) {\n      return target.type === 'acquirer';\n    });\n    var progressindicators = state.modal.targets.filter(function (target) {\n      return target.type === 'progressindicator';\n    } // const addFile = (file) => {\n    //   this.core.emitter.emit('core:file-add', file)\n    // }\n    );\n\n    var removeFile = function removeFile(fileID) {\n      _this4.core.emitter.emit('core:file-remove', fileID);\n    };\n\n    var startUpload = function startUpload(ev) {\n      _this4.core.upload().catch(function (err) {\n        // Log error.\n        console.error(err.stack || err.message || err);\n      });\n    };\n\n    var pauseUpload = function pauseUpload(fileID) {\n      _this4.core.emitter.emit('core:upload-pause', fileID);\n    };\n\n    var cancelUpload = function cancelUpload(fileID) {\n      _this4.core.emitter.emit('core:upload-cancel', fileID);\n\n      _this4.core.emitter.emit('core:file-remove', fileID);\n    };\n\n    var showFileCard = function showFileCard(fileID) {\n      _this4.core.emitter.emit('dashboard:file-card', fileID);\n    };\n\n    var fileCardDone = function fileCardDone(meta, fileID) {\n      _this4.core.emitter.emit('core:update-meta', meta, fileID);\n\n      _this4.core.emitter.emit('dashboard:file-card');\n    };\n\n    var info = function info(text, type, duration) {\n      _this4.core.info(text, type, duration);\n    };\n\n    var resumableUploads = this.core.getState().capabilities.resumableUploads || false;\n    return Dashboard({\n      state: state,\n      modal: state.modal,\n      newFiles: newFiles,\n      files: files,\n      totalFileCount: Object.keys(files).length,\n      totalProgress: state.totalProgress,\n      acquirers: acquirers,\n      activePanel: state.modal.activePanel,\n      progressindicators: progressindicators,\n      autoProceed: this.core.opts.autoProceed,\n      hideUploadButton: this.opts.hideUploadButton,\n      id: this.id,\n      hideModal: this.hideModal,\n      showProgressDetails: this.opts.showProgressDetails,\n      inline: this.opts.inline,\n      semiTransparent: this.opts.semiTransparent,\n      showPanel: this.showPanel,\n      hideAllPanels: this.hideAllPanels,\n      log: this.core.log,\n      i18n: this.containerWidth,\n      pauseAll: this.pauseAll,\n      resumeAll: this.resumeAll,\n      addFile: this.core.addFile,\n      removeFile: removeFile,\n      info: info,\n      note: this.opts.note,\n      metaFields: state.metaFields,\n      resumableUploads: resumableUploads,\n      startUpload: startUpload,\n      pauseUpload: pauseUpload,\n      cancelUpload: cancelUpload,\n      fileCardFor: state.modal.fileCardFor,\n      showFileCard: showFileCard,\n      fileCardDone: fileCardDone,\n      updateDashboardElWidth: this.updateDashboardElWidth,\n      maxWidth: this.opts.maxWidth,\n      maxHeight: this.opts.maxHeight,\n      currentWidth: state.modal.containerWidth,\n      isWide: state.modal.containerWidth > 400\n    });\n  };\n\n  DashboardUI.prototype.install = function install() {\n    // Set default state for Modal\n    this.core.setState({\n      modal: {\n        isHidden: true,\n        showFileCard: false,\n        activePanel: false,\n        targets: []\n      }\n    });\n    var target = this.opts.target;\n    var plugin = this;\n    this.target = this.mount(target, plugin);\n\n    if (!this.opts.disableStatusBar) {\n      this.core.use(StatusBar, {\n        target: DashboardUI\n      });\n    }\n\n    if (!this.opts.disableInformer) {\n      this.core.use(Informer, {\n        target: DashboardUI\n      });\n    }\n\n    this.initEvents();\n    this.actions();\n  };\n\n  DashboardUI.prototype.uninstall = function uninstall() {\n    this.unmount();\n    this.removeActions();\n    this.removeEvents();\n  };\n\n  return DashboardUI;\n}(Plugin);","map":null,"metadata":{},"sourceType":"script"}