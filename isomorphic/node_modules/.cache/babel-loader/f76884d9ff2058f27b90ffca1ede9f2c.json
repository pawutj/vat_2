{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(initChat),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(sendMessage),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addNewUser),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateChatrooms),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(updateChatroomSaga),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, put, call, fork } from 'redux-saga/effects';\nimport actions from './actions';\nimport FirebaseHelper from '../../helpers/firebase';\nvar database = FirebaseHelper.database,\n    createBatch = FirebaseHelper.createBatch,\n    rsfFirestore = FirebaseHelper.rsfFirestore,\n    createNewRef = FirebaseHelper.createNewRef;\nvar fsProps = {};\n\nvar reverseString = function reverseString(str) {\n  return str.split('').reverse().join('');\n};\n\nvar sortChatrooms = function sortChatrooms(optionA, optionB) {\n  return optionB.lastMessageTime - optionA.lastMessageTime;\n};\n\nvar sortMessages = function sortMessages(optionA, optionB) {\n  return optionA.messageTime - optionB.messageTime;\n};\n\nvar getCurrentUser = function getCurrentUser() {\n  return {\n    userId: 'wt4TiasxgPrQ3dNwVZ55',\n    user: {\n      id: 'wt4TiasxgPrQ3dNwVZ55',\n      dob: '06-Apr-1993',\n      gender: 'Male',\n      language: 'Burmese',\n      mobileNo: '5726784596',\n      name: 'Zondra Kulic',\n      profileImageUrl: 'https://s3.amazonaws.com/redqteam.com/mateadmin/support-male-zonra.png'\n    }\n  };\n};\n\nvar initialization = function initialization(payload) {\n  fsProps.userId = payload.userId;\n  fsProps.usersCollections = database.collection('users');\n  fsProps.chatroomCollections = database.collection('chatRooms');\n  fsProps.chatroomsUserCollections = fsProps.chatroomCollections.where('userId', '==', payload.userId);\n  fsProps.messagesCollections = database.collection('messages');\n};\n\nvar readUsers =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fsProps.usersCollections.get().then(function (querySnapshot) {\n              var users = [];\n\n              try {\n                querySnapshot.forEach(function (doc) {\n                  if (doc.id !== fsProps.userId) {\n                    users.push(_objectSpread({\n                      id: doc.id\n                    }, doc.data()));\n                  }\n                });\n              } catch (e) {}\n\n              return users;\n            });\n\n          case 2:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function readUsers() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar readChatrooms =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return fsProps.chatroomsUserCollections.get().then(function (querySnapshot) {\n              var chatRooms = [];\n\n              try {\n                querySnapshot.forEach(function (doc) {\n                  chatRooms.push(doc.data());\n                });\n              } catch (e) {}\n\n              return chatRooms.sort(sortChatrooms);\n            });\n\n          case 2:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 3:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function readChatrooms() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar readMessages =\n/*#__PURE__*/\nfunction () {\n  var _ref4 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(_ref3) {\n    var id;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            id = _ref3.id;\n            _context3.next = 3;\n            return fsProps.messagesCollections.where('chatRoomId', '==', id).get().then(function (querySnapshot) {\n              var messages = [];\n\n              try {\n                querySnapshot.forEach(function (doc) {\n                  messages.push(doc.data());\n                });\n              } catch (e) {}\n\n              return messages.sort(sortMessages);\n            });\n\n          case 3:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function readMessages(_x) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar sendMessageBatch =\n/*#__PURE__*/\nfunction () {\n  var _ref5 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee4(payload) {\n    var batch, chatRoom, text, id, revId, messageTime, chatRoomModified;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            batch = createBatch();\n            chatRoom = payload.chatRoom, text = payload.text;\n            id = chatRoom.id;\n            revId = reverseString(id);\n            messageTime = new Date().getTime();\n            chatRoomModified = {\n              lastMessage: text,\n              lastMessageTime: messageTime\n            };\n            batch.update(fsProps.chatroomCollections.doc(id), chatRoomModified);\n            batch.update(fsProps.chatroomCollections.doc(revId), chatRoomModified);\n            batch.set(fsProps.messagesCollections.doc(createNewRef()), {\n              sender: chatRoom.userId,\n              text: text,\n              messageTime: messageTime,\n              chatRoomId: chatRoom.id\n            });\n            batch.commit();\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function sendMessageBatch(_x2) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nfunction initChat() {\n  var payload, users, chatRooms, messages;\n  return _regeneratorRuntime.wrap(function initChat$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          payload = getCurrentUser();\n          initialization(payload);\n          _context5.next = 4;\n          return call(readUsers);\n\n        case 4:\n          users = _context5.sent;\n\n          if (!(users.length === 0)) {\n            _context5.next = 9;\n            break;\n          }\n\n          _context5.t0 = [];\n          _context5.next = 12;\n          break;\n\n        case 9:\n          _context5.next = 11;\n          return call(readChatrooms);\n\n        case 11:\n          _context5.t0 = _context5.sent;\n\n        case 12:\n          chatRooms = _context5.t0;\n\n          if (!(chatRooms.length === 0)) {\n            _context5.next = 17;\n            break;\n          }\n\n          _context5.t1 = [];\n          _context5.next = 20;\n          break;\n\n        case 17:\n          _context5.next = 19;\n          return call(readMessages, chatRooms[0]);\n\n        case 19:\n          _context5.t1 = _context5.sent;\n\n        case 20:\n          messages = _context5.t1;\n          fsProps.selectedChatRoom = chatRooms.length > 0 && chatRooms[0];\n          _context5.next = 24;\n          return fork(updateChatrooms);\n\n        case 24:\n          _context5.next = 26;\n          return put({\n            type: actions.CHAT_INIT_SAGA,\n            user: payload.user,\n            userId: payload.userId,\n            users: users,\n            chatRooms: chatRooms,\n            messages: messages\n          });\n\n        case 26:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked);\n}\n\nfunction sendMessage(_ref6) {\n  var payload;\n  return _regeneratorRuntime.wrap(function sendMessage$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          payload = _ref6.payload;\n          fsProps.selectedChatRoom = payload.chatRoom;\n          _context6.next = 4;\n          return call(sendMessageBatch, payload);\n\n        case 4:\n          _context6.next = 6;\n          return put({\n            type: actions.NEW_MESSAGE_SUCCESFULL\n          });\n\n        case 6:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addNewUser(_ref7) {\n  var user, addNewUsersProp, UserKey, chatRoomKey, chatRoomKeyRev, newUser, newChatroom, newChatroomRev, docUser, docCollection, docCollectionRev;\n  return _regeneratorRuntime.wrap(function addNewUser$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          user = _ref7.user, addNewUsersProp = _ref7.addNewUsersProp;\n          UserKey = createNewRef();\n          chatRoomKey = createNewRef();\n          chatRoomKeyRev = reverseString(chatRoomKey);\n          newUser = _objectSpread({\n            id: UserKey\n          }, addNewUsersProp);\n          newChatroom = {\n            id: chatRoomKey,\n            reverse: false,\n            userId: user.id,\n            otherUserId: UserKey,\n            otherUserInfo: _objectSpread({\n              id: UserKey\n            }, addNewUsersProp),\n            lastMessage: '',\n            lastMessageTime: 0\n          };\n          newChatroomRev = {\n            id: chatRoomKeyRev,\n            reverse: true,\n            userId: UserKey,\n            otherUserId: user.id,\n            otherUserInfo: user,\n            lastMessage: '',\n            lastMessageTime: 0\n          };\n          docUser = fsProps.usersCollections.doc(UserKey);\n          docUser.set(newUser);\n          docCollection = fsProps.chatroomCollections.doc(chatRoomKey);\n          docCollection.set(newChatroom);\n          docCollectionRev = fsProps.chatroomCollections.doc(chatRoomKeyRev);\n          docCollectionRev.set(newChatroomRev);\n          _context7.next = 15;\n          return put({\n            type: actions.ADD_NEW_USER_SAGA,\n            newUser: newUser,\n            newChatroom: newChatroom\n          });\n\n        case 15:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction updateChatrooms() {\n  var successActionCreator;\n  return _regeneratorRuntime.wrap(function updateChatrooms$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          successActionCreator = function successActionCreator(data) {\n            var _data$docChanges$ = data.docChanges()[0],\n                type = _data$docChanges$.type,\n                newIndex = _data$docChanges$.newIndex;\n            var dataMoodified = type === 'modified';\n\n            if (!dataMoodified) {\n              return {\n                type: 'NO_CHANGE'\n              };\n            }\n\n            var chatRoom = data.docs[newIndex].data();\n            return {\n              type: actions.CHAT_UPDATE_CHATROOM_SAGA,\n              payload: {\n                chatRoom: chatRoom\n              }\n            };\n          };\n\n          _context8.next = 3;\n          return call(rsfFirestore.syncCollection, fsProps.chatroomsUserCollections, {\n            successActionCreator: successActionCreator\n          });\n\n        case 3:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction updateChatroomSaga(_ref8) {\n  var payload, chatRoom, selected, messages;\n  return _regeneratorRuntime.wrap(function updateChatroomSaga$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          payload = _ref8.payload;\n          chatRoom = payload.chatRoom;\n          selected = payload.selected;\n\n          if (!(selected || chatRoom.id === fsProps.selectedChatRoom.id)) {\n            _context9.next = 9;\n            break;\n          }\n\n          fsProps.selectedChatRoom = chatRoom;\n          _context9.next = 7;\n          return call(readMessages, chatRoom);\n\n        case 7:\n          messages = _context9.sent;\n          selected = true;\n\n        case 9:\n          _context9.next = 11;\n          return put({\n            type: actions.CHAT_UPDATE_CHATROOM,\n            chatRoom: chatRoom,\n            messages: messages,\n            selected: selected\n          });\n\n        case 11:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked5);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return all([takeEvery(actions.CHAT_INIT, initChat), takeEvery(actions.CHAT_UPDATE_CHATROOM_SAGA, updateChatroomSaga), takeEvery(actions.CHAT_SEND_MESSAGE, sendMessage), takeEvery(actions.ADD_NEW_USER, addNewUser)]);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked6);\n}","map":{"version":3,"sources":["C:\\Users\\USER\\Desktop\\vat\\isomorphic\\src\\redux\\chat\\sagas.js"],"names":["initChat","sendMessage","addNewUser","updateChatrooms","updateChatroomSaga","rootSaga","all","takeEvery","put","call","fork","actions","FirebaseHelper","database","createBatch","rsfFirestore","createNewRef","fsProps","reverseString","str","split","reverse","join","sortChatrooms","optionA","optionB","lastMessageTime","sortMessages","messageTime","getCurrentUser","userId","user","id","dob","gender","language","mobileNo","name","profileImageUrl","initialization","payload","usersCollections","collection","chatroomCollections","chatroomsUserCollections","where","messagesCollections","readUsers","get","then","querySnapshot","users","forEach","doc","push","data","e","readChatrooms","chatRooms","sort","readMessages","messages","sendMessageBatch","batch","chatRoom","text","revId","Date","getTime","chatRoomModified","lastMessage","update","set","sender","chatRoomId","commit","length","selectedChatRoom","type","CHAT_INIT_SAGA","NEW_MESSAGE_SUCCESFULL","addNewUsersProp","UserKey","chatRoomKey","chatRoomKeyRev","newUser","newChatroom","otherUserId","otherUserInfo","newChatroomRev","docUser","docCollection","docCollectionRev","ADD_NEW_USER_SAGA","successActionCreator","docChanges","newIndex","dataMoodified","docs","CHAT_UPDATE_CHATROOM_SAGA","syncCollection","selected","CHAT_UPDATE_CHATROOM","CHAT_INIT","CHAT_SEND_MESSAGE","ADD_NEW_USER"],"mappings":"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","sourcesContent":["import { all, takeEvery, put, call, fork } from 'redux-saga/effects';\nimport actions from './actions';\nimport FirebaseHelper from '../../helpers/firebase';\nconst { database, createBatch, rsfFirestore, createNewRef } = FirebaseHelper;\nconst fsProps = {};\nconst reverseString = str =>\n  str\n    .split('')\n    .reverse()\n    .join('');\n\nconst sortChatrooms = (optionA, optionB) =>\n  optionB.lastMessageTime - optionA.lastMessageTime;\nconst sortMessages = (optionA, optionB) =>\n  optionA.messageTime - optionB.messageTime;\nconst getCurrentUser = () => {\n  return {\n    userId: 'wt4TiasxgPrQ3dNwVZ55',\n    user: {\n      id: 'wt4TiasxgPrQ3dNwVZ55',\n      dob: '06-Apr-1993',\n      gender: 'Male',\n      language: 'Burmese',\n      mobileNo: '5726784596',\n      name: 'Zondra Kulic',\n      profileImageUrl:\n        'https://s3.amazonaws.com/redqteam.com/mateadmin/support-male-zonra.png',\n    },\n  };\n};\nconst initialization = payload => {\n  fsProps.userId = payload.userId;\n  fsProps.usersCollections = database.collection('users');\n  fsProps.chatroomCollections = database.collection('chatRooms');\n  fsProps.chatroomsUserCollections = fsProps.chatroomCollections.where(\n    'userId',\n    '==',\n    payload.userId\n  );\n  fsProps.messagesCollections = database.collection('messages');\n};\n\nconst readUsers = async () =>\n  await fsProps.usersCollections.get().then(querySnapshot => {\n    const users = [];\n    try {\n      querySnapshot.forEach(doc => {\n        if (doc.id !== fsProps.userId) {\n          users.push({ id: doc.id, ...doc.data() });\n        }\n      });\n    } catch (e) {}\n    return users;\n  });\nconst readChatrooms = async () =>\n  await fsProps.chatroomsUserCollections.get().then(querySnapshot => {\n    const chatRooms = [];\n    try {\n      querySnapshot.forEach(doc => {\n        chatRooms.push(doc.data());\n      });\n    } catch (e) {}\n    return chatRooms.sort(sortChatrooms);\n  });\nconst readMessages = async ({ id }) =>\n  await fsProps.messagesCollections\n    .where('chatRoomId', '==', id)\n    .get()\n    .then(querySnapshot => {\n      const messages = [];\n      try {\n        querySnapshot.forEach(doc => {\n          messages.push(doc.data());\n        });\n      } catch (e) {}\n      return messages.sort(sortMessages);\n    });\nconst sendMessageBatch = async payload => {\n  const batch = createBatch();\n  const { chatRoom, text } = payload;\n  const id = chatRoom.id;\n  const revId = reverseString(id);\n  const messageTime = new Date().getTime();\n  const chatRoomModified = {\n    lastMessage: text,\n    lastMessageTime: messageTime,\n  };\n  batch.update(fsProps.chatroomCollections.doc(id), chatRoomModified);\n  batch.update(fsProps.chatroomCollections.doc(revId), chatRoomModified);\n  batch.set(fsProps.messagesCollections.doc(createNewRef()), {\n    sender: chatRoom.userId,\n    text,\n    messageTime,\n    chatRoomId: chatRoom.id,\n  });\n  batch.commit();\n};\n\nfunction* initChat() {\n  const payload = getCurrentUser();\n  initialization(payload);\n  const users = yield call(readUsers);\n  const chatRooms = users.length === 0 ? [] : yield call(readChatrooms);\n  const messages =\n    chatRooms.length === 0 ? [] : yield call(readMessages, chatRooms[0]);\n  fsProps.selectedChatRoom = chatRooms.length > 0 && chatRooms[0];\n  yield fork(updateChatrooms);\n  yield put({\n    type: actions.CHAT_INIT_SAGA,\n    user: payload.user,\n    userId: payload.userId,\n    users,\n    chatRooms,\n    messages,\n  });\n}\n\nfunction* sendMessage({ payload }) {\n  fsProps.selectedChatRoom = payload.chatRoom;\n  yield call(sendMessageBatch, payload);\n  yield put({\n    type: actions.NEW_MESSAGE_SUCCESFULL,\n  });\n}\nfunction* addNewUser({ user, addNewUsersProp }) {\n  const UserKey = createNewRef();\n  const chatRoomKey = createNewRef();\n  const chatRoomKeyRev = reverseString(chatRoomKey);\n\n  const newUser = { id: UserKey, ...addNewUsersProp };\n  const newChatroom = {\n    id: chatRoomKey,\n    reverse: false,\n    userId: user.id,\n    otherUserId: UserKey,\n    otherUserInfo: { id: UserKey, ...addNewUsersProp },\n    lastMessage: '',\n    lastMessageTime: 0,\n  };\n  const newChatroomRev = {\n    id: chatRoomKeyRev,\n    reverse: true,\n    userId: UserKey,\n    otherUserId: user.id,\n    otherUserInfo: user,\n    lastMessage: '',\n    lastMessageTime: 0,\n  };\n\n  const docUser = fsProps.usersCollections.doc(UserKey);\n  docUser.set(newUser);\n  const docCollection = fsProps.chatroomCollections.doc(chatRoomKey);\n  docCollection.set(newChatroom);\n  const docCollectionRev = fsProps.chatroomCollections.doc(chatRoomKeyRev);\n  docCollectionRev.set(newChatroomRev);\n  yield put({\n    type: actions.ADD_NEW_USER_SAGA,\n    newUser,\n    newChatroom,\n  });\n}\nfunction* updateChatrooms() {\n  const successActionCreator = data => {\n    const { type, newIndex } = data.docChanges()[0];\n    const dataMoodified = type === 'modified';\n    if (!dataMoodified) {\n      return { type: 'NO_CHANGE' };\n    }\n    const chatRoom = data.docs[newIndex].data();\n\n    return {\n      type: actions.CHAT_UPDATE_CHATROOM_SAGA,\n      payload: { chatRoom },\n    };\n  };\n  yield call(rsfFirestore.syncCollection, fsProps.chatroomsUserCollections, {\n    successActionCreator,\n  });\n}\nfunction* updateChatroomSaga({ payload }) {\n  const { chatRoom } = payload;\n  let { selected } = payload;\n  let messages;\n  if (selected || chatRoom.id === fsProps.selectedChatRoom.id) {\n    fsProps.selectedChatRoom = chatRoom;\n    messages = yield call(readMessages, chatRoom);\n    selected = true;\n  }\n  yield put({\n    type: actions.CHAT_UPDATE_CHATROOM,\n    chatRoom,\n    messages,\n    selected,\n  });\n}\nexport default function* rootSaga() {\n  yield all([\n    takeEvery(actions.CHAT_INIT, initChat),\n    takeEvery(actions.CHAT_UPDATE_CHATROOM_SAGA, updateChatroomSaga),\n    takeEvery(actions.CHAT_SEND_MESSAGE, sendMessage),\n    takeEvery(actions.ADD_NEW_USER, addNewUser),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}