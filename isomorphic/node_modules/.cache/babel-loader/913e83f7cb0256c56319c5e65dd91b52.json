{"ast":null,"code":"'use strict';\n\nvar _appendChild = require('yo-yoify/lib/appendChild');\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Plugin = require('./Plugin');\n/**\n * Informer\n * Shows rad message bubbles\n * used like this: `core.emit('informer', 'hello world', 'info', 5000)`\n * or for errors: `core.emit('informer', 'Error uploading img.jpg', 'error', 5000)`\n *\n */\n\n\nmodule.exports = function (_Plugin) {\n  _inherits(Informer, _Plugin);\n\n  function Informer(core, opts) {\n    _classCallCheck(this, Informer);\n\n    var _this = _possibleConstructorReturn(this, _Plugin.call(this, core, opts));\n\n    _this.type = 'progressindicator';\n    _this.id = 'Informer';\n    _this.title = 'Informer'; // this.timeoutID = undefined\n    // set default options\n\n    var defaultOptions = {\n      typeColors: {\n        info: {\n          text: '#fff',\n          bg: '#000'\n        },\n        warning: {\n          text: '#fff',\n          bg: '#F6A623'\n        },\n        error: {\n          text: '#fff',\n          bg: '#e74c3c'\n        },\n        success: {\n          text: '#fff',\n          bg: '#7ac824'\n        } // merge default options with the ones set by user\n\n      }\n    };\n    _this.opts = _extends({}, defaultOptions, opts);\n    _this.render = _this.render.bind(_this);\n    return _this;\n  }\n\n  Informer.prototype.render = function render(state) {\n    var _p, _uppy;\n\n    var isHidden = state.info.isHidden;\n    var msg = state.info.msg;\n    var type = state.info.type || 'info';\n    var style = 'background-color: ' + this.opts.typeColors[type].bg + '; color: ' + this.opts.typeColors[type].text + ';'; // @TODO add aria-live for screen-readers\n\n    return _uppy = document.createElement('div'), _uppy.setAttribute('style', '' + String(style) + ''), _uppy.setAttribute('aria-hidden', '' + String(isHidden) + ''), _uppy.setAttribute('class', 'Uppy UppyTheme--default UppyInformer'), _appendChild(_uppy, [' ', (_p = document.createElement('p'), _appendChild(_p, [msg]), _p), ' ']), _uppy;\n  };\n\n  Informer.prototype.install = function install() {\n    var target = this.opts.target;\n    var plugin = this;\n    this.target = this.mount(target, plugin);\n  };\n\n  return Informer;\n}(Plugin);","map":null,"metadata":{},"sourceType":"script"}