{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadFromFirestore),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(storeIntoFirestore),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(resetFireStoreDocuments),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(rootSaga);\n\nimport { all, takeEvery, put, call } from 'redux-saga/effects';\nimport actions from './actions';\nimport FirebaseHelper from '../../helpers/firebase';\nimport omit from 'lodash/omit';\nimport fakeData from './fakeData';\nvar database = FirebaseHelper.database,\n    createBatch = FirebaseHelper.createBatch,\n    rsfFirestore = FirebaseHelper.rsfFirestore,\n    createNewRef = FirebaseHelper.createNewRef,\n    processFireStoreCollection = FirebaseHelper.processFireStoreCollection;\nvar fakeDataList = new fakeData(5).getAll();\n/**\n * DOC: https://redux-saga-firebase.js.org/reference/dev/firestore\n */\n\nvar COLLECTION_NAME = 'investors'; // change your collection\n\nvar ORDER_BY = 'id';\nvar ORDER = 'desc';\n\nfunction loadFromFirestore() {\n  var collections, snapshot, data;\n  return _regeneratorRuntime.wrap(function loadFromFirestore$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          collections = database.collection(COLLECTION_NAME).where('deleted_at', '==', null).orderBy(ORDER_BY, ORDER);\n          _context.next = 4;\n          return call(rsfFirestore.getCollection, collections);\n\n        case 4:\n          snapshot = _context.sent;\n          data = processFireStoreCollection(snapshot);\n          _context.next = 8;\n          return put(actions.loadFromFireStoreSuccess(data));\n\n        case 8:\n          _context.next = 15;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n          _context.next = 15;\n          return put(actions.loadFromFireStoreError(_context.t0));\n\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction storeIntoFirestore(_ref) {\n  var payload, data, actionName;\n  return _regeneratorRuntime.wrap(function storeIntoFirestore$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          payload = _ref.payload;\n          data = payload.data, actionName = payload.actionName;\n          _context2.prev = 2;\n          _context2.t0 = actionName;\n          _context2.next = _context2.t0 === 'delete' ? 6 : _context2.t0 === 'update' ? 9 : 12;\n          break;\n\n        case 6:\n          _context2.next = 8;\n          return call(rsfFirestore.setDocument, \"\".concat(COLLECTION_NAME, \"/\").concat(data.key), {\n            deleted_at: new Date().getTime()\n          });\n\n        case 8:\n          return _context2.abrupt(\"break\", 15);\n\n        case 9:\n          _context2.next = 11;\n          return call(rsfFirestore.setDocument, \"\".concat(COLLECTION_NAME, \"/\").concat(data.key), _objectSpread({}, omit(data, ['key'])));\n\n        case 11:\n          return _context2.abrupt(\"break\", 15);\n\n        case 12:\n          _context2.next = 14;\n          return call(rsfFirestore.addDocument, COLLECTION_NAME, data);\n\n        case 14:\n          return _context2.abrupt(\"break\", 15);\n\n        case 15:\n          _context2.next = 17;\n          return put({\n            type: actions.LOAD_FROM_FIRESTORE\n          });\n\n        case 17:\n          _context2.next = 24;\n          break;\n\n        case 19:\n          _context2.prev = 19;\n          _context2.t1 = _context2[\"catch\"](2);\n          console.log(_context2.t1);\n          _context2.next = 24;\n          return put(actions.saveIntoFireStoreError(_context2.t1));\n\n        case 24:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[2, 19]]);\n}\n\nvar readAllFirestoreDocuments =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return database.collection(COLLECTION_NAME).get().then(function (querySnapshot) {\n              var documents = [];\n\n              try {\n                querySnapshot.forEach(function (doc) {\n                  documents.push(doc.id);\n                });\n              } catch (e) {}\n\n              return documents;\n            });\n\n          case 2:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 3:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function readAllFirestoreDocuments() {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nfunction resetFireStoreDocuments() {\n  var docsKey, batch;\n  return _regeneratorRuntime.wrap(function resetFireStoreDocuments$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.prev = 0;\n          _context4.next = 3;\n          return call(readAllFirestoreDocuments);\n\n        case 3:\n          docsKey = _context4.sent;\n          batch = createBatch();\n          docsKey.forEach(function (key) {\n            batch.delete(database.collection(COLLECTION_NAME).doc(key));\n            batch.commit();\n            batch = createBatch();\n          });\n          batch = createBatch();\n          fakeDataList.forEach(function (article) {\n            var doc = database.collection(COLLECTION_NAME).doc(createNewRef());\n            batch.set(doc, article);\n          });\n          batch.commit();\n          _context4.next = 11;\n          return put({\n            type: actions.LOAD_FROM_FIRESTORE\n          });\n\n        case 11:\n          _context4.next = 16;\n          break;\n\n        case 13:\n          _context4.prev = 13;\n          _context4.t0 = _context4[\"catch\"](0);\n          console.log(_context4.t0);\n\n        case 16:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked3, null, [[0, 13]]);\n}\n\nexport default function rootSaga() {\n  return _regeneratorRuntime.wrap(function rootSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([takeEvery(actions.LOAD_FROM_FIRESTORE, loadFromFirestore), takeEvery(actions.SAVE_INTO_FIRESTORE, storeIntoFirestore), takeEvery(actions.RESET_FIRESTORE_DOCUMENTS, resetFireStoreDocuments)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:\\Users\\USER\\Desktop\\vat\\isomorphic\\src\\redux\\investors\\sagas.js"],"names":["loadFromFirestore","storeIntoFirestore","resetFireStoreDocuments","rootSaga","all","takeEvery","put","call","actions","FirebaseHelper","omit","fakeData","database","createBatch","rsfFirestore","createNewRef","processFireStoreCollection","fakeDataList","getAll","COLLECTION_NAME","ORDER_BY","ORDER","collections","collection","where","orderBy","getCollection","snapshot","data","loadFromFireStoreSuccess","console","log","loadFromFireStoreError","payload","actionName","setDocument","key","deleted_at","Date","getTime","addDocument","type","LOAD_FROM_FIRESTORE","saveIntoFireStoreError","readAllFirestoreDocuments","get","then","querySnapshot","documents","forEach","doc","push","id","e","docsKey","batch","delete","commit","article","set","SAVE_INTO_FIRESTORE","RESET_FIRESTORE_DOCUMENTS"],"mappings":"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","sourcesContent":["import { all, takeEvery, put, call } from 'redux-saga/effects';\nimport actions from './actions';\nimport FirebaseHelper from '../../helpers/firebase';\nimport omit from 'lodash/omit';\nimport fakeData from './fakeData';\n\nconst {\n  database,\n  createBatch,\n  rsfFirestore,\n  createNewRef,\n  processFireStoreCollection,\n} = FirebaseHelper;\n\nconst fakeDataList = new fakeData(5).getAll();\n\n/**\n * DOC: https://redux-saga-firebase.js.org/reference/dev/firestore\n */\n\nconst COLLECTION_NAME = 'investors'; // change your collection\nconst ORDER_BY = 'id';\nconst ORDER = 'desc';\n\nfunction* loadFromFirestore() {\n  try {\n    const collections = database\n      .collection(COLLECTION_NAME)\n      .where('deleted_at', '==', null)\n      .orderBy(ORDER_BY, ORDER);\n    const snapshot = yield call(rsfFirestore.getCollection, collections);\n    let data = processFireStoreCollection(snapshot);\n    yield put(actions.loadFromFireStoreSuccess(data));\n  } catch (error) {\n    console.log(error);\n    yield put(actions.loadFromFireStoreError(error));\n  }\n}\n\nfunction* storeIntoFirestore({ payload }) {\n  const { data, actionName } = payload;\n  try {\n    switch (actionName) {\n      case 'delete':\n        yield call(rsfFirestore.setDocument, `${COLLECTION_NAME}/${data.key}`, {\n          deleted_at: new Date().getTime(),\n        });\n        break;\n      case 'update':\n        yield call(rsfFirestore.setDocument, `${COLLECTION_NAME}/${data.key}`, {\n          ...omit(data, ['key']),\n        });\n        break;\n      default:\n        yield call(rsfFirestore.addDocument, COLLECTION_NAME, data);\n        break;\n    }\n    yield put({ type: actions.LOAD_FROM_FIRESTORE });\n  } catch (error) {\n    console.log(error);\n    yield put(actions.saveIntoFireStoreError(error));\n  }\n}\n\nconst readAllFirestoreDocuments = async () =>\n  await database\n    .collection(COLLECTION_NAME)\n    .get()\n    .then(querySnapshot => {\n      const documents = [];\n      try {\n        querySnapshot.forEach(doc => {\n          documents.push(doc.id);\n        });\n      } catch (e) {}\n      return documents;\n    });\n\nfunction* resetFireStoreDocuments() {\n  try {\n    const docsKey = yield call(readAllFirestoreDocuments);\n\n    let batch = createBatch();\n    docsKey.forEach(key => {\n      batch.delete(database.collection(COLLECTION_NAME).doc(key));\n      batch.commit();\n      batch = createBatch();\n    });\n\n    batch = createBatch();\n    fakeDataList.forEach(article => {\n      const doc = database.collection(COLLECTION_NAME).doc(createNewRef());\n      batch.set(doc, article);\n    });\n    batch.commit();\n\n    yield put({ type: actions.LOAD_FROM_FIRESTORE });\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport default function* rootSaga() {\n  yield all([\n    takeEvery(actions.LOAD_FROM_FIRESTORE, loadFromFirestore),\n    takeEvery(actions.SAVE_INTO_FIRESTORE, storeIntoFirestore),\n    takeEvery(actions.RESET_FIRESTORE_DOCUMENTS, resetFireStoreDocuments),\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}