{"ast":null,"code":"module.exports = buildSearchMethod;\n\nvar errors = require('./errors.js');\n/**\n * Creates a search method to be used in clients\n * @param {string} queryParam the name of the attribute used for the query\n * @param {string} url the url\n * @return {function} the search method\n */\n\n\nfunction buildSearchMethod(queryParam, url) {\n  /**\n   * The search method. Prepares the data and send the query to Algolia.\n   * @param {string} query the string used for query search\n   * @param {object} args additional parameters to send with the search\n   * @param {function} [callback] the callback to be called with the client gets the answer\n   * @return {undefined|Promise} If the callback is not provided then this methods returns a Promise\n   */\n  return function search(query, args, callback) {\n    // warn V2 users on how to search\n    if (typeof query === 'function' && typeof args === 'object' || typeof callback === 'object') {\n      // .search(query, params, cb)\n      // .search(cb, params)\n      throw new errors.AlgoliaSearchError('index.search usage is index.search(query, params, cb)');\n    } // Normalizing the function signature\n\n\n    if (arguments.length === 0 || typeof query === 'function') {\n      // Usage : .search(), .search(cb)\n      callback = query;\n      query = '';\n    } else if (arguments.length === 1 || typeof args === 'function') {\n      // Usage : .search(query/args), .search(query, cb)\n      callback = args;\n      args = undefined;\n    } // At this point we have 3 arguments with values\n    // Usage : .search(args) // careful: typeof null === 'object'\n\n\n    if (typeof query === 'object' && query !== null) {\n      args = query;\n      query = undefined;\n    } else if (query === undefined || query === null) {\n      // .search(undefined/null)\n      query = '';\n    }\n\n    var params = '';\n\n    if (query !== undefined) {\n      params += queryParam + '=' + encodeURIComponent(query);\n    }\n\n    var additionalUA;\n\n    if (args !== undefined) {\n      if (args.additionalUA) {\n        additionalUA = args.additionalUA;\n        delete args.additionalUA;\n      } // `_getSearchParams` will augment params, do not be fooled by the = versus += from previous if\n\n\n      params = this.as._getSearchParams(args, params);\n    }\n\n    return this._search(params, url, callback, additionalUA);\n  };\n}","map":null,"metadata":{},"sourceType":"script"}