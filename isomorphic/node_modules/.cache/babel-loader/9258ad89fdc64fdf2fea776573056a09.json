{"ast":null,"code":"/* global MutationObserver */\nvar document = require('global/document');\n\nvar window = require('global/window');\n\nvar watch = Object.create(null);\nvar KEY_ID = 'onloadid' + (new Date() % 9e6).toString(36);\nvar KEY_ATTR = 'data-' + KEY_ID;\nvar INDEX = 0;\n\nif (window && window.MutationObserver) {\n  var observer = new MutationObserver(function (mutations) {\n    if (Object.keys(watch).length < 1) return;\n\n    for (var i = 0; i < mutations.length; i++) {\n      if (mutations[i].attributeName === KEY_ATTR) {\n        eachAttr(mutations[i], turnon, turnoff);\n        continue;\n      }\n\n      eachMutation(mutations[i].removedNodes, turnoff);\n      eachMutation(mutations[i].addedNodes, turnon);\n    }\n  });\n  observer.observe(document.body, {\n    childList: true,\n    subtree: true,\n    attributes: true,\n    attributeOldValue: true,\n    attributeFilter: [KEY_ATTR]\n  });\n}\n\nmodule.exports = function onload(el, on, off, caller) {\n  on = on || function () {};\n\n  off = off || function () {};\n\n  el.setAttribute(KEY_ATTR, 'o' + INDEX);\n  watch['o' + INDEX] = [on, off, 0, caller || onload.caller];\n  INDEX += 1;\n  return el;\n};\n\nfunction turnon(index, el) {\n  if (watch[index][0] && watch[index][2] === 0) {\n    watch[index][0](el);\n    watch[index][2] = 1;\n  }\n}\n\nfunction turnoff(index, el) {\n  if (watch[index][1] && watch[index][2] === 1) {\n    watch[index][1](el);\n    watch[index][2] = 0;\n  }\n}\n\nfunction eachAttr(mutation, on, off) {\n  var newValue = mutation.target.getAttribute(KEY_ATTR);\n\n  if (sameOrigin(mutation.oldValue, newValue)) {\n    watch[newValue] = watch[mutation.oldValue];\n    return;\n  }\n\n  if (watch[mutation.oldValue]) {\n    off(mutation.oldValue, mutation.target);\n  }\n\n  if (watch[newValue]) {\n    on(newValue, mutation.target);\n  }\n}\n\nfunction sameOrigin(oldValue, newValue) {\n  if (!oldValue || !newValue) return false;\n  return watch[oldValue][3] === watch[newValue][3];\n}\n\nfunction eachMutation(nodes, fn) {\n  var keys = Object.keys(watch);\n\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i] && nodes[i].getAttribute && nodes[i].getAttribute(KEY_ATTR)) {\n      var onloadid = nodes[i].getAttribute(KEY_ATTR);\n      keys.forEach(function (k) {\n        if (onloadid === k) {\n          fn(k, nodes[i]);\n        }\n      });\n    }\n\n    if (nodes[i].childNodes.length > 0) {\n      eachMutation(nodes[i].childNodes, fn);\n    }\n  }\n}","map":null,"metadata":{},"sourceType":"script"}