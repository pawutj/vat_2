{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar yo = require('yo-yo');\n\nvar nanoraf = require('nanoraf');\n\nvar _require = require('../core/Utils'),\n    findDOMElement = _require.findDOMElement;\n\nvar getFormData = require('get-form-data'\n/**\n * Boilerplate that all Plugins share - and should not be used\n * directly. It also shows which methods final plugins should implement/override,\n * this deciding on structure.\n *\n * @param {object} main Uppy core object\n * @param {object} object with plugin options\n * @return {array | string} files or success/fail message\n */\n);\n\nmodule.exports = function () {\n  function Plugin(core, opts) {\n    _classCallCheck(this, Plugin);\n\n    this.core = core;\n    this.opts = opts || {};\n    this.type = 'none'; // clear everything inside the target selector\n\n    this.opts.replaceTargetContent === this.opts.replaceTargetContent || true;\n    this.update = this.update.bind(this);\n    this.mount = this.mount.bind(this);\n    this.install = this.install.bind(this);\n    this.uninstall = this.uninstall.bind(this);\n  }\n\n  Plugin.prototype.update = function update(state) {\n    if (typeof this.el === 'undefined') {\n      return;\n    }\n\n    if (this.updateUI) {\n      this.updateUI(state);\n    }\n  };\n  /**\n   * Check if supplied `target` is a DOM element or an `object`.\n   * If it’s an object — target is a plugin, and we search `plugins`\n   * for a plugin with same name and return its target.\n   *\n   * @param {String|Object} target\n   *\n   */\n\n\n  Plugin.prototype.mount = function mount(target, plugin) {\n    var _this = this;\n\n    var callerPluginName = plugin.id;\n    var targetElement = findDOMElement(target // Set up nanoraf.\n    );\n    this.updateUI = nanoraf(function (state) {\n      _this.el = yo.update(_this.el, _this.render(state));\n    });\n\n    if (targetElement) {\n      this.core.log('Installing ' + callerPluginName + ' to a DOM element' // attempt to extract meta from form element\n      );\n\n      if (this.opts.getMetaFromForm && targetElement.nodeName === 'FORM') {\n        var formMeta = getFormData(targetElement);\n        this.core.setMeta(formMeta);\n      } // clear everything inside the target container\n\n\n      if (this.opts.replaceTargetContent) {\n        targetElement.innerHTML = '';\n      }\n\n      this.el = plugin.render(this.core.state);\n      targetElement.appendChild(this.el);\n      return targetElement;\n    } else {\n      // TODO: is instantiating the plugin really the way to roll\n      // just to get the plugin name?\n      var Target = target;\n      var targetPluginName = new Target().id;\n      this.core.log('Installing ' + callerPluginName + ' to ' + targetPluginName);\n      var targetPlugin = this.core.getPlugin(targetPluginName);\n      var selectorTarget = targetPlugin.addTarget(plugin);\n      return selectorTarget;\n    }\n  };\n\n  Plugin.prototype.unmount = function unmount() {\n    if (this.el && this.el.parentNode) {\n      this.el.parentNode.removeChild(this.el);\n    }\n  };\n\n  Plugin.prototype.install = function install() {\n    return;\n  };\n\n  Plugin.prototype.uninstall = function uninstall() {\n    this.unmount();\n  };\n\n  return Plugin;\n}();","map":null,"metadata":{},"sourceType":"script"}