{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.getDocumentRef = exports.getCollectionRef = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _reduxSaga = require(\"redux-saga\");\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _assert = _interopRequireDefault(require(\"./assert\"));\n\nvar _utils = require(\"./utils\");\n\nvar _marked =\n/*#__PURE__*/\n_regenerator.default.mark(addDocument),\n    _marked2 =\n/*#__PURE__*/\n_regenerator.default.mark(deleteDocument),\n    _marked3 =\n/*#__PURE__*/\n_regenerator.default.mark(getCollection),\n    _marked4 =\n/*#__PURE__*/\n_regenerator.default.mark(getDocument),\n    _marked5 =\n/*#__PURE__*/\n_regenerator.default.mark(setDocument),\n    _marked6 =\n/*#__PURE__*/\n_regenerator.default.mark(updateDocument),\n    _marked7 =\n/*#__PURE__*/\n_regenerator.default.mark(syncCollection),\n    _marked8 =\n/*#__PURE__*/\n_regenerator.default.mark(syncDocument);\n\nvar getCollectionRef = function getCollectionRef(rsf, pathOrRef) {\n  (0, _assert.default)(!!rsf.app.firestore, \"Firestore isn't installed. \" + \"Did you forget to `import '@firebase/firestore'`? \" + 'See https://redux-saga-firebase.js.org/ for more information.');\n  return typeof pathOrRef === 'string' ? rsf.app.firestore().collection(pathOrRef) : pathOrRef;\n};\n\nexports.getCollectionRef = getCollectionRef;\n\nvar getDocumentRef = function getDocumentRef(rsf, pathOrRef) {\n  (0, _assert.default)(!!rsf.app.firestore, \"Firestore isn't installed. \" + \"Did you forget to `import '@firebase/firestore'`? \" + 'See https://redux-saga-firebase.js.org/ for more information.');\n  return typeof pathOrRef === 'string' ? rsf.app.firestore().doc(pathOrRef) : pathOrRef;\n};\n\nexports.getDocumentRef = getDocumentRef;\n\nfunction addDocument(collectionRef, data) {\n  var collection;\n  return _regenerator.default.wrap(function addDocument$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          collection = getCollectionRef(this, collectionRef);\n          _context.next = 3;\n          return (0, _effects.call)([collection, collection.add], data);\n\n        case 3:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\n\nfunction channel(pathOrRef) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'collection';\n  var buffer = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _reduxSaga.buffers.none();\n  var ref = type === 'collection' ? getCollectionRef(this, pathOrRef) : getDocumentRef(this, pathOrRef);\n  var channel = (0, _reduxSaga.eventChannel)(function (emit) {\n    var unsubscribe = ref.onSnapshot(emit); // Returns unsubscribe function\n\n    return unsubscribe;\n  }, buffer);\n  return channel;\n}\n\nfunction deleteDocument(documentRef) {\n  var doc;\n  return _regenerator.default.wrap(function deleteDocument$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          doc = getDocumentRef(this, documentRef);\n          _context2.next = 3;\n          return (0, _effects.call)([doc, doc.delete]);\n\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nfunction getCollection(collectionRef) {\n  var collection;\n  return _regenerator.default.wrap(function getCollection$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          collection = getCollectionRef(this, collectionRef);\n          _context3.next = 3;\n          return (0, _effects.call)([collection, collection.get]);\n\n        case 3:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}\n\nfunction getDocument(documentRef) {\n  var doc;\n  return _regenerator.default.wrap(function getDocument$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          doc = getDocumentRef(this, documentRef);\n          _context4.next = 3;\n          return (0, _effects.call)([doc, doc.get]);\n\n        case 3:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this);\n}\n\nfunction setDocument(documentRef, data, options) {\n  var doc;\n  return _regenerator.default.wrap(function setDocument$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          doc = getDocumentRef(this, documentRef);\n          _context5.next = 3;\n          return (0, _effects.call)([doc, doc.set], data, options);\n\n        case 3:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 4:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, this);\n}\n\nfunction updateDocument(documentRef) {\n  var doc,\n      _len,\n      args,\n      _key,\n      _args6 = arguments;\n\n  return _regenerator.default.wrap(function updateDocument$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          doc = getDocumentRef(this, documentRef); // @ts-ignore\n\n          for (_len = _args6.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n            args[_key - 1] = _args6[_key];\n          }\n\n          _context6.next = 4;\n          return _effects.call.apply(void 0, [[doc, doc.update]].concat(args));\n\n        case 4:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 5:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6, this);\n}\n\nfunction syncCollection(pathOrRef, options) {\n  var channel;\n  return _regenerator.default.wrap(function syncCollection$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return (0, _effects.call)(this.firestore.channel, pathOrRef, 'collection');\n\n        case 2:\n          channel = _context7.sent;\n          _context7.next = 5;\n          return (0, _effects.fork)(_utils.syncChannel, channel, options);\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, this);\n}\n\nfunction syncDocument(pathOrRef, options) {\n  var channel;\n  return _regenerator.default.wrap(function syncDocument$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return (0, _effects.call)(this.firestore.channel, pathOrRef, 'document');\n\n        case 2:\n          channel = _context8.sent;\n          _context8.next = 5;\n          return (0, _effects.fork)(_utils.syncChannel, channel, options);\n\n        case 5:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8, this);\n}\n\nvar _default = {\n  addDocument: addDocument,\n  channel: channel,\n  deleteDocument: deleteDocument,\n  getCollection: getCollection,\n  getDocument: getDocument,\n  setDocument: setDocument,\n  syncCollection: syncCollection,\n  syncDocument: syncDocument,\n  updateDocument: updateDocument\n};\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}