{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Plugin = require('../Plugin');\n\nvar StatusBar = require('./StatusBar');\n\nvar _require = require('../../core/Utils'),\n    getSpeed = _require.getSpeed;\n\nvar _require2 = require('../../core/Utils'),\n    getBytesRemaining = _require2.getBytesRemaining;\n\nvar _require3 = require('../../core/Utils'),\n    prettyETA = _require3.prettyETA;\n\nvar prettyBytes = require('prettier-bytes'\n/**\n * A status bar.\n */\n);\n\nmodule.exports = function (_Plugin) {\n  _inherits(StatusBarUI, _Plugin);\n\n  function StatusBarUI(core, opts) {\n    _classCallCheck(this, StatusBarUI);\n\n    var _this = _possibleConstructorReturn(this, _Plugin.call(this, core, opts));\n\n    _this.id = 'StatusBarUI';\n    _this.title = 'StatusBar UI';\n    _this.type = 'progressindicator'; // set default options\n\n    var defaultOptions = {\n      target: 'body',\n      showProgressDetails: false // merge default options with the ones set by user\n\n    };\n    _this.opts = _extends({}, defaultOptions, opts);\n    _this.pauseAll = _this.pauseAll.bind(_this);\n    _this.resumeAll = _this.resumeAll.bind(_this);\n    _this.cancelAll = _this.cancelAll.bind(_this);\n    _this.render = _this.render.bind(_this);\n    _this.install = _this.install.bind(_this);\n    return _this;\n  }\n\n  StatusBarUI.prototype.cancelAll = function cancelAll() {\n    this.core.emit('core:cancel-all');\n  };\n\n  StatusBarUI.prototype.pauseAll = function pauseAll() {\n    this.core.emit('core:pause-all');\n  };\n\n  StatusBarUI.prototype.resumeAll = function resumeAll() {\n    this.core.emit('core:resume-all');\n  };\n\n  StatusBarUI.prototype.getTotalSpeed = function getTotalSpeed(files) {\n    var totalSpeed = 0;\n    files.forEach(function (file) {\n      totalSpeed = totalSpeed + getSpeed(file.progress);\n    });\n    return totalSpeed;\n  };\n\n  StatusBarUI.prototype.getTotalETA = function getTotalETA(files) {\n    var totalSpeed = this.getTotalSpeed(files);\n\n    if (totalSpeed === 0) {\n      return 0;\n    }\n\n    var totalBytesRemaining = files.reduce(function (total, file) {\n      return total + getBytesRemaining(file.progress);\n    }, 0);\n    return Math.round(totalBytesRemaining / totalSpeed * 10) / 10;\n  };\n\n  StatusBarUI.prototype.render = function render(state) {\n    var files = state.files;\n    var uploadStartedFiles = Object.keys(files).filter(function (file) {\n      return files[file].progress.uploadStarted;\n    });\n    var completeFiles = Object.keys(files).filter(function (file) {\n      return files[file].progress.uploadComplete;\n    });\n    var inProgressFiles = Object.keys(files).filter(function (file) {\n      return !files[file].progress.uploadComplete && files[file].progress.uploadStarted && !files[file].isPaused;\n    });\n    var processingFiles = Object.keys(files).filter(function (file) {\n      return files[file].progress.preprocess || files[file].progress.postprocess;\n    });\n    var inProgressFilesArray = [];\n    inProgressFiles.forEach(function (file) {\n      inProgressFilesArray.push(files[file]);\n    });\n    var totalSpeed = prettyBytes(this.getTotalSpeed(inProgressFilesArray));\n    var totalETA = prettyETA(this.getTotalETA(inProgressFilesArray) // total size and uploaded size\n    );\n    var totalSize = 0;\n    var totalUploadedSize = 0;\n    inProgressFilesArray.forEach(function (file) {\n      totalSize = totalSize + (file.progress.bytesTotal || 0);\n      totalUploadedSize = totalUploadedSize + (file.progress.bytesUploaded || 0);\n    });\n    totalSize = prettyBytes(totalSize);\n    totalUploadedSize = prettyBytes(totalUploadedSize);\n    var isAllComplete = state.totalProgress === 100 && completeFiles.length === Object.keys(files).length && processingFiles.length === 0;\n    var isAllPaused = inProgressFiles.length === 0 && !isAllComplete && uploadStartedFiles.length > 0;\n    var isUploadStarted = uploadStartedFiles.length > 0;\n    var resumableUploads = this.core.getState().capabilities.resumableUploads || false;\n    return StatusBar({\n      error: state.error,\n      totalProgress: state.totalProgress,\n      totalSize: totalSize,\n      totalUploadedSize: totalUploadedSize,\n      uploadStartedFiles: uploadStartedFiles,\n      isAllComplete: isAllComplete,\n      isAllPaused: isAllPaused,\n      isUploadStarted: isUploadStarted,\n      pauseAll: this.pauseAll,\n      resumeAll: this.resumeAll,\n      cancelAll: this.cancelAll,\n      complete: completeFiles.length,\n      inProgress: uploadStartedFiles.length,\n      totalSpeed: totalSpeed,\n      totalETA: totalETA,\n      files: state.files,\n      resumableUploads: resumableUploads\n    });\n  };\n\n  StatusBarUI.prototype.install = function install() {\n    var target = this.opts.target;\n    var plugin = this;\n    this.target = this.mount(target, plugin);\n  };\n\n  StatusBarUI.prototype.uninstall = function uninstall() {\n    this.unmount();\n  };\n\n  return StatusBarUI;\n}(Plugin);","map":null,"metadata":{},"sourceType":"script"}