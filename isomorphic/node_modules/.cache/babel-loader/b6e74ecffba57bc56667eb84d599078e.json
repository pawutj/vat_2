{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Plugin = require('./Plugin'\n/**\n * Meta Data\n * Adds metadata fields to Uppy\n *\n */\n);\n\nmodule.exports = function (_Plugin) {\n  _inherits(MetaData, _Plugin);\n\n  function MetaData(core, opts) {\n    _classCallCheck(this, MetaData);\n\n    var _this = _possibleConstructorReturn(this, _Plugin.call(this, core, opts));\n\n    _this.type = 'modifier';\n    _this.id = 'MetaData';\n    _this.title = 'Meta Data'; // set default options\n\n    var defaultOptions = {}; // merge default options with the ones set by user\n\n    _this.opts = _extends({}, defaultOptions, opts);\n    _this.handleFileAdded = _this.handleFileAdded.bind(_this);\n    return _this;\n  }\n\n  MetaData.prototype.handleFileAdded = function handleFileAdded(file) {\n    var _this2 = this;\n\n    var metaFields = this.opts.fields;\n    metaFields.forEach(function (item) {\n      var obj = {};\n      obj[item.id] = item.value;\n\n      _this2.core.updateMeta(obj, file.id);\n    });\n  };\n\n  MetaData.prototype.addInitialMeta = function addInitialMeta() {\n    var metaFields = this.opts.fields;\n    this.core.setState({\n      metaFields: metaFields\n    });\n    this.core.on('core:file-added', this.handleFileAdded);\n  };\n\n  MetaData.prototype.install = function install() {\n    this.addInitialMeta();\n  };\n\n  MetaData.prototype.uninstall = function uninstall() {\n    this.core.off('core:file-added', this.handleFileAdded);\n  };\n\n  return MetaData;\n}(Plugin);","map":null,"metadata":{},"sourceType":"script"}