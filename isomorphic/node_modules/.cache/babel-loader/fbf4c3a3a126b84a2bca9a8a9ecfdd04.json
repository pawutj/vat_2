{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFunctionURL = getFunctionURL;\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _marked =\n/*#__PURE__*/\n_regenerator.default.mark(_call);\n\nfunction getFunctionURL(functionName) {\n  var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // If the function name is already a URL, just return it.\n\n  var baseUrl = /^https?:\\/\\//.test(functionName) ? functionName : \"https://\".concat(this.region, \"-\").concat(this.projectId(), \".cloudfunctions.net/\").concat(functionName);\n  var query = Object.keys(parameters).map(function (key) {\n    return \"\".concat(key, \"=\").concat(parameters[key]);\n  }).join('&');\n  if (query) return \"\".concat(baseUrl, \"?\").concat(query);else return baseUrl;\n}\n\nfunction _call(functionName) {\n  var queryParams,\n      init,\n      url,\n      response,\n      contentType,\n      parser,\n      data,\n      _args = arguments;\n  return _regenerator.default.wrap(function _call$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          queryParams = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          init = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};\n          url = getFunctionURL.call(this, functionName, queryParams);\n          _context.next = 5;\n          return (0, _effects.call)(fetch, url, init);\n\n        case 5:\n          response = _context.sent;\n\n          if (response.ok) {\n            _context.next = 8;\n            break;\n          }\n\n          throw response;\n\n        case 8:\n          contentType = response.headers.get('Content-Type');\n          parser = contentType.startsWith('application/json') ? response.json : response.text;\n          _context.next = 12;\n          return (0, _effects.call)([response, parser]);\n\n        case 12:\n          data = _context.sent;\n          return _context.abrupt(\"return\", data);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\n\nvar _default = {\n  call: _call\n};\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}