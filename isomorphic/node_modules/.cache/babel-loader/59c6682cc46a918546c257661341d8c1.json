{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\src\\\\components\\\\contacts\\\\contactList.js\";\nimport React, { Component } from 'react';\nimport IntlMessages from '../utility/intlMessages';\nimport { InputSearch } from '../uielements/input';\nimport DeleteButton from './deleteButton';\nimport { PropTypes } from 'prop-types';\nimport { ContactListWrapper } from './contactList.style';\nimport Scrollbar from '../utility/customScrollBar';\n\nfunction filterContacts(contacts, search) {\n  search = search.toUpperCase();\n  return search ? contacts.filter(function (contact) {\n    return contact.name.toUpperCase().includes(search);\n  }) : contacts;\n}\n\nvar ContactList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ContactList, _Component);\n\n  function ContactList(props) {\n    var _this;\n\n    _classCallCheck(this, ContactList);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ContactList).call(this, props));\n    _this.singleContact = _this.singleContact.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.onChange = _this.onChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.state = {\n      search: ''\n    };\n    return _this;\n  }\n\n  _createClass(ContactList, [{\n    key: \"singleContact\",\n    value: function singleContact(contact) {\n      var _this$props = this.props,\n          seectedId = _this$props.seectedId,\n          deleteContact = _this$props.deleteContact,\n          changeContact = _this$props.changeContact;\n      var activeClass = seectedId === contact.id ? 'active' : '';\n\n      var onChange = function onChange() {\n        return changeContact(contact.id);\n      };\n\n      return React.createElement(\"div\", {\n        key: contact.id,\n        className: \"\".concat(activeClass, \" isoSingleContact\"),\n        onClick: onChange,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"isoAvatar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }, contact.avatar ? React.createElement(\"img\", {\n        alt: \"#\",\n        src: contact.avatar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }) : ''), React.createElement(\"div\", {\n        className: \"isoContactName\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, contact.name ? contact.name : 'No Name')), React.createElement(DeleteButton, {\n        deleteContact: deleteContact,\n        contact: contact,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"onChange\",\n    value: function onChange(event) {\n      this.setState({\n        search: event.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var search = this.state.search;\n      var contacts = filterContacts(this.props.contacts, search);\n      return React.createElement(ContactListWrapper, {\n        className: \"isoContactListWrapper\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(InputSearch, {\n        placeholder: this.context.intl.formatMessage({\n          id: 'contactlist.searchContacts'\n        }),\n        value: search,\n        onChange: this.onChange,\n        className: \"isoSearchBar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), contacts && contacts.length > 0 ? React.createElement(\"div\", {\n        className: \"isoContactList\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(Scrollbar, {\n        className: \"contactListScrollbar\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, contacts.map(function (contact) {\n        return _this2.singleContact(contact);\n      }))) : React.createElement(\"span\", {\n        className: \"isoNoResultMsg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(IntlMessages, {\n        id: \"Component.contacts.noOption\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return ContactList;\n}(Component);\n\nexport { ContactList as default };\nContactList.contextTypes = {\n  intl: PropTypes.object.isRequired\n};","map":{"version":3,"sources":["C:\\Users\\USER\\Desktop\\vat\\isomorphic\\src\\components\\contacts\\contactList.js"],"names":["React","Component","IntlMessages","InputSearch","DeleteButton","PropTypes","ContactListWrapper","Scrollbar","filterContacts","contacts","search","toUpperCase","filter","contact","name","includes","ContactList","props","singleContact","bind","onChange","state","seectedId","deleteContact","changeContact","activeClass","id","avatar","event","setState","target","value","context","intl","formatMessage","length","map","contextTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport IntlMessages from '../utility/intlMessages';\nimport { InputSearch } from '../uielements/input';\nimport DeleteButton from './deleteButton';\nimport { PropTypes } from 'prop-types';\nimport { ContactListWrapper } from './contactList.style';\nimport Scrollbar from '../utility/customScrollBar';\n\nfunction filterContacts(contacts, search) {\n  search = search.toUpperCase();\n  return search\n    ? contacts.filter(contact => contact.name.toUpperCase().includes(search))\n    : contacts;\n}\n\nexport default class ContactList extends Component {\n  constructor(props) {\n    super(props);\n    this.singleContact = this.singleContact.bind(this);\n    this.onChange = this.onChange.bind(this);\n    this.state = {\n      search: '',\n    };\n  }\n  singleContact(contact) {\n    const { seectedId, deleteContact, changeContact } = this.props;\n    const activeClass = seectedId === contact.id ? 'active' : '';\n    const onChange = () => changeContact(contact.id);\n    return (\n      <div\n        key={contact.id}\n        className={`${activeClass} isoSingleContact`}\n        onClick={onChange}\n      >\n        <div className=\"isoAvatar\">\n          {contact.avatar ? <img alt=\"#\" src={contact.avatar} /> : ''}\n        </div>\n        <div className=\"isoContactName\">\n          <h3>{contact.name ? contact.name : 'No Name'}</h3>\n        </div>\n        <DeleteButton deleteContact={deleteContact} contact={contact} />\n      </div>\n    );\n  }\n  onChange(event) {\n    this.setState({ search: event.target.value });\n  }\n  render() {\n    const { search } = this.state;\n    const contacts = filterContacts(this.props.contacts, search);\n    return (\n      <ContactListWrapper className=\"isoContactListWrapper\">\n        <InputSearch\n          placeholder={this.context.intl.formatMessage({\n            id: 'contactlist.searchContacts',\n          })}\n          value={search}\n          onChange={this.onChange}\n          className=\"isoSearchBar\"\n        />\n        {contacts && contacts.length > 0 ? (\n          <div className=\"isoContactList\">\n            <Scrollbar className=\"contactListScrollbar\">\n              {contacts.map(contact => this.singleContact(contact))}\n            </Scrollbar>\n          </div>\n        ) : (\n          <span className=\"isoNoResultMsg\">\n            {<IntlMessages id=\"Component.contacts.noOption\" />}\n          </span>\n        )}\n      </ContactListWrapper>\n    );\n  }\n}\n\nContactList.contextTypes = {\n  intl: PropTypes.object.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}