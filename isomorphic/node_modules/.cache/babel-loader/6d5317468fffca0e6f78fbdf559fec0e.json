{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\src\\\\containers\\\\ScrumBoard\\\\Task\\\\Task.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport scrumBoardActions from '../../../redux/scrumBoard/actions';\nimport drawerActions from '../../../redux/drawer/actions';\nimport { Container } from './Task.style';\nimport TaskCard from './TaskCard/TaskCard';\n\nvar TaskItem =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(TaskItem, _React$PureComponent);\n\n  function TaskItem() {\n    _classCallCheck(this, TaskItem);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TaskItem).apply(this, arguments));\n  }\n\n  _createClass(TaskItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          task = _this$props.task,\n          isDragging = _this$props.isDragging,\n          isGroupedOver = _this$props.isGroupedOver,\n          provided = _this$props.provided,\n          columnId = _this$props.columnId,\n          deleteTaskWatcher = _this$props.deleteTaskWatcher,\n          openDrawer = _this$props.openDrawer,\n          closeDrawer = _this$props.closeDrawer;\n      return React.createElement(Container, Object.assign({\n        isDragging: isDragging,\n        isGroupedOver: isGroupedOver,\n        ref: provided.innerRef\n      }, provided.draggableProps, provided.dragHandleProps, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }), React.createElement(TaskCard, {\n        task: task,\n        showDrawer: function showDrawer() {\n          return openDrawer({\n            drawerType: 'CARD_DETAILS',\n            drawerProps: {\n              task: task,\n              columnId: columnId\n            }\n          });\n        },\n        onDelete: function onDelete() {\n          deleteTaskWatcher({\n            task_id: task.id,\n            column_id: columnId\n          });\n          closeDrawer();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return TaskItem;\n}(React.PureComponent);\n\nexport default connect(null, _objectSpread({}, scrumBoardActions, drawerActions))(TaskItem);","map":{"version":3,"sources":["C:\\Users\\USER\\Desktop\\vat\\isomorphic\\src\\containers\\ScrumBoard\\Task\\Task.js"],"names":["React","connect","scrumBoardActions","drawerActions","Container","TaskCard","TaskItem","props","task","isDragging","isGroupedOver","provided","columnId","deleteTaskWatcher","openDrawer","closeDrawer","innerRef","draggableProps","dragHandleProps","drawerType","drawerProps","task_id","id","column_id","PureComponent"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,iBAAP,MAA8B,mCAA9B;AACA,OAAOC,aAAP,MAA0B,+BAA1B;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,OAAOC,QAAP,MAAqB,qBAArB;;IAEMC,Q;;;;;;;;;;;;;6BACK;AAAA,wBAUH,KAAKC,KAVF;AAAA,UAELC,IAFK,eAELA,IAFK;AAAA,UAGLC,UAHK,eAGLA,UAHK;AAAA,UAILC,aAJK,eAILA,aAJK;AAAA,UAKLC,QALK,eAKLA,QALK;AAAA,UAMLC,QANK,eAMLA,QANK;AAAA,UAOLC,iBAPK,eAOLA,iBAPK;AAAA,UAQLC,UARK,eAQLA,UARK;AAAA,UASLC,WATK,eASLA,WATK;AAYP,aACE,oBAAC,SAAD;AACE,QAAA,UAAU,EAAEN,UADd;AAEE,QAAA,aAAa,EAAEC,aAFjB;AAGE,QAAA,GAAG,EAAEC,QAAQ,CAACK;AAHhB,SAIML,QAAQ,CAACM,cAJf,EAKMN,QAAQ,CAACO,eALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAOE,oBAAC,QAAD;AACE,QAAA,IAAI,EAAEV,IADR;AAEE,QAAA,UAAU,EAAE;AAAA,iBACVM,UAAU,CAAC;AACTK,YAAAA,UAAU,EAAE,cADH;AAETC,YAAAA,WAAW,EAAE;AACXZ,cAAAA,IAAI,EAAEA,IADK;AAEXI,cAAAA,QAAQ,EAAEA;AAFC;AAFJ,WAAD,CADA;AAAA,SAFd;AAWE,QAAA,QAAQ,EAAE,oBAAM;AACdC,UAAAA,iBAAiB,CAAC;AAAEQ,YAAAA,OAAO,EAAEb,IAAI,CAACc,EAAhB;AAAoBC,YAAAA,SAAS,EAAEX;AAA/B,WAAD,CAAjB;AACAG,UAAAA,WAAW;AACZ,SAdH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPF,CADF;AA0BD;;;;EAvCoBf,KAAK,CAACwB,a;;AA0C7B,eAAevB,OAAO,CACpB,IADoB,oBAEfC,iBAFe,EAEOC,aAFP,EAAP,CAGbG,QAHa,CAAf","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport scrumBoardActions from '../../../redux/scrumBoard/actions';\nimport drawerActions from '../../../redux/drawer/actions';\nimport { Container } from './Task.style';\nimport TaskCard from './TaskCard/TaskCard';\n\nclass TaskItem extends React.PureComponent {\n  render() {\n    const {\n      task,\n      isDragging,\n      isGroupedOver,\n      provided,\n      columnId,\n      deleteTaskWatcher,\n      openDrawer,\n      closeDrawer,\n    } = this.props;\n\n    return (\n      <Container\n        isDragging={isDragging}\n        isGroupedOver={isGroupedOver}\n        ref={provided.innerRef}\n        {...provided.draggableProps}\n        {...provided.dragHandleProps}\n      >\n        <TaskCard\n          task={task}\n          showDrawer={() =>\n            openDrawer({\n              drawerType: 'CARD_DETAILS',\n              drawerProps: {\n                task: task,\n                columnId: columnId,\n              },\n            })\n          }\n          onDelete={() => {\n            deleteTaskWatcher({ task_id: task.id, column_id: columnId });\n            closeDrawer();\n          }}\n        />\n      </Container>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  { ...scrumBoardActions, ...drawerActions }\n)(TaskItem);\n"]},"metadata":{},"sourceType":"module"}