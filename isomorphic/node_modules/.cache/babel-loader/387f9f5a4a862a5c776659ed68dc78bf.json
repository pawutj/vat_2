{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar AuthView = require('./AuthView');\n\nvar Browser = require('./Browser');\n\nvar LoaderView = require('./Loader');\n\nvar Utils = require('../core/Utils'\n/**\n * Class to easily generate generic views for plugins\n *\n * This class expects the plugin using to have the following attributes\n *\n * stateId {String} object key of which the plugin state is stored\n *\n * This class also expects the plugin instance using it to have the following\n * accessor methods.\n * Each method takes the item whose property is to be accessed\n * as a param\n *\n * isFolder\n *    @return {Boolean} for if the item is a folder or not\n * getItemData\n *    @return {Object} that is format ready for uppy upload/download\n * getItemIcon\n *    @return {Object} html instance of the item's icon\n * getItemSubList\n *    @return {Array} sub-items in the item. e.g a folder may contain sub-items\n * getItemName\n *    @return {String} display friendly name of the item\n * getMimeType\n *    @return {String} mime type of the item\n * getItemId\n *    @return {String} unique id of the item\n * getItemRequestPath\n *    @return {String} unique request path of the item when making calls to uppy server\n * getItemModifiedDate\n *    @return {object} or {String} date of when last the item was modified\n * getItemThumbnailUrl\n *    @return {String}\n */\n);\n\nmodule.exports = function () {\n  /**\n   * @param {object} instance of the plugin\n   */\n  function View(plugin, opts) {\n    _classCallCheck(this, View);\n\n    this.plugin = plugin;\n    this.Provider = plugin[plugin.id]; // set default options\n\n    var defaultOptions = {\n      viewType: 'list' // merge default options with the ones set by user\n\n    };\n    this.opts = _extends({}, defaultOptions, opts // Logic\n    );\n    this.addFile = this.addFile.bind(this);\n    this.filterItems = this.filterItems.bind(this);\n    this.filterQuery = this.filterQuery.bind(this);\n    this.toggleSearch = this.toggleSearch.bind(this);\n    this.getFolder = this.getFolder.bind(this);\n    this.getNextFolder = this.getNextFolder.bind(this);\n    this.logout = this.logout.bind(this);\n    this.checkAuth = this.checkAuth.bind(this);\n    this.handleAuth = this.handleAuth.bind(this);\n    this.handleDemoAuth = this.handleDemoAuth.bind(this);\n    this.sortByTitle = this.sortByTitle.bind(this);\n    this.sortByDate = this.sortByDate.bind(this);\n    this.isActiveRow = this.isActiveRow.bind(this);\n    this.handleError = this.handleError.bind(this);\n    this.handleScroll = this.handleScroll.bind(this // Visual\n    );\n    this.render = this.render.bind(this);\n  }\n  /**\n   * Little shorthand to update the state with the plugin's state\n   */\n\n\n  View.prototype.updateState = function updateState(newState) {\n    var _plugin$core$setState;\n\n    var stateId = this.plugin.stateId;\n    var state = this.plugin.core.state;\n    this.plugin.core.setState((_plugin$core$setState = {}, _plugin$core$setState[stateId] = _extends({}, state[stateId], newState), _plugin$core$setState));\n  };\n\n  View.prototype._updateFilesAndFolders = function _updateFilesAndFolders(res, files, folders) {\n    var _this = this;\n\n    this.plugin.getItemSubList(res).forEach(function (item) {\n      if (_this.plugin.isFolder(item)) {\n        folders.push(item);\n      } else {\n        files.push(item);\n      }\n    });\n    this.updateState({\n      folders: folders,\n      files: files\n    });\n  };\n\n  View.prototype.checkAuth = function checkAuth() {\n    var _this2 = this;\n\n    this.updateState({\n      checkAuthInProgress: true\n    });\n    this.Provider.checkAuth().then(function (authenticated) {\n      _this2.updateState({\n        checkAuthInProgress: false\n      });\n\n      _this2.plugin.onAuth(authenticated);\n    }).catch(function (err) {\n      _this2.updateState({\n        checkAuthInProgress: false\n      });\n\n      _this2.handleError(err);\n    });\n  };\n  /**\n   * Based on folder ID, fetch a new folder and update it to state\n   * @param  {String} id Folder id\n   * @return {Promise}   Folders/files in folder\n   */\n\n\n  View.prototype.getFolder = function getFolder(id, name) {\n    var _this3 = this;\n\n    return this._loaderWrapper(this.Provider.list(id), function (res) {\n      var folders = [];\n      var files = [];\n      var updatedDirectories = void 0;\n\n      var state = _this3.plugin.core.getState()[_this3.plugin.stateId];\n\n      var index = state.directories.findIndex(function (dir) {\n        return id === dir.id;\n      });\n\n      if (index !== -1) {\n        updatedDirectories = state.directories.slice(0, index + 1);\n      } else {\n        updatedDirectories = state.directories.concat([{\n          id: id,\n          title: name || _this3.plugin.getItemName(res)\n        }]);\n      }\n\n      _this3._updateFilesAndFolders(res, files, folders);\n\n      _this3.updateState({\n        directories: updatedDirectories\n      });\n    }, this.handleError);\n  };\n  /**\n   * Fetches new folder\n   * @param  {Object} Folder\n   * @param  {String} title Folder title\n   */\n\n\n  View.prototype.getNextFolder = function getNextFolder(folder) {\n    var id = this.plugin.getItemRequestPath(folder);\n    this.getFolder(id, this.plugin.getItemName(folder));\n  };\n\n  View.prototype.addFile = function addFile(file) {\n    var _this4 = this;\n\n    var tagFile = {\n      source: this.plugin.id,\n      data: this.plugin.getItemData(file),\n      name: this.plugin.getItemName(file) || this.plugin.getItemId(file),\n      type: this.plugin.getMimeType(file),\n      isRemote: true,\n      body: {\n        fileId: this.plugin.getItemId(file)\n      },\n      remote: {\n        host: this.plugin.opts.host,\n        url: '' + this.Provider.fileUrl(this.plugin.getItemRequestPath(file)),\n        body: {\n          fileId: this.plugin.getItemId(file)\n        }\n      }\n    };\n    Utils.getFileType(tagFile).then(function (fileType) {\n      if (Utils.isPreviewSupported(fileType[1])) {\n        tagFile.preview = _this4.plugin.getItemThumbnailUrl(file);\n      }\n\n      _this4.plugin.core.log('Adding remote file');\n\n      _this4.plugin.core.addFile(tagFile);\n    });\n  };\n  /**\n   * Removes session token on client side.\n   */\n\n\n  View.prototype.logout = function logout() {\n    var _this5 = this;\n\n    this.Provider.logout(location.href).then(function (res) {\n      return res.json();\n    }).then(function (res) {\n      if (res.ok) {\n        var newState = {\n          authenticated: false,\n          files: [],\n          folders: [],\n          directories: []\n        };\n\n        _this5.updateState(newState);\n      }\n    }).catch(this.handleError);\n  };\n\n  View.prototype.filterQuery = function filterQuery(e) {\n    var state = this.plugin.core.getState()[this.plugin.stateId];\n    this.updateState(_extends({}, state, {\n      filterInput: e.target.value\n    }));\n  };\n\n  View.prototype.toggleSearch = function toggleSearch() {\n    var state = this.plugin.core.getState()[this.plugin.stateId];\n    var searchInputEl = document.querySelector('.Browser-searchInput');\n    this.updateState(_extends({}, state, {\n      isSearchVisible: !state.isSearchVisible,\n      filterInput: ''\n    }));\n    searchInputEl.value = '';\n\n    if (!state.isSearchVisible) {\n      searchInputEl.focus();\n    }\n  };\n\n  View.prototype.filterItems = function filterItems(items) {\n    var _this6 = this;\n\n    var state = this.plugin.core.getState()[this.plugin.stateId];\n    return items.filter(function (folder) {\n      return _this6.plugin.getItemName(folder).toLowerCase().indexOf(state.filterInput.toLowerCase()) !== -1;\n    });\n  };\n\n  View.prototype.sortByTitle = function sortByTitle() {\n    var _this7 = this;\n\n    var state = _extends({}, this.plugin.core.getState()[this.plugin.stateId]);\n\n    var files = state.files,\n        folders = state.folders,\n        sorting = state.sorting;\n    var sortedFiles = files.sort(function (fileA, fileB) {\n      if (sorting === 'titleDescending') {\n        return _this7.plugin.getItemName(fileB).localeCompare(_this7.plugin.getItemName(fileA));\n      }\n\n      return _this7.plugin.getItemName(fileA).localeCompare(_this7.plugin.getItemName(fileB));\n    });\n    var sortedFolders = folders.sort(function (folderA, folderB) {\n      if (sorting === 'titleDescending') {\n        return _this7.plugin.getItemName(folderB).localeCompare(_this7.plugin.getItemName(folderA));\n      }\n\n      return _this7.plugin.getItemName(folderA).localeCompare(_this7.plugin.getItemName(folderB));\n    });\n    this.updateState(_extends({}, state, {\n      files: sortedFiles,\n      folders: sortedFolders,\n      sorting: sorting === 'titleDescending' ? 'titleAscending' : 'titleDescending'\n    }));\n  };\n\n  View.prototype.sortByDate = function sortByDate() {\n    var _this8 = this;\n\n    var state = _extends({}, this.plugin.core.getState()[this.plugin.stateId]);\n\n    var files = state.files,\n        folders = state.folders,\n        sorting = state.sorting;\n    var sortedFiles = files.sort(function (fileA, fileB) {\n      var a = new Date(_this8.plugin.getItemModifiedDate(fileA));\n      var b = new Date(_this8.plugin.getItemModifiedDate(fileB));\n\n      if (sorting === 'dateDescending') {\n        return a > b ? -1 : a < b ? 1 : 0;\n      }\n\n      return a > b ? 1 : a < b ? -1 : 0;\n    });\n    var sortedFolders = folders.sort(function (folderA, folderB) {\n      var a = new Date(_this8.plugin.getItemModifiedDate(folderA));\n      var b = new Date(_this8.plugin.getItemModifiedDate(folderB));\n\n      if (sorting === 'dateDescending') {\n        return a > b ? -1 : a < b ? 1 : 0;\n      }\n\n      return a > b ? 1 : a < b ? -1 : 0;\n    });\n    this.updateState(_extends({}, state, {\n      files: sortedFiles,\n      folders: sortedFolders,\n      sorting: sorting === 'dateDescending' ? 'dateAscending' : 'dateDescending'\n    }));\n  };\n\n  View.prototype.sortBySize = function sortBySize() {\n    var _this9 = this;\n\n    var state = _extends({}, this.plugin.core.getState()[this.plugin.stateId]);\n\n    var files = state.files,\n        sorting = state.sorting; // check that plugin supports file sizes\n\n    if (!files.length || !this.plugin.getItemData(files[0]).size) {\n      return;\n    }\n\n    var sortedFiles = files.sort(function (fileA, fileB) {\n      var a = _this9.plugin.getItemData(fileA).size;\n\n      var b = _this9.plugin.getItemData(fileB).size;\n\n      if (sorting === 'sizeDescending') {\n        return a > b ? -1 : a < b ? 1 : 0;\n      }\n\n      return a > b ? 1 : a < b ? -1 : 0;\n    });\n    this.updateState(_extends({}, state, {\n      files: sortedFiles,\n      sorting: sorting === 'sizeDescending' ? 'sizeAscending' : 'sizeDescending'\n    }));\n  };\n\n  View.prototype.isActiveRow = function isActiveRow(file) {\n    return this.plugin.core.getState()[this.plugin.stateId].activeRow === this.plugin.getItemId(file);\n  };\n\n  View.prototype.handleDemoAuth = function handleDemoAuth() {\n    var state = this.plugin.core.getState()[this.plugin.stateId];\n    this.updateState({}, state, {\n      authenticated: true\n    });\n  };\n\n  View.prototype.handleAuth = function handleAuth() {\n    var _this10 = this;\n\n    var urlId = Math.floor(Math.random() * 999999) + 1;\n    var redirect = '' + location.href + (location.search ? '&' : '?') + 'id=' + urlId;\n    var authState = btoa(JSON.stringify({\n      redirect: redirect\n    }));\n    var link = this.Provider.authUrl() + '?state=' + authState;\n    var authWindow = window.open(link, '_blank');\n\n    var checkAuth = function checkAuth() {\n      var authWindowUrl = void 0;\n\n      try {\n        authWindowUrl = authWindow.location.href;\n      } catch (e) {\n        if (e instanceof DOMException || e instanceof TypeError) {\n          return setTimeout(checkAuth, 100);\n        } else throw e;\n      } // split url because chrome adds '#' to redirects\n\n\n      if (authWindowUrl && authWindowUrl.split('#')[0] === redirect) {\n        authWindow.close();\n\n        _this10._loaderWrapper(_this10.Provider.checkAuth(), _this10.plugin.onAuth, _this10.handleError);\n      } else {\n        setTimeout(checkAuth, 100);\n      }\n    };\n\n    checkAuth();\n  };\n\n  View.prototype.handleError = function handleError(error) {\n    var core = this.plugin.core;\n    var message = core.i18n('uppyServerError');\n    core.log(error.toString());\n    core.emit('informer', message, 'error', 5000);\n  };\n\n  View.prototype.handleScroll = function handleScroll(e) {\n    var _this11 = this;\n\n    var scrollPos = e.target.scrollHeight - (e.target.scrollTop + e.target.offsetHeight);\n    var path = this.plugin.getNextPagePath ? this.plugin.getNextPagePath() : null;\n\n    if (scrollPos < 50 && path && !this._isHandlingScroll) {\n      this.Provider.list(path).then(function (res) {\n        var _plugin$core$getState = _this11.plugin.core.getState()[_this11.plugin.stateId],\n            files = _plugin$core$getState.files,\n            folders = _plugin$core$getState.folders;\n\n        _this11._updateFilesAndFolders(res, files, folders);\n      }).catch(this.handleError).then(function () {\n        _this11._isHandlingScroll = false;\n      } // always called\n      );\n      this._isHandlingScroll = true;\n    }\n  }; // displays loader view while asynchronous request is being made.\n\n\n  View.prototype._loaderWrapper = function _loaderWrapper(promise, then, catch_) {\n    var _this12 = this;\n\n    promise.then(then).catch(catch_).then(function () {\n      return _this12.updateState({\n        loading: false\n      });\n    } // always called.\n    );\n    this.updateState({\n      loading: true\n    });\n  };\n\n  View.prototype.render = function render(state) {\n    var _state$plugin$stateId = state[this.plugin.stateId],\n        authenticated = _state$plugin$stateId.authenticated,\n        checkAuthInProgress = _state$plugin$stateId.checkAuthInProgress,\n        loading = _state$plugin$stateId.loading;\n\n    if (loading) {\n      return LoaderView();\n    }\n\n    if (!authenticated) {\n      return AuthView({\n        pluginName: this.plugin.title,\n        demo: this.plugin.opts.demo,\n        checkAuth: this.checkAuth,\n        handleAuth: this.handleAuth,\n        handleDemoAuth: this.handleDemoAuth,\n        checkAuthInProgress: checkAuthInProgress\n      });\n    }\n\n    var browserProps = _extends({}, state[this.plugin.stateId], {\n      getNextFolder: this.getNextFolder,\n      getFolder: this.getFolder,\n      addFile: this.addFile,\n      filterItems: this.filterItems,\n      filterQuery: this.filterQuery,\n      toggleSearch: this.toggleSearch,\n      sortByTitle: this.sortByTitle,\n      sortByDate: this.sortByDate,\n      logout: this.logout,\n      demo: this.plugin.opts.demo,\n      isActiveRow: this.isActiveRow,\n      getItemName: this.plugin.getItemName,\n      getItemIcon: this.plugin.getItemIcon,\n      handleScroll: this.handleScroll,\n      title: this.plugin.title,\n      viewType: this.opts.viewType\n    });\n\n    return Browser(browserProps);\n  };\n\n  return View;\n}();","map":null,"metadata":{},"sourceType":"script"}