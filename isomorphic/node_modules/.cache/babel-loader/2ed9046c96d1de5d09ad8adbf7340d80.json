{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nexports.default = decorateHandler;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _disposables = require('disposables');\n\nvar _isPlainObject = require('lodash/isPlainObject');\n\nvar _isPlainObject2 = _interopRequireDefault(_isPlainObject);\n\nvar _invariant = require('invariant');\n\nvar _invariant2 = _interopRequireDefault(_invariant);\n\nvar _hoistNonReactStatics = require('hoist-non-react-statics');\n\nvar _hoistNonReactStatics2 = _interopRequireDefault(_hoistNonReactStatics);\n\nvar _shallowEqual = require('./utils/shallowEqual');\n\nvar _shallowEqual2 = _interopRequireDefault(_shallowEqual);\n\nvar _shallowEqualScalar = require('./utils/shallowEqualScalar');\n\nvar _shallowEqualScalar2 = _interopRequireDefault(_shallowEqualScalar);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar isClassComponent = function isClassComponent(Comp) {\n  return Boolean(Comp && Comp.prototype && typeof Comp.prototype.render === 'function');\n};\n\nfunction decorateHandler(_ref) {\n  var _class, _temp;\n\n  var DecoratedComponent = _ref.DecoratedComponent,\n      createHandler = _ref.createHandler,\n      createMonitor = _ref.createMonitor,\n      createConnector = _ref.createConnector,\n      registerHandler = _ref.registerHandler,\n      containerDisplayName = _ref.containerDisplayName,\n      getType = _ref.getType,\n      collect = _ref.collect,\n      options = _ref.options;\n  var _options$arePropsEqua = options.arePropsEqual,\n      arePropsEqual = _options$arePropsEqua === undefined ? _shallowEqualScalar2.default : _options$arePropsEqua;\n  var displayName = DecoratedComponent.displayName || DecoratedComponent.name || 'Component';\n  var DragDropContainer = (_temp = _class = function (_Component) {\n    _inherits(DragDropContainer, _Component);\n\n    _createClass(DragDropContainer, [{\n      key: 'getHandlerId',\n      value: function getHandlerId() {\n        return this.handlerId;\n      }\n    }, {\n      key: 'getDecoratedComponentInstance',\n      value: function getDecoratedComponentInstance() {\n        return this.decoratedComponentInstance;\n      }\n    }, {\n      key: 'shouldComponentUpdate',\n      value: function shouldComponentUpdate(nextProps, nextState) {\n        return !arePropsEqual(nextProps, this.props) || !(0, _shallowEqual2.default)(nextState, this.state);\n      }\n    }]);\n\n    function DragDropContainer(props, context) {\n      _classCallCheck(this, DragDropContainer);\n\n      var _this = _possibleConstructorReturn(this, (DragDropContainer.__proto__ || Object.getPrototypeOf(DragDropContainer)).call(this, props, context));\n\n      _this.handleChange = _this.handleChange.bind(_this);\n      _this.handleChildRef = _this.handleChildRef.bind(_this);\n      (0, _invariant2.default)(_typeof(_this.context.dragDropManager) === 'object', 'Could not find the drag and drop manager in the context of %s. ' + 'Make sure to wrap the top-level component of your app with DragDropContext. ' + 'Read more: http://react-dnd.github.io/react-dnd/docs-troubleshooting.html#could-not-find-the-drag-and-drop-manager-in-the-context', displayName, displayName);\n      _this.manager = _this.context.dragDropManager;\n      _this.handlerMonitor = createMonitor(_this.manager);\n      _this.handlerConnector = createConnector(_this.manager.getBackend());\n      _this.handler = createHandler(_this.handlerMonitor);\n      _this.disposable = new _disposables.SerialDisposable();\n\n      _this.receiveProps(props);\n\n      _this.state = _this.getCurrentState();\n\n      _this.dispose();\n\n      return _this;\n    }\n\n    _createClass(DragDropContainer, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        this.isCurrentlyMounted = true;\n        this.disposable = new _disposables.SerialDisposable();\n        this.currentType = null;\n        this.receiveProps(this.props);\n        this.handleChange();\n      }\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        if (!arePropsEqual(nextProps, this.props)) {\n          this.receiveProps(nextProps);\n          this.handleChange();\n        }\n      }\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        this.dispose();\n        this.isCurrentlyMounted = false;\n      }\n    }, {\n      key: 'receiveProps',\n      value: function receiveProps(props) {\n        this.handler.receiveProps(props);\n        this.receiveType(getType(props));\n      }\n    }, {\n      key: 'receiveType',\n      value: function receiveType(type) {\n        if (type === this.currentType) {\n          return;\n        }\n\n        this.currentType = type;\n\n        var _registerHandler = registerHandler(type, this.handler, this.manager),\n            handlerId = _registerHandler.handlerId,\n            unregister = _registerHandler.unregister;\n\n        this.handlerId = handlerId;\n        this.handlerMonitor.receiveHandlerId(handlerId);\n        this.handlerConnector.receiveHandlerId(handlerId);\n        var globalMonitor = this.manager.getMonitor();\n        var unsubscribe = globalMonitor.subscribeToStateChange(this.handleChange, {\n          handlerIds: [handlerId]\n        });\n        this.disposable.setDisposable(new _disposables.CompositeDisposable(new _disposables.Disposable(unsubscribe), new _disposables.Disposable(unregister)));\n      }\n    }, {\n      key: 'handleChange',\n      value: function handleChange() {\n        if (!this.isCurrentlyMounted) {\n          return;\n        }\n\n        var nextState = this.getCurrentState();\n\n        if (!(0, _shallowEqual2.default)(nextState, this.state)) {\n          this.setState(nextState);\n        }\n      }\n    }, {\n      key: 'dispose',\n      value: function dispose() {\n        this.disposable.dispose();\n        this.handlerConnector.receiveHandlerId(null);\n      }\n    }, {\n      key: 'handleChildRef',\n      value: function handleChildRef(component) {\n        this.decoratedComponentInstance = component;\n        this.handler.receiveComponent(component);\n      }\n    }, {\n      key: 'getCurrentState',\n      value: function getCurrentState() {\n        var nextState = collect(this.handlerConnector.hooks, this.handlerMonitor);\n\n        if (process.env.NODE_ENV !== 'production') {\n          (0, _invariant2.default)((0, _isPlainObject2.default)(nextState), 'Expected `collect` specified as the second argument to ' + '%s for %s to return a plain object of props to inject. ' + 'Instead, received %s.', containerDisplayName, displayName, nextState);\n        }\n\n        return nextState;\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        return _react2.default.createElement(DecoratedComponent, _extends({}, this.props, this.state, {\n          ref: isClassComponent(DecoratedComponent) ? this.handleChildRef : null\n        }));\n      }\n    }]);\n\n    return DragDropContainer;\n  }(_react.Component), _class.DecoratedComponent = DecoratedComponent, _class.displayName = containerDisplayName + '(' + displayName + ')', _class.contextTypes = {\n    dragDropManager: _propTypes2.default.object.isRequired\n  }, _temp);\n  return (0, _hoistNonReactStatics2.default)(DragDropContainer, DecoratedComponent);\n}","map":null,"metadata":{},"sourceType":"script"}