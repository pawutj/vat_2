{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _svgNamespace = 'http://www.w3.org/2000/svg',\n    _appendChild = require('yo-yoify/lib/appendChild');\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Plugin = require('../Plugin');\n\nvar Provider = require('../../uppy-base/src/plugins/Provider');\n\nvar View = require('../../generic-provider-views/index');\n\nvar icons = require('./icons');\n\nmodule.exports = function (_Plugin) {\n  _inherits(Dropbox, _Plugin);\n\n  function Dropbox(core, opts) {\n    _classCallCheck(this, Dropbox);\n\n    var _this // Visual\n    // set default options\n    = _possibleConstructorReturn(this, _Plugin.call(this, core, opts));\n\n    _this.type = 'acquirer';\n    _this.id = 'Dropbox';\n    _this.title = 'Dropbox';\n    _this.stateId = 'dropbox';\n\n    _this.icon = function () {\n      var _path, _path2, _path3, _uppyIcon;\n\n      return _uppyIcon = document.createElementNS(_svgNamespace, 'svg'), _uppyIcon.setAttribute('width', '128'), _uppyIcon.setAttribute('height', '118'), _uppyIcon.setAttribute('viewBox', '0 0 128 118'), _uppyIcon.setAttribute('class', 'UppyIcon'), _appendChild(_uppyIcon, [' ', (_path = document.createElementNS(_svgNamespace, 'path'), _path.setAttribute('d', 'M38.145.777L1.108 24.96l25.608 20.507 37.344-23.06z'), _path), ' ', (_path2 = document.createElementNS(_svgNamespace, 'path'), _path2.setAttribute('d', 'M1.108 65.975l37.037 24.183L64.06 68.525l-37.343-23.06zM64.06 68.525l25.917 21.633 37.036-24.183-25.61-20.51z'), _path2), ' ', (_path3 = document.createElementNS(_svgNamespace, 'path'), _path3.setAttribute('d', 'M127.014 24.96L89.977.776 64.06 22.407l37.345 23.06zM64.136 73.18l-25.99 21.567-11.122-7.262v8.142l37.112 22.256 37.114-22.256v-8.142l-11.12 7.262z'), _path3), ' ']), _uppyIcon;\n    }; // writing out the key explicitly for readability the key used to store\n    // the provider instance must be equal to this.id.\n\n\n    _this.Dropbox = new Provider(core, {\n      host: _this.opts.host,\n      provider: 'dropbox'\n    });\n    _this.files = [];\n    _this.onAuth = _this.onAuth.bind(_this);\n    _this.render = _this.render.bind(_this);\n    var defaultOptions = {}; // merge default options with the ones set by user\n\n    _this.opts = _extends({}, defaultOptions, opts);\n    return _this;\n  }\n\n  Dropbox.prototype.install = function install() {\n    this.view = new View(this); // Set default state\n\n    this.core.setState({\n      // writing out the key explicitly for readability the key used to store\n      // the plugin state must be equal to this.stateId.\n      dropbox: {\n        authenticated: false,\n        files: [],\n        folders: [],\n        directories: [],\n        activeRow: -1,\n        filterInput: '',\n        isSearchVisible: false\n      }\n    });\n    var target = this.opts.target;\n    var plugin = this;\n    this.target = this.mount(target, plugin);\n  };\n\n  Dropbox.prototype.uninstall = function uninstall() {\n    this.unmount();\n  };\n\n  Dropbox.prototype.onAuth = function onAuth(authenticated) {\n    this.view.updateState({\n      authenticated: authenticated\n    });\n\n    if (authenticated) {\n      this.view.getFolder();\n    }\n  };\n\n  Dropbox.prototype.isFolder = function isFolder(item) {\n    return item.is_dir;\n  };\n\n  Dropbox.prototype.getItemData = function getItemData(item) {\n    return _extends({}, item, {\n      size: item.bytes\n    });\n  };\n\n  Dropbox.prototype.getItemIcon = function getItemIcon(item) {\n    var icon = icons[item.icon];\n\n    if (!icon) {\n      if (item.icon.startsWith('folder')) {\n        icon = icons['folder'];\n      } else {\n        icon = icons['page_white'];\n      }\n    }\n\n    return icon();\n  };\n\n  Dropbox.prototype.getItemSubList = function getItemSubList(item) {\n    return item.contents;\n  };\n\n  Dropbox.prototype.getItemName = function getItemName(item) {\n    return item.path.length > 1 ? item.path.substring(1) : item.path;\n  };\n\n  Dropbox.prototype.getMimeType = function getMimeType(item) {\n    return item.mime_type;\n  };\n\n  Dropbox.prototype.getItemId = function getItemId(item) {\n    return item.rev;\n  };\n\n  Dropbox.prototype.getItemRequestPath = function getItemRequestPath(item) {\n    return encodeURIComponent(this.getItemName(item));\n  };\n\n  Dropbox.prototype.getItemModifiedDate = function getItemModifiedDate(item) {\n    return item.modified;\n  };\n\n  Dropbox.prototype.getItemThumbnailUrl = function getItemThumbnailUrl(item) {\n    return this.opts.host + '/' + this.Dropbox.id + '/thumbnail/' + this.getItemRequestPath(item);\n  };\n\n  Dropbox.prototype.render = function render(state) {\n    return this.view.render(state);\n  };\n\n  return Dropbox;\n}(Plugin);","map":null,"metadata":{},"sourceType":"script"}