{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\src\\\\components\\\\mail\\\\maiilList.js\";\nimport React from 'react';\nimport { timeDifference } from '../../helpers/utility';\nimport { tags, tagColor } from './mailTags.js';\nimport MailListWrapper from './mailList.style';\nimport { rtl } from '../../settings/withDirection';\nexport default function mailList(mails, selectMail, selectedMail, toggleListVisible) {\n  var renderSingleMail = function renderSingleMail(mail, key) {\n    var onClick = function onClick() {\n      selectMail(mail.id);\n\n      if (toggleListVisible) {\n        toggleListVisible();\n      }\n    };\n\n    var isSelected = selectedMail === mail.id;\n    var recpName = mail.name;\n    var signature = {\n      splitLet: recpName.match(/\\b(\\w)/g).join('').split('', 2)\n    };\n    var activeClass = isSelected ? 'activeMail' : '';\n    var unreadClass = !mail.read ? 'unreadMail' : '';\n    var tagOption = mail.tags ? tagColor[tags.findIndex(function (tags) {\n      return tags === mail.tags;\n    })] : 'transparent';\n    return React.createElement(\"div\", {\n      key: \"list\".concat(key),\n      onClick: onClick,\n      className: \"\".concat(activeClass, \" \").concat(unreadClass, \" isoMailList\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      className: \"isoLabelIndicator\",\n      style: rtl === 'rtl' ? {\n        borderRightColor: tagOption\n      } : {\n        borderTopColor: tagOption\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"isoRecipentsImg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, mail.img ? React.createElement(\"img\", {\n      alt: \"#\",\n      src: mail.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }) : React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, signature.splitLet)), React.createElement(\"div\", {\n      className: \"isoMailInfo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"infoHead\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"isoRecipents\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, mail.name), React.createElement(\"span\", {\n      className: \"isoReceiveDate\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, timeDifference(mail.date))), React.createElement(\"p\", {\n      className: \"isoSubject\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, mail.subject)));\n  };\n\n  return React.createElement(MailListWrapper, {\n    className: \"isoMailListWrapper\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, mails.map(function (mail, index) {\n    return renderSingleMail(mail, index);\n  }));\n}","map":{"version":3,"sources":["C:\\Users\\USER\\Desktop\\vat\\isomorphic\\src\\components\\mail\\maiilList.js"],"names":["React","timeDifference","tags","tagColor","MailListWrapper","rtl","mailList","mails","selectMail","selectedMail","toggleListVisible","renderSingleMail","mail","key","onClick","id","isSelected","recpName","name","signature","splitLet","match","join","split","activeClass","unreadClass","read","tagOption","findIndex","borderRightColor","borderTopColor","img","date","subject","map","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { timeDifference } from '../../helpers/utility';\nimport { tags, tagColor } from './mailTags.js';\nimport MailListWrapper from './mailList.style';\nimport { rtl } from '../../settings/withDirection';\n\nexport default function mailList(\n  mails,\n  selectMail,\n  selectedMail,\n  toggleListVisible\n) {\n  const renderSingleMail = (mail, key) => {\n    const onClick = () => {\n      selectMail(mail.id);\n      if (toggleListVisible) {\n        toggleListVisible();\n      }\n    };\n    const isSelected = selectedMail === mail.id;\n    const recpName = mail.name;\n    const signature = {\n      splitLet: recpName\n        .match(/\\b(\\w)/g)\n        .join('')\n        .split('', 2)\n    };\n    const activeClass = isSelected ? 'activeMail' : '';\n    const unreadClass = !mail.read ? 'unreadMail' : '';\n    const tagOption = mail.tags\n      ? tagColor[tags.findIndex(tags => tags === mail.tags)]\n      : 'transparent';\n    return (\n      <div\n        key={`list${key}`}\n        onClick={onClick}\n        className={`${activeClass} ${unreadClass} isoMailList`}\n      >\n        <span\n          className=\"isoLabelIndicator\"\n          style={\n            rtl === 'rtl' ? (\n              { borderRightColor: tagOption }\n            ) : (\n              { borderTopColor: tagOption }\n            )\n          }\n        />\n        <div className=\"isoRecipentsImg\">\n          {mail.img ? (\n            <img alt=\"#\" src={mail.img} />\n          ) : (\n            <span>{signature.splitLet}</span>\n          )}\n        </div>\n\n        <div className=\"isoMailInfo\">\n          <div className=\"infoHead\">\n            <p className=\"isoRecipents\">{mail.name}</p>\n            <span className=\"isoReceiveDate\">{timeDifference(mail.date)}</span>\n          </div>\n          <p className=\"isoSubject\">{mail.subject}</p>\n        </div>\n      </div>\n    );\n  };\n  return (\n    <MailListWrapper className=\"isoMailListWrapper\">\n      {mails.map((mail, index) => renderSingleMail(mail, index))}\n    </MailListWrapper>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}