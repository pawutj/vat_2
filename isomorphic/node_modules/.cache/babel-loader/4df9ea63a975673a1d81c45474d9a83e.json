{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar dataURItoFile = require('../utils/dataURItoFile'\n/**\n * Webcam Plugin\n */\n);\n\nmodule.exports = function () {\n  function Webcam() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Webcam);\n\n    this._userMedia;\n    this.userMedia = true;\n    this.protocol = location.protocol.match(/https/i) ? 'https' : 'http'; // set default options\n\n    var defaultOptions = {\n      enableFlash: true,\n      modes: []\n    };\n    var defaultParams = {\n      swfURL: 'webcam.swf',\n      width: 400,\n      height: 300,\n      dest_width: 800,\n      // size of captured image\n      dest_height: 600,\n      // these default to width/height\n      image_format: 'jpeg',\n      // image format (may be jpeg or png)\n      jpeg_quality: 90,\n      // jpeg image quality from 0 (worst) to 100 (best)\n      enable_flash: true,\n      // enable flash fallback,\n      force_flash: false,\n      // force flash mode,\n      flip_horiz: false,\n      // flip image horiz (mirror mode)\n      fps: 30,\n      // camera frames per second\n      upload_name: 'webcam',\n      // name of file in upload post data\n      constraints: null,\n      // custom user media constraints,\n      flashNotDetectedText: 'ERROR: No Adobe Flash Player detected.  Webcam.js relies on Flash for browsers that do not support getUserMedia (like yours).',\n      noInterfaceFoundText: 'No supported webcam interface found.',\n      unfreeze_snap: true // Whether to unfreeze the camera after snap (defaults to true)\n\n    };\n    this.params = Object.assign({}, defaultParams, params // merge default options with the ones set by user\n    );\n    this.opts = Object.assign({}, defaultOptions, opts // Camera controls\n    );\n    this.start = this.start.bind(this);\n    this.init = this.init.bind(this);\n    this.stop = this.stop.bind(this // this.startRecording = this.startRecording.bind(this)\n    // this.stopRecording = this.stopRecording.bind(this)\n    );\n    this.takeSnapshot = this.takeSnapshot.bind(this);\n    this.getImage = this.getImage.bind(this);\n    this.getSWFHTML = this.getSWFHTML.bind(this);\n    this.detectFlash = this.detectFlash.bind(this);\n    this.getUserMedia = this.getUserMedia.bind(this);\n    this.getMediaDevices = this.getMediaDevices.bind(this);\n  }\n  /**\n   * Checks for getUserMedia support\n   */\n\n\n  _createClass(Webcam, [{\n    key: 'init',\n    value: function init() {\n      var _this = this; // initialize, check for getUserMedia support\n\n\n      this.mediaDevices = this.getMediaDevices();\n      this.userMedia = this.getUserMedia(this.mediaDevices // Make sure media stream is closed when navigating away from page\n      );\n\n      if (this.userMedia) {\n        window.addEventListener('beforeunload', function (event) {\n          _this.reset();\n        });\n      }\n\n      return {\n        mediaDevices: this.mediaDevices,\n        userMedia: this.userMedia\n      };\n    } // Setup getUserMedia, with polyfill for older browsers\n    // Adapted from: https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia\n\n  }, {\n    key: 'getMediaDevices',\n    value: function getMediaDevices() {\n      return navigator.mediaDevices && navigator.mediaDevices.getUserMedia ? navigator.mediaDevices : navigator.mozGetUserMedia || navigator.webkitGetUserMedia ? {\n        getUserMedia: function getUserMedia(opts) {\n          return new Promise(function (resolve, reject) {\n            (navigator.mozGetUserMedia || navigator.webkitGetUserMedia).call(navigator, opts, resolve, reject);\n          });\n        }\n      } : null;\n    }\n  }, {\n    key: 'getUserMedia',\n    value: function getUserMedia(mediaDevices) {\n      var userMedia = true; // Older versions of firefox (< 21) apparently claim support but user media does not actually work\n\n      if (navigator.userAgent.match(/Firefox\\D+(\\d+)/)) {\n        if (parseInt(RegExp.$1, 10) < 21) {\n          return null;\n        }\n      }\n\n      window.URL = window.URL || window.webkitURL || window.mozURL || window.msURL;\n      return userMedia && !!mediaDevices && !!window.URL;\n    }\n  }, {\n    key: 'start',\n    value: function start() {\n      var _this2 = this;\n\n      this.userMedia = this._userMedia === undefined ? this.userMedia : this._userMedia;\n      return new Promise(function (resolve, reject) {\n        if (_this2.userMedia) {\n          var acceptsAudio = _this2.opts.modes.indexOf('video-audio') !== -1 || _this2.opts.modes.indexOf('audio-only') !== -1;\n          var acceptsVideo = _this2.opts.modes.indexOf('video-audio') !== -1 || _this2.opts.modes.indexOf('video-only') !== -1 || _this2.opts.modes.indexOf('picture') !== -1; // ask user for access to their camera\n\n          _this2.mediaDevices.getUserMedia({\n            audio: acceptsAudio,\n            video: acceptsVideo\n          }).then(function (stream) {\n            return resolve(stream);\n          }).catch(function (err) {\n            return reject(err);\n          });\n        }\n      });\n    }\n    /**\n     * Detects if browser supports flash\n     * Code snippet borrowed from: https://github.com/swfobject/swfobject\n     *\n     * @return {bool} flash supported\n     */\n\n  }, {\n    key: 'detectFlash',\n    value: function detectFlash() {\n      var SHOCKWAVE_FLASH = 'Shockwave Flash';\n      var SHOCKWAVE_FLASH_AX = 'ShockwaveFlash.ShockwaveFlash';\n      var FLASH_MIME_TYPE = 'application/x-shockwave-flash';\n      var win = window;\n      var nav = navigator;\n      var hasFlash = false;\n\n      if (typeof nav.plugins !== 'undefined' && _typeof(nav.plugins[SHOCKWAVE_FLASH]) === 'object') {\n        var desc = nav.plugins[SHOCKWAVE_FLASH].description;\n\n        if (desc && typeof nav.mimeTypes !== 'undefined' && nav.mimeTypes[FLASH_MIME_TYPE] && nav.mimeTypes[FLASH_MIME_TYPE].enabledPlugin) {\n          hasFlash = true;\n        }\n      } else if (typeof win.ActiveXObject !== 'undefined') {\n        try {\n          var ax = new win.ActiveXObject(SHOCKWAVE_FLASH_AX);\n\n          if (ax) {\n            var ver = ax.GetVariable('$version');\n            if (ver) hasFlash = true;\n          }\n        } catch (e) {}\n      }\n\n      return hasFlash;\n    }\n  }, {\n    key: 'reset',\n    value: function reset() {\n      // shutdown camera, reset to potentially attach again\n      if (this.preview_active) this.unfreeze();\n\n      if (this.userMedia) {\n        if (this.stream) {\n          if (this.stream.getVideoTracks) {\n            // get video track to call stop on it\n            var tracks = this.stream.getVideoTracks();\n            if (tracks && tracks[0] && tracks[0].stop) tracks[0].stop();\n          } else if (this.stream.stop) {\n            // deprecated, may be removed in future\n            this.stream.stop();\n          }\n        }\n\n        delete this.stream;\n      }\n\n      if (this.userMedia !== true) {\n        // call for turn off camera in flash\n        this.getMovie()._releaseCamera();\n      }\n    }\n  }, {\n    key: 'getSWFHTML',\n    value: function getSWFHTML() {\n      // Return HTML for embedding flash based webcam capture movie\n      var swfURL = this.params.swfURL; // make sure we aren't running locally (flash doesn't work)\n\n      if (location.protocol.match(/file/)) {\n        return '<h3 style=\"color:red\">ERROR: the Webcam.js Flash fallback does not work from local disk.  Please run it from a web server.</h3>';\n      } // make sure we have flash\n\n\n      if (!this.detectFlash()) {\n        return '<h3 style=\"color:red\">No flash</h3>';\n      } // set default swfURL if not explicitly set\n\n\n      if (!swfURL) {\n        // find our script tag, and use that base URL\n        var baseUrl = '';\n        var scpts = document.getElementsByTagName('script');\n\n        for (var idx = 0, len = scpts.length; idx < len; idx++) {\n          var src = scpts[idx].getAttribute('src');\n\n          if (src && src.match(/\\/webcam(\\.min)?\\.js/)) {\n            baseUrl = src.replace(/\\/webcam(\\.min)?\\.js.*$/, '');\n            idx = len;\n          }\n        }\n\n        if (baseUrl) swfURL = baseUrl + '/webcam.swf';else swfURL = 'webcam.swf';\n      } // // if this is the user's first visit, set flashvar so flash privacy settings panel is shown first\n      // if (window.localStorage && !localStorage.getItem('visited')) {\n      //   // this.params.new_user = 1\n      //   localStorage.setItem('visited', 1)\n      // }\n      // this.params.new_user = 1\n      // construct flashvars string\n\n\n      var flashvars = '';\n\n      for (var key in this.params) {\n        if (flashvars) flashvars += '&';\n        flashvars += key + '=' + escape(this.params[key]);\n      } // construct object/embed tag\n\n\n      return '<object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" type=\"application/x-shockwave-flash\" codebase=\"' + this.protocol + '://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0\" width=\"' + this.params.width + '\" height=\"' + this.params.height + '\" id=\"webcam_movie_obj\" align=\"middle\"><param name=\"wmode\" value=\"opaque\" /><param name=\"allowScriptAccess\" value=\"always\" /><param name=\"allowFullScreen\" value=\"false\" /><param name=\"movie\" value=\"' + swfURL + '\" /><param name=\"loop\" value=\"false\" /><param name=\"menu\" value=\"false\" /><param name=\"quality\" value=\"best\" /><param name=\"bgcolor\" value=\"#ffffff\" /><param name=\"flashvars\" value=\"' + flashvars + '\"/><embed id=\"webcam_movie_embed\" src=\"' + swfURL + '\" wmode=\"opaque\" loop=\"false\" menu=\"false\" quality=\"best\" bgcolor=\"#ffffff\" width=\"' + this.params.width + '\" height=\"' + this.params.height + '\" name=\"webcam_movie_embed\" align=\"middle\" allowScriptAccess=\"always\" allowFullScreen=\"false\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" flashvars=\"' + flashvars + '\"></embed></object>';\n    }\n  }, {\n    key: 'getMovie',\n    value: function getMovie() {\n      // get reference to movie object/embed in DOM\n      var movie = document.getElementById('webcam_movie_obj');\n      if (!movie || !movie._snap) movie = document.getElementById('webcam_movie_embed');\n      if (!movie) console.log('getMovie error');\n      return movie;\n    }\n    /**\n     * Stops the webcam capture and video playback.\n     */\n\n  }, {\n    key: 'stop',\n    value: function stop() {\n      var videoStream = this.videoStream;\n      this.updateState({\n        cameraReady: false\n      });\n\n      if (videoStream) {\n        if (videoStream.stop) {\n          videoStream.stop();\n        } else if (videoStream.msStop) {\n          videoStream.msStop();\n        }\n\n        videoStream.onended = null;\n        videoStream = null;\n      }\n    }\n  }, {\n    key: 'flashNotify',\n    value: function flashNotify(type, msg) {\n      // receive notification from flash about event\n      switch (type) {\n        case 'flashLoadComplete':\n          // movie loaded successfully\n          break;\n\n        case 'cameraLive':\n          // camera is live and ready to snap\n          this.live = true;\n          break;\n\n        case 'error':\n          // Flash error\n          console.log('There was a flash error', msg);\n          break;\n\n        default:\n          // catch-all event, just in case\n          console.log('webcam flash_notify: ' + type + ': ' + msg);\n          break;\n      }\n    }\n  }, {\n    key: 'configure',\n    value: function configure(panel) {\n      // open flash configuration panel -- specify tab name:\n      // 'camera', 'privacy', 'default', 'localStorage', 'microphone', 'settingsManager'\n      if (!panel) panel = 'camera';\n\n      this.getMovie()._configure(panel);\n    }\n    /**\n     * Takes a snapshot and displays it in a canvas.\n     */\n\n  }, {\n    key: 'getImage',\n    value: function getImage(video, opts) {\n      var canvas = document.createElement('canvas');\n      canvas.width = video.videoWidth;\n      canvas.height = video.videoHeight;\n      canvas.getContext('2d').drawImage(video, 0, 0);\n      var dataUrl = canvas.toDataURL(opts.mimeType);\n      var file = dataURItoFile(dataUrl, {\n        name: opts.name\n      });\n      return {\n        dataUrl: dataUrl,\n        data: file,\n        type: opts.mimeType\n      };\n    }\n  }, {\n    key: 'takeSnapshot',\n    value: function takeSnapshot(video, canvas) {\n      var opts = {\n        name: 'webcam-' + Date.now() + '.jpg',\n        mimeType: 'image/jpeg'\n      };\n      var image = this.getImage(video, canvas, opts);\n      var tagFile = {\n        source: this.id,\n        name: opts.name,\n        data: image.data,\n        type: opts.type\n      };\n      return tagFile;\n    }\n  }]);\n\n  return Webcam;\n}();","map":null,"metadata":{},"sourceType":"script"}