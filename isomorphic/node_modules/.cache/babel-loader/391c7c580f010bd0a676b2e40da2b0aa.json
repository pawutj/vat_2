{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _Promise = typeof Promise === 'undefined' ? require('es6-promise').Promise : Promise;\n\nvar Plugin = require('./Plugin');\n\nvar tus = require('tus-js-client');\n\nvar UppySocket = require('../core/UppySocket');\n\nvar Utils = require('../core/Utils');\n\nrequire('whatwg-fetch' // Extracted from https://github.com/tus/tus-js-client/blob/master/lib/upload.js#L13\n// excepted we removed 'fingerprint' key to avoid adding more dependencies\n);\n\nvar tusDefaultOptions = {\n  endpoint: '',\n  resume: true,\n  onProgress: null,\n  onChunkComplete: null,\n  onSuccess: null,\n  onError: null,\n  headers: {},\n  chunkSize: Infinity,\n  withCredentials: false,\n  uploadUrl: null,\n  uploadSize: null,\n  overridePatchMethod: false,\n  retryDelays: null\n  /**\n   * Tus resumable file uploader\n   *\n   */\n\n};\n\nmodule.exports = function (_Plugin) {\n  _inherits(Tus10, _Plugin);\n\n  function Tus10(core, opts) {\n    _classCallCheck(this, Tus10);\n\n    var _this = _possibleConstructorReturn(this, _Plugin.call(this, core, opts));\n\n    _this.type = 'uploader';\n    _this.id = 'Tus';\n    _this.title = 'Tus'; // set default options\n\n    var defaultOptions = {\n      resume: true,\n      allowPause: true,\n      autoRetry: true,\n      retryDelays: [0, 1000, 3000, 5000] // merge default options with the ones set by user\n\n    };\n    _this.opts = _extends({}, defaultOptions, opts);\n    _this.handlePauseAll = _this.handlePauseAll.bind(_this);\n    _this.handleResumeAll = _this.handleResumeAll.bind(_this);\n    _this.handleUpload = _this.handleUpload.bind(_this);\n    return _this;\n  }\n\n  Tus10.prototype.pauseResume = function pauseResume(action, fileID) {\n    var updatedFiles = _extends({}, this.core.getState().files);\n\n    var inProgressUpdatedFiles = Object.keys(updatedFiles).filter(function (file) {\n      return !updatedFiles[file].progress.uploadComplete && updatedFiles[file].progress.uploadStarted;\n    });\n\n    switch (action) {\n      case 'toggle':\n        if (updatedFiles[fileID].uploadComplete) return;\n        var wasPaused = updatedFiles[fileID].isPaused || false;\n        var isPaused = !wasPaused;\n        var updatedFile = void 0;\n\n        if (wasPaused) {\n          updatedFile = _extends({}, updatedFiles[fileID], {\n            isPaused: false\n          });\n        } else {\n          updatedFile = _extends({}, updatedFiles[fileID], {\n            isPaused: true\n          });\n        }\n\n        updatedFiles[fileID] = updatedFile;\n        this.core.setState({\n          files: updatedFiles\n        });\n        return isPaused;\n\n      case 'pauseAll':\n        inProgressUpdatedFiles.forEach(function (file) {\n          var updatedFile = _extends({}, updatedFiles[file], {\n            isPaused: true\n          });\n\n          updatedFiles[file] = updatedFile;\n        });\n        this.core.setState({\n          files: updatedFiles\n        });\n        return;\n\n      case 'resumeAll':\n        inProgressUpdatedFiles.forEach(function (file) {\n          var updatedFile = _extends({}, updatedFiles[file], {\n            isPaused: false\n          });\n\n          updatedFiles[file] = updatedFile;\n        });\n        this.core.setState({\n          files: updatedFiles\n        });\n        return;\n    }\n  };\n\n  Tus10.prototype.handlePauseAll = function handlePauseAll() {\n    this.pauseResume('pauseAll');\n  };\n\n  Tus10.prototype.handleResumeAll = function handleResumeAll() {\n    this.pauseResume('resumeAll');\n  };\n  /**\n   * Create a new Tus upload\n   *\n   * @param {object} file for use with upload\n   * @param {integer} current file in a queue\n   * @param {integer} total number of files in a queue\n   * @returns {Promise}\n   */\n\n\n  Tus10.prototype.upload = function upload(file, current, total) {\n    var _this2 = this;\n\n    this.core.log('uploading ' + current + ' of ' + total // Create a new tus upload\n    );\n    return new _Promise(function (resolve, reject) {\n      var optsTus = _extends({}, tusDefaultOptions, _this2.opts, // Install file-specific upload overrides.\n      file.tus || {});\n\n      optsTus.onError = function (err) {\n        _this2.core.log(err);\n\n        _this2.core.emit('core:upload-error', file.id, err);\n\n        reject('Failed because: ' + err);\n      };\n\n      optsTus.onProgress = function (bytesUploaded, bytesTotal) {\n        _this2.onReceiveUploadUrl(file, upload.url);\n\n        _this2.core.emit('core:upload-progress', {\n          uploader: _this2,\n          id: file.id,\n          bytesUploaded: bytesUploaded,\n          bytesTotal: bytesTotal\n        });\n      };\n\n      optsTus.onSuccess = function () {\n        _this2.core.emit('core:upload-success', file.id, upload, upload.url);\n\n        if (upload.url) {\n          _this2.core.log('Download ' + upload.file.name + ' from ' + upload.url);\n        }\n\n        resolve(upload);\n      };\n\n      optsTus.metadata = file.meta;\n      var upload = new tus.Upload(file.data, optsTus);\n\n      _this2.onFileRemove(file.id, function (targetFileID) {\n        // this.core.log(`removing file: ${targetFileID}`)\n        upload.abort();\n        resolve('upload ' + targetFileID + ' was removed');\n      });\n\n      _this2.onPause(file.id, function (isPaused) {\n        isPaused ? upload.abort() : upload.start();\n      });\n\n      _this2.onPauseAll(file.id, function () {\n        upload.abort();\n      });\n\n      _this2.onResumeAll(file.id, function () {\n        upload.start();\n      });\n\n      _this2.core.on('core:retry-started', function () {\n        var files = _this2.core.getState().files;\n\n        if (files[file.id].progress.uploadComplete || !files[file.id].progress.uploadStarted || files[file.id].isPaused) {\n          return;\n        }\n\n        upload.start();\n      });\n\n      upload.start();\n\n      _this2.core.emit('core:upload-started', file.id, upload);\n    });\n  };\n\n  Tus10.prototype.uploadRemote = function uploadRemote(file, current, total) {\n    var _this3 = this;\n\n    return new _Promise(function (resolve, reject) {\n      _this3.core.log(file.remote.url);\n\n      if (file.serverToken) {\n        _this3.connectToServerSocket(file);\n      } else {\n        var endpoint = _this3.opts.endpoint;\n\n        if (file.tus && file.tus.endpoint) {\n          endpoint = file.tus.endpoint;\n        }\n\n        _this3.core.emitter.emit('core:upload-started', file.id);\n\n        fetch(file.remote.url, {\n          method: 'post',\n          credentials: 'include',\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(_extends({}, file.remote.body, {\n            endpoint: endpoint,\n            protocol: 'tus',\n            size: file.data.size,\n            metadata: file.meta\n          }))\n        }).then(function (res) {\n          if (res.status < 200 && res.status > 300) {\n            return reject(res.statusText);\n          }\n\n          res.json().then(function (data) {\n            var token = data.token;\n            file = _this3.getFile(file.id);\n            file.serverToken = token;\n\n            _this3.updateFile(file);\n\n            _this3.connectToServerSocket(file);\n\n            resolve();\n          });\n        });\n      }\n    });\n  };\n\n  Tus10.prototype.connectToServerSocket = function connectToServerSocket(file) {\n    var _this4 = this;\n\n    var token = file.serverToken;\n    var host = Utils.getSocketHost(file.remote.host);\n    var socket = new UppySocket({\n      target: host + '/api/' + token\n    });\n    this.onFileRemove(file.id, function () {\n      return socket.send('pause', {});\n    });\n    this.onPause(file.id, function (isPaused) {\n      isPaused ? socket.send('pause', {}) : socket.send('resume', {});\n    });\n    this.onPauseAll(file.id, function () {\n      return socket.send('pause', {});\n    });\n    this.onResumeAll(file.id, function () {\n      return socket.send('resume', {});\n    });\n    socket.on('progress', function (progressData) {\n      return Utils.emitSocketProgress(_this4, progressData, file);\n    });\n    socket.on('success', function (data) {\n      _this4.core.emitter.emit('core:upload-success', file.id, data, data.url);\n\n      socket.close();\n    });\n  };\n\n  Tus10.prototype.getFile = function getFile(fileID) {\n    return this.core.state.files[fileID];\n  };\n\n  Tus10.prototype.updateFile = function updateFile(file) {\n    var _extends2;\n\n    var files = _extends({}, this.core.state.files, (_extends2 = {}, _extends2[file.id] = file, _extends2));\n\n    this.core.setState({\n      files: files\n    });\n  };\n\n  Tus10.prototype.onReceiveUploadUrl = function onReceiveUploadUrl(file, uploadURL) {\n    var currentFile = this.getFile(file.id);\n    if (!currentFile) return; // Only do the update if we didn't have an upload URL yet.\n\n    if (!currentFile.tus || currentFile.tus.uploadUrl !== uploadURL) {\n      var newFile = _extends({}, currentFile, {\n        tus: _extends({}, currentFile.tus, {\n          uploadUrl: uploadURL\n        })\n      });\n\n      this.updateFile(newFile);\n    }\n  };\n\n  Tus10.prototype.onFileRemove = function onFileRemove(fileID, cb) {\n    this.core.on('core:file-removed', function (targetFileID) {\n      if (fileID === targetFileID) cb(targetFileID);\n    });\n  };\n\n  Tus10.prototype.onPause = function onPause(fileID, cb) {\n    var _this5 = this;\n\n    this.core.on('core:upload-pause', function (targetFileID) {\n      if (fileID === targetFileID) {\n        var isPaused = _this5.pauseResume('toggle', fileID);\n\n        cb(isPaused);\n      }\n    });\n  };\n\n  Tus10.prototype.onPauseAll = function onPauseAll(fileID, cb) {\n    var _this6 = this;\n\n    this.core.on('core:pause-all', function () {\n      if (!_this6.core.getFile(fileID)) return;\n      cb();\n    });\n  };\n\n  Tus10.prototype.onResumeAll = function onResumeAll(fileID, cb) {\n    var _this7 = this;\n\n    this.core.on('core:resume-all', function () {\n      if (!_this7.core.getFile(fileID)) return;\n      cb();\n    });\n  };\n\n  Tus10.prototype.uploadFiles = function uploadFiles(files) {\n    var _this8 = this;\n\n    files.forEach(function (file, index) {\n      var current = parseInt(index, 10) + 1;\n      var total = files.length;\n\n      if (!file.isRemote) {\n        _this8.upload(file, current, total);\n      } else {\n        _this8.uploadRemote(file, current, total);\n      }\n    });\n  };\n\n  Tus10.prototype.handleUpload = function handleUpload(fileIDs) {\n    var _this9 = this;\n\n    if (fileIDs.length === 0) {\n      this.core.log('Tus: no files to upload!');\n      return Promise.resolve();\n    }\n\n    this.core.log('Tus is uploading...');\n    var filesToUpload = fileIDs.map(function (fileID) {\n      return _this9.core.getFile(fileID);\n    });\n    this.uploadFiles(filesToUpload);\n    return new _Promise(function (resolve) {\n      _this9.core.once('core:upload-complete', resolve);\n    });\n  };\n\n  Tus10.prototype.actions = function actions() {\n    var _this10 = this;\n\n    this.core.on('core:pause-all', this.handlePauseAll);\n    this.core.on('core:resume-all', this.handleResumeAll);\n\n    if (this.opts.autoRetry) {\n      this.core.on('back-online', function () {\n        _this10.core.emit('core:retry-started');\n      });\n    }\n  };\n\n  Tus10.prototype.addResumableUploadsCapabilityFlag = function addResumableUploadsCapabilityFlag() {\n    var newCapabilities = _extends({}, this.core.getState().capabilities);\n\n    newCapabilities.resumableUploads = true;\n    this.core.setState({\n      capabilities: newCapabilities\n    });\n  };\n\n  Tus10.prototype.install = function install() {\n    this.addResumableUploadsCapabilityFlag();\n    this.core.addUploader(this.handleUpload);\n    this.actions();\n  };\n\n  Tus10.prototype.uninstall = function uninstall() {\n    this.core.removeUploader(this.handleUpload);\n    this.core.off('core:pause-all', this.handlePauseAll);\n    this.core.off('core:resume-all', this.handleResumeAll);\n  };\n\n  return Tus10;\n}(Plugin);","map":null,"metadata":{},"sourceType":"script"}