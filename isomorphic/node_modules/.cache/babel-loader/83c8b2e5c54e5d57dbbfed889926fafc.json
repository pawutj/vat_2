{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar _Promise = typeof Promise === 'undefined' ? require('es6-promise').Promise : Promise;\n\nvar Plugin = require('../Plugin');\n\nvar WebcamProvider = require('../../uppy-base/src/plugins/Webcam');\n\nvar Translator = require('../../core/Translator');\n\nvar _require = require('../../core/Utils'),\n    extend = _require.extend,\n    getFileTypeExtension = _require.getFileTypeExtension,\n    supportsMediaRecorder = _require.supportsMediaRecorder;\n\nvar WebcamIcon = require('./WebcamIcon');\n\nvar CameraScreen = require('./CameraScreen');\n\nvar PermissionsScreen = require('./PermissionsScreen'\n/**\n * Webcam\n */\n);\n\nmodule.exports = function (_Plugin) {\n  _inherits(Webcam, _Plugin);\n\n  function Webcam(core, opts) {\n    _classCallCheck(this, Webcam);\n\n    var _this // Camera controls\n    // this.justSmile = this.justSmile.bind(this)\n    = _possibleConstructorReturn(this, _Plugin.call(this, core, opts));\n\n    _this.userMedia = true;\n    _this.protocol = location.protocol.match(/https/i) ? 'https' : 'http';\n    _this.type = 'acquirer';\n    _this.id = 'Webcam';\n    _this.title = 'Webcam';\n    _this.icon = WebcamIcon;\n    _this.focus = _this.focus.bind(_this);\n    var defaultLocale = {\n      strings: {\n        smile: 'Smile!' // set default options\n\n      }\n    };\n    var defaultOptions = {\n      enableFlash: true,\n      onBeforeSnapshot: function onBeforeSnapshot() {\n        return Promise.resolve();\n      },\n      countdown: false,\n      locale: defaultLocale,\n      modes: ['video-audio', 'video-only', 'audio-only', 'picture']\n    };\n    _this.params = {\n      swfURL: 'webcam.swf',\n      width: 400,\n      height: 300,\n      dest_width: 800,\n      // size of captured image\n      dest_height: 600,\n      // these default to width/height\n      image_format: 'jpeg',\n      // image format (may be jpeg or png)\n      jpeg_quality: 90,\n      // jpeg image quality from 0 (worst) to 100 (best)\n      enable_flash: true,\n      // enable flash fallback,\n      force_flash: false,\n      // force flash mode,\n      flip_horiz: false,\n      // flip image horiz (mirror mode)\n      fps: 30,\n      // camera frames per second\n      upload_name: 'webcam',\n      // name of file in upload post data\n      constraints: null,\n      // custom user media constraints,\n      flashNotDetectedText: 'ERROR: No Adobe Flash Player detected.  Webcam.js relies on Flash for browsers that do not support getUserMedia (like yours).',\n      noInterfaceFoundText: 'No supported webcam interface found.',\n      unfreeze_snap: true // Whether to unfreeze the camera after snap (defaults to true)\n      // merge default options with the ones set by user\n\n    };\n    _this.opts = _extends({}, defaultOptions, opts);\n    _this.locale = _extends({}, defaultLocale, _this.opts.locale);\n    _this.locale.strings = _extends({}, defaultLocale.strings, _this.opts.locale.strings // i18n\n    );\n    _this.translator = new Translator({\n      locale: _this.locale\n    });\n    _this.i18n = _this.translator.translate.bind(_this.translator);\n    _this.install = _this.install.bind(_this);\n    _this.updateState = _this.updateState.bind(_this);\n    _this.render = _this.render.bind(_this);\n    _this.start = _this.start.bind(_this);\n    _this.stop = _this.stop.bind(_this);\n    _this.takeSnapshot = _this.takeSnapshot.bind(_this);\n    _this.startRecording = _this.startRecording.bind(_this);\n    _this.stopRecording = _this.stopRecording.bind(_this);\n    _this.oneTwoThreeSmile = _this.oneTwoThreeSmile.bind(_this);\n    _this.webcam = new WebcamProvider(_this.opts, _this.params);\n    _this.webcamActive = false;\n\n    if (_this.opts.countdown) {\n      _this.opts.onBeforeSnapshot = _this.oneTwoThreeSmile;\n    } // if (typeof opts.onBeforeSnapshot === 'undefined' || !this.opts.onBeforeSnapshot) {\n    //   if (this.opts.countdown) {\n    //     this.opts.onBeforeSnapshot = this.oneTwoThreeSmile\n    //   } else {\n    //     this.opts.onBeforeSnapshot = this.justSmile\n    //   }\n    // }\n\n\n    return _this;\n  }\n  /**\n   * Little shorthand to update the state with my new state\n   */\n\n\n  Webcam.prototype.updateState = function updateState(newState) {\n    var state = this.core.state;\n\n    var webcam = _extends({}, state.webcam, newState);\n\n    this.core.setState({\n      webcam: webcam\n    });\n  };\n\n  Webcam.prototype.start = function start() {\n    var _this2 = this;\n\n    this.webcamActive = true;\n    this.webcam.start().then(function (stream) {\n      _this2.stream = stream;\n\n      _this2.updateState({\n        // videoStream: stream,\n        cameraReady: true\n      });\n    }).catch(function (err) {\n      _this2.updateState({\n        cameraError: err\n      });\n    });\n  };\n\n  Webcam.prototype.startRecording = function startRecording() {\n    var _this3 = this; // TODO We can check here if any of the mime types listed in the\n    // mimeToExtensions map in Utils.js are supported, and prefer to use one of\n    // those.\n    // Right now we let the browser pick a type that it deems appropriate.\n\n\n    this.recorder = new MediaRecorder(this.stream);\n    this.recordingChunks = [];\n    this.recorder.addEventListener('dataavailable', function (event) {\n      _this3.recordingChunks.push(event.data);\n    });\n    this.recorder.start();\n    this.updateState({\n      isRecording: true\n    });\n  };\n\n  Webcam.prototype.stopRecording = function stopRecording() {\n    var _this4 = this;\n\n    return new _Promise(function (resolve, reject) {\n      _this4.recorder.addEventListener('stop', function () {\n        _this4.updateState({\n          isRecording: false\n        });\n\n        var mimeType = _this4.recordingChunks[0].type;\n        var fileExtension = getFileTypeExtension(mimeType);\n\n        if (!fileExtension) {\n          reject(new Error('Could not upload file: Unsupported media type \"' + mimeType + '\"'));\n          return;\n        }\n\n        var file = {\n          source: _this4.id,\n          name: 'webcam-' + Date.now() + '.' + fileExtension,\n          type: mimeType,\n          data: new Blob(_this4.recordingChunks, {\n            type: mimeType\n          })\n        };\n\n        _this4.core.addfile(file);\n\n        _this4.recordingChunks = null;\n        _this4.recorder = null;\n        resolve();\n      });\n\n      _this4.recorder.stop();\n    });\n  };\n\n  Webcam.prototype.stop = function stop() {\n    this.stream.getAudioTracks().forEach(function (track) {\n      track.stop();\n    });\n    this.stream.getVideoTracks().forEach(function (track) {\n      track.stop();\n    });\n    this.webcamActive = false;\n    this.stream = null;\n    this.streamSrc = null;\n  };\n\n  Webcam.prototype.oneTwoThreeSmile = function oneTwoThreeSmile() {\n    var _this5 = this;\n\n    return new _Promise(function (resolve, reject) {\n      var count = _this5.opts.countdown;\n      var countDown = setInterval(function () {\n        if (!_this5.webcamActive) {\n          clearInterval(countDown);\n          _this5.captureInProgress = false;\n          return reject('Webcam is not active');\n        }\n\n        if (count > 0) {\n          _this5.core.info(count + '...', 'warning', 800);\n\n          count--;\n        } else {\n          clearInterval(countDown);\n\n          _this5.core.info(_this5.i18n('smile'), 'success', 1500);\n\n          setTimeout(function () {\n            return resolve();\n          }, 1500);\n        }\n      }, 1000);\n    });\n  }; // justSmile () {\n  //   return new Promise((resolve, reject) => {\n  //     setTimeout(() => this.core.info(this.i18n('smile'), 'success', 1000), 1500)\n  //     setTimeout(() => resolve(), 2000)\n  //   })\n  // }\n\n\n  Webcam.prototype.takeSnapshot = function takeSnapshot() {\n    var _this6 = this;\n\n    var opts = {\n      name: 'webcam-' + Date.now() + '.jpg',\n      mimeType: 'image/jpeg'\n    };\n    this.videoEl = this.target.querySelector('.UppyWebcam-video');\n    if (this.captureInProgress) return;\n    this.captureInProgress = true;\n    this.opts.onBeforeSnapshot().catch(function (err) {\n      _this6.core.info(err, 'error', 5000);\n\n      return Promise.reject('onBeforeSnapshot: ' + err);\n    }).then(function () {\n      var video = _this6.target.querySelector('.UppyWebcam-video');\n\n      if (!video) {\n        _this6.captureInProgress = false;\n        return Promise.reject('No video element found, likely due to the Webcam tab being closed.');\n      }\n\n      var image = _this6.webcam.getImage(video, opts);\n\n      var tagFile = {\n        source: _this6.id,\n        name: opts.name,\n        data: image.data,\n        type: opts.mimeType\n      };\n      _this6.captureInProgress = false;\n\n      _this6.core.addFile(tagFile);\n    });\n  };\n\n  Webcam.prototype.focus = function focus() {\n    var _this7 = this;\n\n    if (this.opts.countdown) return;\n    setTimeout(function () {\n      _this7.core.info(_this7.i18n('smile'), 'success', 1500);\n    }, 1000);\n  };\n\n  Webcam.prototype.render = function render(state) {\n    if (!this.webcamActive) {\n      this.start();\n    }\n\n    if (!state.webcam.cameraReady && !state.webcam.useTheFlash) {\n      return PermissionsScreen(state.webcam);\n    }\n\n    if (!this.streamSrc) {\n      this.streamSrc = this.stream ? URL.createObjectURL(this.stream) : null;\n    }\n\n    return CameraScreen(extend(state.webcam, {\n      onSnapshot: this.takeSnapshot,\n      onStartRecording: this.startRecording,\n      onStopRecording: this.stopRecording,\n      onFocus: this.focus,\n      onStop: this.stop,\n      modes: this.opts.modes,\n      supportsRecording: supportsMediaRecorder(),\n      recording: state.webcam.isRecording,\n      getSWFHTML: this.webcam.getSWFHTML,\n      src: this.streamSrc\n    }));\n  };\n\n  Webcam.prototype.install = function install() {\n    this.webcam.init();\n    this.core.setState({\n      webcam: {\n        cameraReady: false\n      }\n    });\n    var target = this.opts.target;\n    var plugin = this;\n    this.target = this.mount(target, plugin);\n  };\n\n  Webcam.prototype.uninstall = function uninstall() {\n    this.webcam.reset();\n    this.unmount();\n  };\n\n  return Webcam;\n}(Plugin);","map":null,"metadata":{},"sourceType":"script"}