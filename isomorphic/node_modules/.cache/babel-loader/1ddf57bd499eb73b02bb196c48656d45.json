{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\n// a little function to help us with reordering the result\nexport var reorder = function reorder(list, startIndex, endIndex) {\n  var result = Array.from(list);\n\n  var _result$splice = result.splice(startIndex, 1),\n      _result$splice2 = _slicedToArray(_result$splice, 1),\n      removed = _result$splice2[0];\n\n  result.splice(endIndex, 0, removed);\n  return result;\n};\nexport var reorderTasks = function reorderTasks(_ref) {\n  var _objectSpread3;\n\n  var columns = _ref.columns,\n      source = _ref.source,\n      destination = _ref.destination,\n      draggableId = _ref.draggableId;\n  var sourceColumn = columns[source.droppableId];\n  var sourceColumnTaskOrders = Array.from(columns[source.droppableId].task_orders);\n  var destinationColumn = columns[destination.droppableId];\n  var destinationColumnTaskOrders = Array.from(columns[destination.droppableId].task_orders); // moving to same list\n\n  if (source.droppableId === destination.droppableId) {\n    sourceColumnTaskOrders.splice(source.index, 1);\n    sourceColumnTaskOrders.splice(destination.index, 0, draggableId);\n\n    var _newColumns = _objectSpread({}, columns, _defineProperty({}, source.droppableId, _objectSpread({}, sourceColumn, {\n      task_orders: sourceColumnTaskOrders\n    })));\n\n    return _newColumns;\n  } // moving to different list\n  // remove from original\n\n\n  sourceColumnTaskOrders.splice(source.index, 1); // insert into next\n\n  destinationColumnTaskOrders.splice(destination.index, 0, draggableId);\n\n  var newColumns = _objectSpread({}, columns, (_objectSpread3 = {}, _defineProperty(_objectSpread3, source.droppableId, _objectSpread({}, sourceColumn, {\n    task_orders: sourceColumnTaskOrders\n  })), _defineProperty(_objectSpread3, destination.droppableId, _objectSpread({}, destinationColumn, {\n    task_orders: destinationColumnTaskOrders\n  })), _objectSpread3));\n\n  return newColumns;\n};","map":{"version":3,"sources":["C:\\Users\\USER\\Desktop\\vat\\isomorphic\\src\\helpers\\reorder.js"],"names":["reorder","list","startIndex","endIndex","result","Array","from","splice","removed","reorderTasks","columns","source","destination","draggableId","sourceColumn","droppableId","sourceColumnTaskOrders","task_orders","destinationColumn","destinationColumnTaskOrders","index","newColumns"],"mappings":";;;AAAA;AACA,OAAO,IAAMA,OAAO,GAAG,SAAVA,OAAU,CAACC,IAAD,EAAOC,UAAP,EAAmBC,QAAnB,EAAgC;AACrD,MAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAf;;AADqD,uBAEnCG,MAAM,CAACG,MAAP,CAAcL,UAAd,EAA0B,CAA1B,CAFmC;AAAA;AAAA,MAE9CM,OAF8C;;AAGrDJ,EAAAA,MAAM,CAACG,MAAP,CAAcJ,QAAd,EAAwB,CAAxB,EAA2BK,OAA3B;AAEA,SAAOJ,MAAP;AACD,CANM;AAQP,OAAO,IAAMK,YAAY,GAAG,SAAfA,YAAe,OAAmD;AAAA;;AAAA,MAAhDC,OAAgD,QAAhDA,OAAgD;AAAA,MAAvCC,MAAuC,QAAvCA,MAAuC;AAAA,MAA/BC,WAA+B,QAA/BA,WAA+B;AAAA,MAAlBC,WAAkB,QAAlBA,WAAkB;AAC7E,MAAMC,YAAY,GAAGJ,OAAO,CAACC,MAAM,CAACI,WAAR,CAA5B;AACA,MAAMC,sBAAsB,GAAGX,KAAK,CAACC,IAAN,CAC7BI,OAAO,CAACC,MAAM,CAACI,WAAR,CAAP,CAA4BE,WADC,CAA/B;AAGA,MAAMC,iBAAiB,GAAGR,OAAO,CAACE,WAAW,CAACG,WAAb,CAAjC;AACA,MAAMI,2BAA2B,GAAGd,KAAK,CAACC,IAAN,CAClCI,OAAO,CAACE,WAAW,CAACG,WAAb,CAAP,CAAiCE,WADC,CAApC,CAN6E,CAS7E;;AACA,MAAIN,MAAM,CAACI,WAAP,KAAuBH,WAAW,CAACG,WAAvC,EAAoD;AAClDC,IAAAA,sBAAsB,CAACT,MAAvB,CAA8BI,MAAM,CAACS,KAArC,EAA4C,CAA5C;AACAJ,IAAAA,sBAAsB,CAACT,MAAvB,CAA8BK,WAAW,CAACQ,KAA1C,EAAiD,CAAjD,EAAoDP,WAApD;;AAEA,QAAMQ,WAAU,qBACXX,OADW,sBAEbC,MAAM,CAACI,WAFM,oBAGTD,YAHS;AAIZG,MAAAA,WAAW,EAAED;AAJD,QAAhB;;AAOA,WAAOK,WAAP;AACD,GAtB4E,CAwB7E;AAEA;;;AACAL,EAAAA,sBAAsB,CAACT,MAAvB,CAA8BI,MAAM,CAACS,KAArC,EAA4C,CAA5C,EA3B6E,CA4B7E;;AACAD,EAAAA,2BAA2B,CAACZ,MAA5B,CAAmCK,WAAW,CAACQ,KAA/C,EAAsD,CAAtD,EAAyDP,WAAzD;;AAEA,MAAMQ,UAAU,qBACXX,OADW,wDAEbC,MAAM,CAACI,WAFM,oBAGTD,YAHS;AAIZG,IAAAA,WAAW,EAAED;AAJD,uCAMbJ,WAAW,CAACG,WANC,oBAOTG,iBAPS;AAQZD,IAAAA,WAAW,EAAEE;AARD,uBAAhB;;AAYA,SAAOE,UAAP;AACD,CA5CM","sourcesContent":["// a little function to help us with reordering the result\nexport const reorder = (list, startIndex, endIndex) => {\n  const result = Array.from(list);\n  const [removed] = result.splice(startIndex, 1);\n  result.splice(endIndex, 0, removed);\n\n  return result;\n};\n\nexport const reorderTasks = ({ columns, source, destination, draggableId }) => {\n  const sourceColumn = columns[source.droppableId];\n  const sourceColumnTaskOrders = Array.from(\n    columns[source.droppableId].task_orders\n  );\n  const destinationColumn = columns[destination.droppableId];\n  const destinationColumnTaskOrders = Array.from(\n    columns[destination.droppableId].task_orders\n  );\n  // moving to same list\n  if (source.droppableId === destination.droppableId) {\n    sourceColumnTaskOrders.splice(source.index, 1);\n    sourceColumnTaskOrders.splice(destination.index, 0, draggableId);\n\n    const newColumns = {\n      ...columns,\n      [source.droppableId]: {\n        ...sourceColumn,\n        task_orders: sourceColumnTaskOrders,\n      },\n    };\n    return newColumns;\n  }\n\n  // moving to different list\n\n  // remove from original\n  sourceColumnTaskOrders.splice(source.index, 1);\n  // insert into next\n  destinationColumnTaskOrders.splice(destination.index, 0, draggableId);\n\n  const newColumns = {\n    ...columns,\n    [source.droppableId]: {\n      ...sourceColumn,\n      task_orders: sourceColumnTaskOrders,\n    },\n    [destination.droppableId]: {\n      ...destinationColumn,\n      task_orders: destinationColumnTaskOrders,\n    },\n  };\n\n  return newColumns;\n};\n"]},"metadata":{},"sourceType":"module"}