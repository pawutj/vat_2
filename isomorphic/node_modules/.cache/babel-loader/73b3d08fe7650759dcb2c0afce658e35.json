{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _createConnector = require('../core/createConnector');\n\nvar _createConnector2 = _interopRequireDefault(_createConnector);\n\nvar _indexUtils = require('../core/indexUtils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction getId(props) {\n  return props.attributeName;\n}\n\nvar namespace = 'toggle';\n\nfunction getCurrentRefinement(props, searchState, context) {\n  return (0, _indexUtils.getCurrentRefinementValue)(props, searchState, context, namespace + '.' + getId(props), false, function (currentRefinement) {\n    if (currentRefinement) {\n      return currentRefinement;\n    }\n\n    return false;\n  });\n}\n\nfunction _refine(props, searchState, nextRefinement, context) {\n  var id = getId(props);\n\n  var nextValue = _defineProperty({}, id, nextRefinement ? nextRefinement : false);\n\n  var resetPage = true;\n  return (0, _indexUtils.refineValue)(searchState, nextValue, context, resetPage, namespace);\n}\n\nfunction _cleanUp(props, searchState, context) {\n  return (0, _indexUtils.cleanUpValue)(searchState, context, namespace + '.' + getId(props));\n}\n/**\n * connectToggle connector provides the logic to build a widget that will\n * provides an on/off filtering feature based on an attribute value.\n * @name connectToggle\n * @kind connector\n * @requirements To use this widget, you'll need an attribute to toggle on.\n *\n * You can't toggle on null or not-null values. If you want to address this particular use-case you'll need to compute an\n * extra boolean attribute saying if the value exists or not. See this [thread](https://discourse.algolia.com/t/how-to-create-a-toggle-for-the-absence-of-a-string-attribute/2460) for more details.\n *\n * @propType {string} attributeName - Name of the attribute on which to apply the `value` refinement. Required when `value` is present.\n * @propType {string} label - Label for the toggle.\n * @propType {string} value - Value of the refinement to apply on `attributeName`.\n * @propType {boolean} [defaultRefinement=false] - Default searchState of the widget. Should the toggle be checked by default?\n * @providedPropType {function} refine - a function to toggle a refinement\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {boolean} currentRefinement - `true` when the refinement is applied, `false` otherwise\n */\n\n\nexports.default = (0, _createConnector2.default)({\n  displayName: 'AlgoliaToggle',\n  propTypes: {\n    label: _propTypes2.default.string,\n    filter: _propTypes2.default.func,\n    attributeName: _propTypes2.default.string,\n    value: _propTypes2.default.any,\n    defaultRefinement: _propTypes2.default.bool\n  },\n  getProvidedProps: function getProvidedProps(props, searchState) {\n    var currentRefinement = getCurrentRefinement(props, searchState, this.context);\n    return {\n      currentRefinement: currentRefinement\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    return _refine(props, searchState, nextRefinement, this.context);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return _cleanUp(props, searchState, this.context);\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    var attributeName = props.attributeName,\n        value = props.value,\n        filter = props.filter;\n    var checked = getCurrentRefinement(props, searchState, this.context);\n\n    if (checked) {\n      if (attributeName) {\n        searchParameters = searchParameters.addFacet(attributeName).addFacetRefinement(attributeName, value);\n      }\n\n      if (filter) {\n        searchParameters = filter(searchParameters);\n      }\n    }\n\n    return searchParameters;\n  },\n  getMetadata: function getMetadata(props, searchState) {\n    var _this = this;\n\n    var id = getId(props);\n    var checked = getCurrentRefinement(props, searchState, this.context);\n    var items = [];\n    var index = (0, _indexUtils.getIndex)(this.context);\n\n    if (checked) {\n      items.push({\n        label: props.label,\n        currentRefinement: checked,\n        attributeName: props.attributeName,\n        value: function value(nextState) {\n          return _refine(props, nextState, false, _this.context);\n        }\n      });\n    }\n\n    return {\n      id: id,\n      index: index,\n      items: items\n    };\n  }\n});","map":null,"metadata":{},"sourceType":"script"}