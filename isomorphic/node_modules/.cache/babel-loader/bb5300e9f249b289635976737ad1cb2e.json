{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nvar NODE_LIST_CLASSES = {\n  '[object HTMLCollection]': true,\n  '[object NodeList]': true,\n  '[object RadioNodeList]': true\n}; // .type values for elements which can appear in .elements and should be ignored\n\nvar IGNORED_ELEMENT_TYPES = {\n  'button': true,\n  'fieldset': true,\n  // 'keygen': true,\n  // 'output': true,\n  'reset': true,\n  'submit': true\n};\nvar CHECKED_INPUT_TYPES = {\n  'checkbox': true,\n  'radio': true\n};\nvar TRIM_RE = /^\\s+|\\s+$/g;\nvar slice = Array.prototype.slice;\nvar toString = Object.prototype.toString;\n/**\n * @param {HTMLFormElement} form\n * @param {Object} options\n * @return {Object.<string,(string|Array.<string>)>} an object containing\n *   submittable value(s) held in the form's .elements collection, with\n *   properties named as per element names or ids.\n */\n\nfunction getFormData(form) {\n  var options = arguments.length <= 1 || arguments[1] === undefined ? {\n    trim: false\n  } : arguments[1];\n\n  if (!form) {\n    throw new Error('A form is required by getFormData, was given form=' + form);\n  }\n\n  var data = {};\n  var elementName = undefined;\n  var elementNames = [];\n  var elementNameLookup = {}; // Get unique submittable element names for the form\n\n  for (var i = 0, l = form.elements.length; i < l; i++) {\n    var element = form.elements[i];\n\n    if (IGNORED_ELEMENT_TYPES[element.type] || element.disabled) {\n      continue;\n    }\n\n    elementName = element.name || element.id;\n\n    if (elementName && !elementNameLookup[elementName]) {\n      elementNames.push(elementName);\n      elementNameLookup[elementName] = true;\n    }\n  } // Extract element data name-by-name for consistent handling of special cases\n  // around elements which contain multiple inputs.\n\n\n  for (var i = 0, l = elementNames.length; i < l; i++) {\n    elementName = elementNames[i];\n    var value = getNamedFormElementData(form, elementName, options);\n\n    if (value != null) {\n      data[elementName] = value;\n    }\n  }\n\n  return data;\n}\n/**\n * @param {HTMLFormElement} form\n * @param {string} elementName\n * @param {Object} options\n * @return {(string|Array.<string>)} submittable value(s) in the form for a\n *   named element from its .elements collection, or null if there was no\n *   element with that name or the element had no submittable value(s).\n */\n\n\nfunction getNamedFormElementData(form, elementName) {\n  var options = arguments.length <= 2 || arguments[2] === undefined ? {\n    trim: false\n  } : arguments[2];\n\n  if (!form) {\n    throw new Error('A form is required by getNamedFormElementData, was given form=' + form);\n  }\n\n  if (!elementName && toString.call(elementName) !== '[object String]') {\n    throw new Error('A form element name is required by getNamedFormElementData, was given elementName=' + elementName);\n  }\n\n  var element = form.elements[elementName];\n\n  if (!element || element.disabled) {\n    return null;\n  }\n\n  if (!NODE_LIST_CLASSES[toString.call(element)]) {\n    return getFormElementValue(element, options.trim);\n  } // Deal with multiple form controls which have the same name\n\n\n  var data = [];\n  var allRadios = true;\n\n  for (var i = 0, l = element.length; i < l; i++) {\n    if (element[i].disabled) {\n      continue;\n    }\n\n    if (allRadios && element[i].type !== 'radio') {\n      allRadios = false;\n    }\n\n    var value = getFormElementValue(element[i], options.trim);\n\n    if (value != null) {\n      data = data.concat(value);\n    }\n  } // Special case for an element with multiple same-named inputs which were all\n  // radio buttons: if there was a selected value, only return the value.\n\n\n  if (allRadios && data.length === 1) {\n    return data[0];\n  }\n\n  return data.length > 0 ? data : null;\n}\n/**\n * @param {HTMLElement} element a form element.\n * @param {booleam} trim should values for text entry inputs be trimmed?\n * @return {(string|Array.<string>|File|Array.<File>)} the element's submittable\n *   value(s), or null if it had none.\n */\n\n\nfunction getFormElementValue(element, trim) {\n  var value = null;\n  var type = element.type;\n\n  if (type === 'select-one') {\n    if (element.options.length) {\n      value = element.options[element.selectedIndex].value;\n    }\n\n    return value;\n  }\n\n  if (type === 'select-multiple') {\n    value = [];\n\n    for (var i = 0, l = element.options.length; i < l; i++) {\n      if (element.options[i].selected) {\n        value.push(element.options[i].value);\n      }\n    }\n\n    if (value.length === 0) {\n      value = null;\n    }\n\n    return value;\n  } // If a file input doesn't have a files attribute, fall through to using its\n  // value attribute.\n\n\n  if (type === 'file' && 'files' in element) {\n    if (element.multiple) {\n      value = slice.call(element.files);\n\n      if (value.length === 0) {\n        value = null;\n      }\n    } else {\n      // Should be null if not present, according to the spec\n      value = element.files[0];\n    }\n\n    return value;\n  }\n\n  if (!CHECKED_INPUT_TYPES[type]) {\n    value = trim ? element.value.replace(TRIM_RE, '') : element.value;\n  } else if (element.checked) {\n    value = element.value;\n  }\n\n  return value;\n}\n\ngetFormData.getNamedFormElementData = getNamedFormElementData;\nexports['default'] = getFormData;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}