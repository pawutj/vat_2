{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\src\\\\containers\\\\Chat\\\\chatrooms.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\"; // import Input from '../../components/uielements/input';\n\nimport AddNewUser from \"./addNewUser\";\nimport Scrollbars from \"../../components/utility/customScrollBar.js\";\nimport Button from \"../../components/uielements/button\";\nimport actions from \"../../redux/chat/actions\";\nimport { timeDifference } from \"../../helpers/utility\";\nimport HelperText from \"../../components/utility/helper-text\";\nimport { UserListsWrapper, UserLists, SidebarSearchBox, Input, ChatSidebar } from \"./message.style\";\n\nvar ChatRooms =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(ChatRooms, _Component);\n\n  function ChatRooms() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, ChatRooms);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(ChatRooms)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      value: \"\",\n      searchedChatRooms: _this.props.chatRooms\n    };\n\n    _this.onSearch = function (event) {\n      var value = event.target.value;\n      var searchedChatRooms = value ? [] : _this.props.chatRooms;\n\n      if (value) {\n        _this.props.chatRooms.forEach(function (chatRoom) {\n          if (chatRoom.otherUserInfo.name.toLowerCase().includes(value.toLowerCase())) {\n            searchedChatRooms.push(chatRoom);\n          }\n        });\n      }\n\n      _this.setState({\n        value: value,\n        searchedChatRooms: searchedChatRooms\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(ChatRooms, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState({\n        value: \"\",\n        searchedChatRooms: nextProps.chatRooms\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          users = _this$props.users,\n          setSelectedChatroom = _this$props.setSelectedChatroom,\n          selectedChatRoom = _this$props.selectedChatRoom,\n          toggleMobileList = _this$props.toggleMobileList,\n          toggleCompose = _this$props.toggleCompose;\n      var _this$state = this.state,\n          value = _this$state.value,\n          searchedChatRooms = _this$state.searchedChatRooms;\n\n      var singleChatRoom = function singleChatRoom(chatRoom, index) {\n        var otherUserInfo = chatRoom.otherUserInfo,\n            lastMessage = chatRoom.lastMessage,\n            lastMessageTime = chatRoom.lastMessageTime;\n        var name = otherUserInfo.name,\n            profileImageUrl = otherUserInfo.profileImageUrl;\n        var selected = selectedChatRoom.id === chatRoom.id;\n        var style = {\n          background: selected ? \"#f7f7f7\" : \"rgba(0,0,0,0)\"\n        };\n\n        var selectChatroom = function selectChatroom(event) {\n          event.stopPropagation();\n\n          if (!selected) {\n            setSelectedChatroom(chatRoom);\n          }\n\n          if (toggleMobileList) {\n            toggleMobileList(false);\n          }\n        };\n\n        return React.createElement(UserLists, {\n          key: index,\n          style: style,\n          onClick: selectChatroom,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 68\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"userListsGravatar\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 69\n          },\n          __self: this\n        }, React.createElement(\"img\", {\n          alt: \"#\",\n          style: {\n            width: 45,\n            height: 45\n          },\n          src: profileImageUrl,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"userListsContent\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 76\n          },\n          __self: this\n        }, React.createElement(\"h4\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 77\n          },\n          __self: this\n        }, name), React.createElement(\"div\", {\n          className: \"chatExcerpt\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 78\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 79\n          },\n          __self: this\n        }, lastMessage), React.createElement(\"span\", {\n          className: \"userListsTime\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80\n          },\n          __self: this\n        }, timeDifference(lastMessageTime)))));\n      };\n\n      return React.createElement(ChatSidebar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }, React.createElement(SidebarSearchBox, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Input, {\n        value: value,\n        onChange: this.onSearch,\n        placeholder: \"Search Contact\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }), React.createElement(AddNewUser, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      })), React.createElement(UserListsWrapper, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(Scrollbars, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, searchedChatRooms.length === 0 ? React.createElement(HelperText, {\n        text: \"No Conversation\",\n        className: \"messageHelperText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }) : searchedChatRooms.map(singleChatRoom))), users.length > 0 && React.createElement(\"div\", {\n        className: \"ComposeMessageButton\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: toggleCompose,\n        type: \"primary\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, \"Compose\")));\n    }\n  }]);\n\n  return ChatRooms;\n}(Component);\n\nfunction mapStateToProps(state) {\n  var _state$Chat = state.Chat,\n      users = _state$Chat.users,\n      chatRooms = _state$Chat.chatRooms,\n      openCompose = _state$Chat.openCompose,\n      selectedChatRoom = _state$Chat.selectedChatRoom;\n  var view = state.App.view;\n  return {\n    users: users,\n    chatRooms: chatRooms.filter(function (chatRoom) {\n      return chatRoom.lastMessageTime > 0;\n    }),\n    selectedChatRoom: view === \"DesktopView\" ? selectedChatRoom : {},\n    openCompose: openCompose\n  };\n}\n\nexport default connect(mapStateToProps, actions)(ChatRooms);","map":{"version":3,"sources":["C:\\Users\\USER\\Desktop\\vat\\isomorphic\\src\\containers\\Chat\\chatrooms.js"],"names":["React","Component","connect","AddNewUser","Scrollbars","Button","actions","timeDifference","HelperText","UserListsWrapper","UserLists","SidebarSearchBox","Input","ChatSidebar","ChatRooms","state","value","searchedChatRooms","props","chatRooms","onSearch","event","target","forEach","chatRoom","otherUserInfo","name","toLowerCase","includes","push","setState","nextProps","users","setSelectedChatroom","selectedChatRoom","toggleMobileList","toggleCompose","singleChatRoom","index","lastMessage","lastMessageTime","profileImageUrl","selected","id","style","background","selectChatroom","stopPropagation","width","height","length","map","mapStateToProps","Chat","openCompose","view","App","filter"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,UAAP,MAAuB,6CAAvB;AACA,OAAOC,MAAP,MAAmB,oCAAnB;AACA,OAAOC,OAAP,MAAoB,0BAApB;AACA,SAASC,cAAT,QAA+B,uBAA/B;AACA,OAAOC,UAAP,MAAuB,sCAAvB;AACA,SACEC,gBADF,EAEEC,SAFF,EAGEC,gBAHF,EAIEC,KAJF,EAKEC,WALF,QAMO,iBANP;;IAQMC,S;;;;;;;;;;;;;;;;;UACJC,K,GAAQ;AACNC,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,iBAAiB,EAAE,MAAKC,KAAL,CAAWC;AAFxB,K;;UAORC,Q,GAAW,UAAAC,KAAK,EAAI;AAClB,UAAML,KAAK,GAAGK,KAAK,CAACC,MAAN,CAAaN,KAA3B;AACA,UAAMC,iBAAiB,GAAGD,KAAK,GAAG,EAAH,GAAQ,MAAKE,KAAL,CAAWC,SAAlD;;AACA,UAAIH,KAAJ,EAAW;AACT,cAAKE,KAAL,CAAWC,SAAX,CAAqBI,OAArB,CAA6B,UAAAC,QAAQ,EAAI;AACvC,cACEA,QAAQ,CAACC,aAAT,CAAuBC,IAAvB,CACGC,WADH,GAEGC,QAFH,CAEYZ,KAAK,CAACW,WAAN,EAFZ,CADF,EAIE;AACAV,YAAAA,iBAAiB,CAACY,IAAlB,CAAuBL,QAAvB;AACD;AACF,SARD;AASD;;AACD,YAAKM,QAAL,CAAc;AAAEd,QAAAA,KAAK,EAALA,KAAF;AAASC,QAAAA,iBAAiB,EAAjBA;AAAT,OAAd;AACD,K;;;;;;;8CAlByBc,S,EAAW;AACnC,WAAKD,QAAL,CAAc;AAAEd,QAAAA,KAAK,EAAE,EAAT;AAAaC,QAAAA,iBAAiB,EAAEc,SAAS,CAACZ;AAA1C,OAAd;AACD;;;6BAiBQ;AAAA,wBAOH,KAAKD,KAPF;AAAA,UAELc,KAFK,eAELA,KAFK;AAAA,UAGLC,mBAHK,eAGLA,mBAHK;AAAA,UAILC,gBAJK,eAILA,gBAJK;AAAA,UAKLC,gBALK,eAKLA,gBALK;AAAA,UAMLC,aANK,eAMLA,aANK;AAAA,wBAQ8B,KAAKrB,KARnC;AAAA,UAQCC,KARD,eAQCA,KARD;AAAA,UAQQC,iBARR,eAQQA,iBARR;;AASP,UAAMoB,cAAc,GAAG,SAAjBA,cAAiB,CAACb,QAAD,EAAWc,KAAX,EAAqB;AAAA,YAClCb,aADkC,GACcD,QADd,CAClCC,aADkC;AAAA,YACnBc,WADmB,GACcf,QADd,CACnBe,WADmB;AAAA,YACNC,eADM,GACchB,QADd,CACNgB,eADM;AAAA,YAElCd,IAFkC,GAERD,aAFQ,CAElCC,IAFkC;AAAA,YAE5Be,eAF4B,GAERhB,aAFQ,CAE5BgB,eAF4B;AAG1C,YAAMC,QAAQ,GAAGR,gBAAgB,CAACS,EAAjB,KAAwBnB,QAAQ,CAACmB,EAAlD;AACA,YAAMC,KAAK,GAAG;AACZC,UAAAA,UAAU,EAAEH,QAAQ,GAAG,SAAH,GAAe;AADvB,SAAd;;AAGA,YAAMI,cAAc,GAAG,SAAjBA,cAAiB,CAAAzB,KAAK,EAAI;AAC9BA,UAAAA,KAAK,CAAC0B,eAAN;;AACA,cAAI,CAACL,QAAL,EAAe;AACbT,YAAAA,mBAAmB,CAACT,QAAD,CAAnB;AACD;;AACD,cAAIW,gBAAJ,EAAsB;AACpBA,YAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACD;AACF,SARD;;AASA,eACE,oBAAC,SAAD;AAAW,UAAA,GAAG,EAAEG,KAAhB;AAAuB,UAAA,KAAK,EAAEM,KAA9B;AAAqC,UAAA,OAAO,EAAEE,cAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAK,UAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AACE,UAAA,GAAG,EAAC,GADN;AAEE,UAAA,KAAK,EAAE;AAAEE,YAAAA,KAAK,EAAE,EAAT;AAAaC,YAAAA,MAAM,EAAE;AAArB,WAFT;AAGE,UAAA,GAAG,EAAER,eAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADF,EAQE;AAAK,UAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKf,IAAL,CADF,EAEE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAIa,WAAJ,CADF,EAEE;AAAM,UAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGhC,cAAc,CAACiC,eAAD,CADjB,CAFF,CAFF,CARF,CADF;AAoBD,OApCD;;AAqCA,aACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,KAAD;AACE,QAAA,KAAK,EAAExB,KADT;AAEE,QAAA,QAAQ,EAAE,KAAKI,QAFjB;AAGE,QAAA,WAAW,EAAC,gBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAME,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANF,CADF,EASE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGH,iBAAiB,CAACiC,MAAlB,KAA6B,CAA7B,GACC,oBAAC,UAAD;AACE,QAAA,IAAI,EAAC,iBADP;AAEE,QAAA,SAAS,EAAC,mBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD,GAMCjC,iBAAiB,CAACkC,GAAlB,CAAsBd,cAAtB,CAPJ,CADF,CATF,EAsBGL,KAAK,CAACkB,MAAN,GAAe,CAAf,IACC;AAAK,QAAA,SAAS,EAAC,sBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAEd,aAAjB;AAAgC,QAAA,IAAI,EAAC,SAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,CAvBJ,CADF;AAgCD;;;;EAtGqBnC,S;;AAwGxB,SAASmD,eAAT,CAAyBrC,KAAzB,EAAgC;AAAA,oBAC8BA,KAAK,CAACsC,IADpC;AAAA,MACtBrB,KADsB,eACtBA,KADsB;AAAA,MACfb,SADe,eACfA,SADe;AAAA,MACJmC,WADI,eACJA,WADI;AAAA,MACSpB,gBADT,eACSA,gBADT;AAAA,MAEtBqB,IAFsB,GAEbxC,KAAK,CAACyC,GAFO,CAEtBD,IAFsB;AAG9B,SAAO;AACLvB,IAAAA,KAAK,EAALA,KADK;AAELb,IAAAA,SAAS,EAAEA,SAAS,CAACsC,MAAV,CAAiB,UAAAjC,QAAQ;AAAA,aAAIA,QAAQ,CAACgB,eAAT,GAA2B,CAA/B;AAAA,KAAzB,CAFN;AAGLN,IAAAA,gBAAgB,EAAEqB,IAAI,KAAK,aAAT,GAAyBrB,gBAAzB,GAA4C,EAHzD;AAILoB,IAAAA,WAAW,EAAXA;AAJK,GAAP;AAMD;;AACD,eAAepD,OAAO,CAACkD,eAAD,EAAkB9C,OAAlB,CAAP,CAAkCQ,SAAlC,CAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\n// import Input from '../../components/uielements/input';\nimport AddNewUser from \"./addNewUser\";\nimport Scrollbars from \"../../components/utility/customScrollBar.js\";\nimport Button from \"../../components/uielements/button\";\nimport actions from \"../../redux/chat/actions\";\nimport { timeDifference } from \"../../helpers/utility\";\nimport HelperText from \"../../components/utility/helper-text\";\nimport {\n  UserListsWrapper,\n  UserLists,\n  SidebarSearchBox,\n  Input,\n  ChatSidebar\n} from \"./message.style\";\n\nclass ChatRooms extends Component {\n  state = {\n    value: \"\",\n    searchedChatRooms: this.props.chatRooms\n  };\n  componentWillReceiveProps(nextProps) {\n    this.setState({ value: \"\", searchedChatRooms: nextProps.chatRooms });\n  }\n  onSearch = event => {\n    const value = event.target.value;\n    const searchedChatRooms = value ? [] : this.props.chatRooms;\n    if (value) {\n      this.props.chatRooms.forEach(chatRoom => {\n        if (\n          chatRoom.otherUserInfo.name\n            .toLowerCase()\n            .includes(value.toLowerCase())\n        ) {\n          searchedChatRooms.push(chatRoom);\n        }\n      });\n    }\n    this.setState({ value, searchedChatRooms });\n  };\n  render() {\n    const {\n      users,\n      setSelectedChatroom,\n      selectedChatRoom,\n      toggleMobileList,\n      toggleCompose\n    } = this.props;\n    const { value, searchedChatRooms } = this.state;\n    const singleChatRoom = (chatRoom, index) => {\n      const { otherUserInfo, lastMessage, lastMessageTime } = chatRoom;\n      const { name, profileImageUrl } = otherUserInfo;\n      const selected = selectedChatRoom.id === chatRoom.id;\n      const style = {\n        background: selected ? \"#f7f7f7\" : \"rgba(0,0,0,0)\"\n      };\n      const selectChatroom = event => {\n        event.stopPropagation();\n        if (!selected) {\n          setSelectedChatroom(chatRoom);\n        }\n        if (toggleMobileList) {\n          toggleMobileList(false);\n        }\n      };\n      return (\n        <UserLists key={index} style={style} onClick={selectChatroom}>\n          <div className=\"userListsGravatar\">\n            <img\n              alt=\"#\"\n              style={{ width: 45, height: 45 }}\n              src={profileImageUrl}\n            />\n          </div>\n          <div className=\"userListsContent\">\n            <h4>{name}</h4>\n            <div className=\"chatExcerpt\">\n              <p>{lastMessage}</p>\n              <span className=\"userListsTime\">\n                {timeDifference(lastMessageTime)}\n              </span>\n            </div>\n          </div>\n        </UserLists>\n      );\n    };\n    return (\n      <ChatSidebar>\n        <SidebarSearchBox>\n          <Input\n            value={value}\n            onChange={this.onSearch}\n            placeholder=\"Search Contact\"\n          />\n          <AddNewUser />\n        </SidebarSearchBox>\n        <UserListsWrapper>\n          <Scrollbars>\n            {searchedChatRooms.length === 0 ? (\n              <HelperText\n                text=\"No Conversation\"\n                className=\"messageHelperText\"\n              />\n            ) : (\n              searchedChatRooms.map(singleChatRoom)\n            )}\n          </Scrollbars>\n        </UserListsWrapper>\n\n        {users.length > 0 && (\n          <div className=\"ComposeMessageButton\">\n            <Button onClick={toggleCompose} type=\"primary\">\n              Compose\n            </Button>\n          </div>\n        )}\n      </ChatSidebar>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  const { users, chatRooms, openCompose, selectedChatRoom } = state.Chat;\n  const { view } = state.App;\n  return {\n    users,\n    chatRooms: chatRooms.filter(chatRoom => chatRoom.lastMessageTime > 0),\n    selectedChatRoom: view === \"DesktopView\" ? selectedChatRoom : {},\n    openCompose\n  };\n}\nexport default connect(mapStateToProps, actions)(ChatRooms);\n"]},"metadata":{},"sourceType":"module"}