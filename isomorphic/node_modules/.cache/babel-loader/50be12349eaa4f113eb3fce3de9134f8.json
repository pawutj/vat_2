{"ast":null,"code":"var bel = require('bel'); // turns template tag into DOM elements\n\n\nvar morphdom = require('morphdom'); // efficiently diffs + morphs two DOM elements\n\n\nvar defaultEvents = require('./update-events.js'); // default events to be copied when dom elements update\n\n\nmodule.exports = bel; // TODO move this + defaultEvents to a new module once we receive more feedback\n\nmodule.exports.update = function (fromNode, toNode, opts) {\n  if (!opts) opts = {};\n\n  if (opts.events !== false) {\n    if (!opts.onBeforeElUpdated) opts.onBeforeElUpdated = copier;\n  }\n\n  return morphdom(fromNode, toNode, opts); // morphdom only copies attributes. we decided we also wanted to copy events\n  // that can be set via attributes\n\n  function copier(f, t) {\n    // copy events:\n    var events = opts.events || defaultEvents;\n\n    for (var i = 0; i < events.length; i++) {\n      var ev = events[i];\n\n      if (t[ev]) {\n        // if new element has a whitelisted attribute\n        f[ev] = t[ev]; // update existing element\n      } else if (f[ev]) {\n        // if existing element has it and new one doesnt\n        f[ev] = undefined; // remove it from existing element\n      }\n    }\n\n    var oldValue = f.value;\n    var newValue = t.value; // copy values for form elements\n\n    if (f.nodeName === 'INPUT' && f.type !== 'file' || f.nodeName === 'SELECT') {\n      if (!newValue) {\n        t.value = f.value;\n      } else if (newValue !== oldValue) {\n        f.value = newValue;\n      }\n    } else if (f.nodeName === 'TEXTAREA') {\n      if (t.getAttribute('value') === null) f.value = t.value;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}