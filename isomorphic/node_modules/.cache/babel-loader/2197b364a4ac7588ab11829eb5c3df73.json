{"ast":null,"code":"'use strict';\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * Translates strings with interpolation & pluralization support.\n * Extensible with custom dictionaries and pluralization functions.\n *\n * Borrows heavily from and inspired by Polyglot https://github.com/airbnb/polyglot.js,\n * basically a stripped-down version of it. Differences: pluralization functions are not hardcoded\n * and can be easily added among with dictionaries, nested objects are used for pluralization\n * as opposed to `||||` delimeter\n *\n * Usage example: `translator.translate('files_chosen', {smart_count: 3})`\n *\n * @param {object} opts\n */\n\n\nmodule.exports = function () {\n  function Translator(opts) {\n    _classCallCheck(this, Translator);\n\n    var defaultOptions = {\n      locale: {\n        strings: {},\n        pluralize: function pluralize(n) {\n          if (n === 1) {\n            return 0;\n          }\n\n          return 1;\n        }\n      }\n    };\n    this.opts = _extends({}, defaultOptions, opts);\n    this.locale = _extends({}, defaultOptions.locale, opts.locale // console.log(this.opts.locale)\n    // this.locale.pluralize = this.locale ? this.locale.pluralize : defaultPluralize\n    // this.locale.strings = Object.assign({}, en_US.strings, this.opts.locale.strings)\n    );\n  }\n  /**\n   * Takes a string with placeholder variables like `%{smart_count} file selected`\n   * and replaces it with values from options `{smart_count: 5}`\n   *\n   * @license https://github.com/airbnb/polyglot.js/blob/master/LICENSE\n   * taken from https://github.com/airbnb/polyglot.js/blob/master/lib/polyglot.js#L299\n   *\n   * @param {string} phrase that needs interpolation, with placeholders\n   * @param {object} options with values that will be used to replace placeholders\n   * @return {string} interpolated\n   */\n\n\n  Translator.prototype.interpolate = function interpolate(phrase, options) {\n    var replace = String.prototype.replace;\n    var dollarRegex = /\\$/g;\n    var dollarBillsYall = '$$$$';\n\n    for (var arg in options) {\n      if (arg !== '_' && options.hasOwnProperty(arg)) {\n        // Ensure replacement value is escaped to prevent special $-prefixed\n        // regex replace tokens. the \"$$$$\" is needed because each \"$\" needs to\n        // be escaped with \"$\" itself, and we need two in the resulting output.\n        var replacement = options[arg];\n\n        if (typeof replacement === 'string') {\n          replacement = replace.call(options[arg], dollarRegex, dollarBillsYall);\n        } // We create a new `RegExp` each time instead of using a more-efficient\n        // string replace so that the same argument can be replaced multiple times\n        // in the same phrase.\n\n\n        phrase = replace.call(phrase, new RegExp('%\\\\{' + arg + '\\\\}', 'g'), replacement);\n      }\n    }\n\n    return phrase;\n  };\n  /**\n   * Public translate method\n   *\n   * @param {string} key\n   * @param {object} options with values that will be used later to replace placeholders in string\n   * @return {string} translated (and interpolated)\n   */\n\n\n  Translator.prototype.translate = function translate(key, options) {\n    if (options && options.smart_count) {\n      var plural = this.locale.pluralize(options.smart_count);\n      return this.interpolate(this.opts.locale.strings[key][plural], options);\n    }\n\n    return this.interpolate(this.opts.locale.strings[key], options);\n  };\n\n  return Translator;\n}();","map":null,"metadata":{},"sourceType":"script"}