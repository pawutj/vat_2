{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\vat\\\\isomorphic\\\\src\\\\containers\\\\ScrumBoard\\\\Task\\\\TaskCreateOrUpdate\\\\TaskCreateOrUpdate.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Formik } from 'formik';\nimport moment from 'moment';\nimport uuidV4 from 'uuid/v4';\nimport RenderTaskForm from './RenderCreateTaskForm/RenderCreateTaskForm';\nimport { dateFormat } from '../../../../components/ScrumBoard/FieldFormats';\nimport scrumBoardActions from '../../../../redux/scrumBoard/actions';\nimport { CreateTaskWrapper } from './TaskCreateOrUpdate.style';\nvar initialValues = {\n  id: '',\n  title: '',\n  description: '',\n  labels: [],\n  assignees: [],\n  attachments: [],\n  comments: [],\n  todos: [],\n  column_id: '',\n  editing: false,\n  created_at: moment(Date.now()),\n  updated_at: moment(Date.now()),\n  due_date: moment(Date.now()),\n  selectOptions: ['success', 'error', 'processing', 'warning', 'default'],\n  selectAssignees: ['Mark', 'Bob', 'Anthony']\n};\n\nvar TaskForm = function TaskForm(props) {\n  var initials = _objectSpread({}, initialValues, props.initials, {\n    due_date: moment(props.initials && props.initials.due_date ? props.initials.due_date : Date.now()),\n    updated_at: moment(Date.now())\n  });\n\n  var handleSubmit = function handleSubmit(formProps) {\n    if (!formProps.editing) {\n      formProps.id = uuidV4();\n      formProps.column_id = props.columnId;\n      formProps.editing = false;\n      formProps.created_at = moment(formProps.created_at).format(dateFormat).toString();\n    }\n\n    props.createOrUpdateTaskWatcher(_objectSpread({}, formProps, {\n      due_date: moment(formProps.due_date).format(dateFormat).toString(),\n      updated_at: moment(formProps.updated_at).format(dateFormat).toString()\n    }));\n    props.closeDrawer();\n  };\n\n  return React.createElement(CreateTaskWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Formik, {\n    initialValues: initials,\n    onSubmit: handleSubmit,\n    render: function render(formikProps) {\n      return React.createElement(RenderTaskForm, Object.assign({}, formikProps, {\n        onCancel: props.closeDrawer,\n        onDelete: function onDelete() {\n          props.deleteTask({\n            taskId: props.initials.id,\n            column_id: props.columnId\n          });\n          props.closeDrawer();\n        },\n        onEditCancel: function onEditCancel() {\n          props.cancelEditTask(props.initials);\n          props.openDrawer({\n            drawerType: 'CARD_DETAILS',\n            drawerProps: {\n              task: _objectSpread({}, props.initials),\n              columnId: props.columnId\n            }\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }));\n};\n\nexport default connect(null, _objectSpread({}, scrumBoardActions))(TaskForm);","map":{"version":3,"sources":["C:\\Users\\USER\\Desktop\\vat\\isomorphic\\src\\containers\\ScrumBoard\\Task\\TaskCreateOrUpdate\\TaskCreateOrUpdate.js"],"names":["React","connect","Formik","moment","uuidV4","RenderTaskForm","dateFormat","scrumBoardActions","CreateTaskWrapper","initialValues","id","title","description","labels","assignees","attachments","comments","todos","column_id","editing","created_at","Date","now","updated_at","due_date","selectOptions","selectAssignees","TaskForm","props","initials","handleSubmit","formProps","columnId","format","toString","createOrUpdateTaskWatcher","closeDrawer","formikProps","deleteTask","taskId","cancelEditTask","openDrawer","drawerType","drawerProps","task"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Formik } from 'formik';\nimport moment from 'moment';\nimport uuidV4 from 'uuid/v4';\nimport RenderTaskForm from './RenderCreateTaskForm/RenderCreateTaskForm';\nimport { dateFormat } from '../../../../components/ScrumBoard/FieldFormats';\nimport scrumBoardActions from '../../../../redux/scrumBoard/actions';\nimport { CreateTaskWrapper } from './TaskCreateOrUpdate.style';\n\nconst initialValues = {\n  id: '',\n  title: '',\n  description: '',\n  labels: [],\n  assignees: [],\n  attachments: [],\n  comments: [],\n  todos: [],\n  column_id: '',\n  editing: false,\n  created_at: moment(Date.now()),\n  updated_at: moment(Date.now()),\n  due_date: moment(Date.now()),\n  selectOptions: ['success', 'error', 'processing', 'warning', 'default'],\n  selectAssignees: ['Mark', 'Bob', 'Anthony'],\n};\n\nconst TaskForm = props => {\n  const initials = {\n    ...initialValues,\n    ...props.initials,\n    due_date: moment(\n      props.initials && props.initials.due_date\n        ? props.initials.due_date\n        : Date.now()\n    ),\n    updated_at: moment(Date.now()),\n  };\n\n  const handleSubmit = formProps => {\n    if (!formProps.editing) {\n      formProps.id = uuidV4();\n      formProps.column_id = props.columnId;\n      formProps.editing = false;\n      formProps.created_at = moment(formProps.created_at)\n        .format(dateFormat)\n        .toString();\n    }\n\n    props.createOrUpdateTaskWatcher({\n      ...formProps,\n      due_date: moment(formProps.due_date)\n        .format(dateFormat)\n        .toString(),\n      updated_at: moment(formProps.updated_at)\n        .format(dateFormat)\n        .toString(),\n    });\n    props.closeDrawer();\n  };\n\n  return (\n    <CreateTaskWrapper>\n      <Formik\n        initialValues={initials}\n        onSubmit={handleSubmit}\n        render={formikProps => (\n          <RenderTaskForm\n            {...formikProps}\n            onCancel={props.closeDrawer}\n            onDelete={() => {\n              props.deleteTask({\n                taskId: props.initials.id,\n                column_id: props.columnId,\n              });\n              props.closeDrawer();\n            }}\n            onEditCancel={() => {\n              props.cancelEditTask(props.initials);\n              props.openDrawer({\n                drawerType: 'CARD_DETAILS',\n                drawerProps: {\n                  task: { ...props.initials },\n                  columnId: props.columnId,\n                },\n              });\n            }}\n          />\n        )}\n      />\n    </CreateTaskWrapper>\n  );\n};\nexport default connect(\n  null,\n  {\n    ...scrumBoardActions,\n  }\n)(TaskForm);\n"]},"metadata":{},"sourceType":"module"}