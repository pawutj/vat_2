{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.getRef = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _effects = require(\"redux-saga/effects\");\n\nvar _marked =\n/*#__PURE__*/\n_regenerator.default.mark(getDownloadURL),\n    _marked2 =\n/*#__PURE__*/\n_regenerator.default.mark(getFileMetadata),\n    _marked3 =\n/*#__PURE__*/\n_regenerator.default.mark(updateFileMetadata),\n    _marked4 =\n/*#__PURE__*/\n_regenerator.default.mark(deleteFile);\n\nvar getRef = function getRef(rsf, pathOrRef) {\n  return typeof pathOrRef === 'string' ? rsf.app.storage().ref(pathOrRef) : pathOrRef;\n};\n\nexports.getRef = getRef;\n\nfunction uploadFile(pathOrRef, file, metadata) {\n  var ref = getRef(this, pathOrRef);\n  var task = ref.put(file, metadata);\n  return task;\n}\n\nfunction uploadString(pathOrRef, string, format, metadata) {\n  var ref = getRef(this, pathOrRef);\n  var task = ref.putString(string, format, metadata);\n  return task;\n}\n\nfunction getDownloadURL(pathOrRef) {\n  var ref, url;\n  return _regenerator.default.wrap(function getDownloadURL$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          ref = getRef(this, pathOrRef);\n          _context.next = 3;\n          return (0, _effects.call)([ref, ref.getDownloadURL]);\n\n        case 3:\n          url = _context.sent;\n          return _context.abrupt(\"return\", url);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, this);\n}\n\nfunction getFileMetadata(pathOrRef) {\n  var ref, metadata;\n  return _regenerator.default.wrap(function getFileMetadata$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          ref = getRef(this, pathOrRef);\n          _context2.next = 3;\n          return (0, _effects.call)([ref, ref.getMetadata]);\n\n        case 3:\n          metadata = _context2.sent;\n          return _context2.abrupt(\"return\", metadata);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, this);\n}\n\nfunction updateFileMetadata(pathOrRef, newMetadata) {\n  var ref, metadata;\n  return _regenerator.default.wrap(function updateFileMetadata$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          ref = getRef(this, pathOrRef);\n          _context3.next = 3;\n          return (0, _effects.call)([ref, ref.updateMetadata], newMetadata);\n\n        case 3:\n          metadata = _context3.sent;\n          return _context3.abrupt(\"return\", metadata);\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, this);\n}\n\nfunction deleteFile(pathOrRef) {\n  var ref;\n  return _regenerator.default.wrap(function deleteFile$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          ref = getRef(this, pathOrRef);\n          _context4.next = 3;\n          return (0, _effects.call)([ref, ref.delete]);\n\n        case 3:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, this);\n}\n\nvar _default = {\n  uploadFile: uploadFile,\n  uploadString: uploadString,\n  getDownloadURL: getDownloadURL,\n  getFileMetadata: getFileMetadata,\n  updateFileMetadata: updateFileMetadata,\n  deleteFile: deleteFile\n};\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}