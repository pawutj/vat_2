{"ast":null,"code":"\"use strict\";\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require(\"react-dom\");\n\nvar _reactDom2 = _interopRequireDefault(_reactDom);\n\nvar _reactDnd = require(\"react-dnd\");\n\nvar _reactDndHtml5Backend = require(\"react-dnd-html5-backend\");\n\nvar _reactDndHtml5Backend2 = _interopRequireDefault(_reactDndHtml5Backend);\n\nvar _Suggestions = require(\"./Suggestions\");\n\nvar _Suggestions2 = _interopRequireDefault(_Suggestions);\n\nvar _propTypes = require(\"prop-types\");\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _Tag = require(\"./Tag\");\n\nvar _Tag2 = _interopRequireDefault(_Tag);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // Constants\n\n\nvar Keys = {\n  ENTER: 13,\n  TAB: 9,\n  BACKSPACE: 8,\n  UP_ARROW: 38,\n  DOWN_ARROW: 40,\n  ESCAPE: 27\n};\nvar DEFAULT_PLACEHOLDER = \"Add new tag\";\nvar DefaultClassNames = {\n  tags: \"ReactTags__tags\",\n  tagInput: \"ReactTags__tagInput\",\n  tagInputField: \"ReactTags__tagInputField\",\n  selected: \"ReactTags__selected\",\n  tag: \"ReactTags__tag\",\n  remove: \"ReactTags__remove\",\n  suggestions: \"ReactTags__suggestions\",\n  activeSuggestion: \"ReactTags__activeSuggestion\"\n};\n\nvar ReactTags = function (_Component) {\n  _inherits(ReactTags, _Component);\n\n  function ReactTags(props) {\n    _classCallCheck(this, ReactTags);\n\n    var _this = _possibleConstructorReturn(this, (ReactTags.__proto__ || Object.getPrototypeOf(ReactTags)).call(this, props));\n\n    _this.state = {\n      suggestions: _this.props.suggestions,\n      query: \"\",\n      isFocused: false,\n      selectedIndex: -1,\n      selectionMode: false\n    };\n    _this.handleFocus = _this.handleFocus.bind(_this);\n    _this.handleBlur = _this.handleBlur.bind(_this);\n    _this.handleKeyDown = _this.handleKeyDown.bind(_this);\n    _this.handleChange = _this.handleChange.bind(_this);\n    _this.moveTag = _this.moveTag.bind(_this);\n    _this.handlePaste = _this.handlePaste.bind(_this);\n    _this.resetAndFocusInput = _this.resetAndFocusInput.bind(_this);\n    _this.handleSuggestionHover = _this.handleSuggestionHover.bind(_this);\n    _this.handleSuggestionClick = _this.handleSuggestionClick.bind(_this);\n    return _this;\n  }\n\n  _createClass(ReactTags, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        classNames: _extends({}, DefaultClassNames, this.props.classNames)\n      });\n    }\n  }, {\n    key: \"resetAndFocusInput\",\n    value: function resetAndFocusInput() {\n      this.setState({\n        query: \"\"\n      });\n      this.textInput.value = \"\";\n      this.textInput.focus();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _props = this.props,\n          autofocus = _props.autofocus,\n          readOnly = _props.readOnly;\n\n      if (autofocus && !readOnly) {\n        this.resetAndFocusInput();\n      }\n    }\n  }, {\n    key: \"filteredSuggestions\",\n    value: function filteredSuggestions(query, suggestions) {\n      if (this.props.handleFilterSuggestions) {\n        return this.props.handleFilterSuggestions(query, suggestions);\n      }\n\n      return suggestions.filter(function (item) {\n        return item.toLowerCase().indexOf(query.toLowerCase()) === 0;\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(props) {\n      var suggestions = this.filteredSuggestions(this.state.query, props.suggestions);\n      this.setState({\n        suggestions: suggestions,\n        classNames: _extends({}, DefaultClassNames, props.classNames)\n      });\n    }\n  }, {\n    key: \"handleDelete\",\n    value: function handleDelete(i, e) {\n      this.props.handleDelete(i, e);\n\n      if (!this.props.resetInputOnDelete) {\n        this.textInput.focus();\n      } else {\n        this.resetAndFocusInput();\n      }\n\n      e.stopPropagation();\n    }\n  }, {\n    key: \"handleTagClick\",\n    value: function handleTagClick(i, e) {\n      if (this.props.handleTagClick) {\n        this.props.handleTagClick(i, e);\n      }\n\n      if (!this.props.resetInputOnDelete) {\n        this.textInput.focus();\n      } else {\n        this.resetAndFocusInput();\n      }\n    }\n  }, {\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      if (this.props.handleInputChange) {\n        this.props.handleInputChange(e.target.value.trim());\n      }\n\n      var query = e.target.value.trim();\n      var suggestions = this.filteredSuggestions(query, this.props.suggestions);\n      var selectedIndex = this.state.selectedIndex;\n\n      if (selectedIndex >= suggestions.length) {\n        selectedIndex = suggestions.length - 1;\n      }\n\n      this.setState({\n        query: query,\n        suggestions: suggestions,\n        selectedIndex: selectedIndex\n      });\n    }\n  }, {\n    key: \"handleFocus\",\n    value: function handleFocus(e) {\n      var value = e.target.value.trim();\n\n      if (this.props.handleInputFocus) {\n        this.props.handleInputFocus(value);\n      }\n\n      this.setState({\n        isFocused: true\n      });\n    }\n  }, {\n    key: \"handleBlur\",\n    value: function handleBlur(e) {\n      var value = e.target.value.trim();\n\n      if (this.props.handleInputBlur) {\n        this.props.handleInputBlur(value);\n        this.textInput.value = \"\";\n      }\n\n      this.setState({\n        isFocused: false\n      });\n    }\n  }, {\n    key: \"handleKeyDown\",\n    value: function handleKeyDown(e) {\n      var _state = this.state,\n          query = _state.query,\n          selectedIndex = _state.selectedIndex,\n          suggestions = _state.suggestions; // hide suggestions menu on escape\n\n      if (e.keyCode === Keys.ESCAPE) {\n        e.preventDefault();\n        e.stopPropagation();\n        this.setState({\n          selectedIndex: -1,\n          selectionMode: false,\n          suggestions: []\n        });\n      } // When one of the terminating keys is pressed, add current query to the tags.\n      // If no text is typed in so far, ignore the action - so we don't end up with a terminating\n      // character typed in.\n\n\n      if (this.props.delimiters.indexOf(e.keyCode) !== -1 && !e.shiftKey) {\n        if (e.keyCode !== Keys.TAB || query !== \"\") {\n          e.preventDefault();\n        }\n\n        if (this.state.selectionMode && this.state.selectedIndex != -1) {\n          query = this.state.suggestions[this.state.selectedIndex];\n        }\n\n        if (query !== \"\") {\n          this.addTag(query);\n        }\n      } // when backspace key is pressed and query is blank, delete tag\n\n\n      if (e.keyCode === Keys.BACKSPACE && query == \"\" && this.props.allowDeleteFromEmptyInput) {\n        this.handleDelete(this.props.tags.length - 1, e);\n      } // up arrow\n\n\n      if (e.keyCode === Keys.UP_ARROW) {\n        e.preventDefault();\n        var _state2 = this.state,\n            _selectedIndex = _state2.selectedIndex,\n            _suggestions = _state2.suggestions;\n        _selectedIndex = _selectedIndex <= 0 ? _suggestions.length - 1 : _selectedIndex - 1;\n        this.setState({\n          selectedIndex: _selectedIndex,\n          selectionMode: true\n        });\n      } // down arrow\n\n\n      if (e.keyCode === Keys.DOWN_ARROW) {\n        e.preventDefault();\n        var newSelectedIndex = suggestions.length === 0 ? -1 : (selectedIndex + 1) % suggestions.length;\n        this.setState({\n          selectedIndex: newSelectedIndex,\n          selectionMode: true\n        });\n      }\n    }\n  }, {\n    key: \"handlePaste\",\n    value: function handlePaste(e) {\n      var _this2 = this;\n\n      if (!this.props.allowAdditionFromPaste) {\n        return;\n      }\n\n      e.preventDefault(); // See: http://stackoverflow.com/a/6969486/1463681\n\n      var escapeRegex = function escapeRegex(str) {\n        return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n      }; // Used to determine how the pasted content is split.\n\n\n      var delimiterChars = escapeRegex(this.props.delimiters.map(function (delimiter) {\n        // See: http://stackoverflow.com/a/34711175/1463681\n        var chrCode = delimiter - 48 * Math.floor(delimiter / 48);\n        return String.fromCharCode(96 <= delimiter ? chrCode : delimiter);\n      }).join(\"\"));\n      var clipboardData = e.clipboardData || window.clipboardData;\n      var string = clipboardData.getData(\"text\");\n      var regExp = new RegExp(\"[\" + delimiterChars + \"]+\");\n      string.split(regExp).forEach(function (tag) {\n        return _this2.props.handleAddition(tag);\n      });\n    }\n  }, {\n    key: \"addTag\",\n    value: function addTag(tag) {\n      var tags = this.props.tags;\n      var existingTags = tags.map(function (tag) {\n        return tag.text.toLowerCase();\n      }); // Return if tag has been already added\n\n      if (existingTags.indexOf(tag.toLowerCase()) >= 0) {\n        return;\n      }\n\n      if (this.props.autocomplete) {\n        var possibleMatches = this.filteredSuggestions(tag, this.props.suggestions);\n\n        if (this.props.autocomplete === 1 && possibleMatches.length === 1 || this.props.autocomplete === true && possibleMatches.length) {\n          tag = possibleMatches[0];\n        }\n      } // call method to add\n\n\n      this.props.handleAddition(tag); // reset the state\n\n      this.setState({\n        query: \"\",\n        selectionMode: false,\n        selectedIndex: -1\n      });\n      this.resetAndFocusInput();\n    }\n  }, {\n    key: \"handleSuggestionClick\",\n    value: function handleSuggestionClick(i, e) {\n      this.addTag(this.state.suggestions[i]);\n    }\n  }, {\n    key: \"handleSuggestionHover\",\n    value: function handleSuggestionHover(i, e) {\n      this.setState({\n        selectedIndex: i,\n        selectionMode: true\n      });\n    }\n  }, {\n    key: \"moveTag\",\n    value: function moveTag(dragIndex, hoverIndex) {\n      var tags = this.props.tags; // locate tags\n\n      var dragTag = tags[dragIndex]; // call handler with the index of the dragged tag\n      // and the tag that is hovered\n\n      this.props.handleDrag(dragTag, dragIndex, hoverIndex);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var moveTag = this.props.handleDrag ? this.moveTag : null;\n      var tagItems = this.props.tags.map(function (tag, i) {\n        return _react2.default.createElement(_Tag2.default, {\n          key: tag.id ? tag.id : i,\n          index: i,\n          tag: tag,\n          labelField: this.props.labelField,\n          onDelete: this.handleDelete.bind(this, i),\n          moveTag: moveTag,\n          removeComponent: this.props.removeComponent,\n          onTagClicked: this.handleTagClick.bind(this, i),\n          readOnly: this.props.readOnly,\n          classNames: this.state.classNames\n        });\n      }.bind(this)); // get the suggestions for the given query\n\n      var query = this.state.query.trim(),\n          selectedIndex = this.state.selectedIndex,\n          suggestions = this.state.suggestions,\n          placeholder = this.props.placeholder,\n          inputName = this.props.name,\n          inputId = this.props.id,\n          maxLength = this.props.maxLength;\n      var tagInput = !this.props.readOnly ? _react2.default.createElement(\"div\", {\n        className: this.state.classNames.tagInput\n      }, _react2.default.createElement(\"input\", {\n        ref: function ref(input) {\n          _this3.textInput = input;\n        },\n        className: this.state.classNames.tagInputField,\n        type: \"text\",\n        placeholder: placeholder,\n        \"aria-label\": placeholder,\n        onFocus: this.handleFocus,\n        onBlur: this.handleBlur,\n        onChange: this.handleChange,\n        onKeyDown: this.handleKeyDown,\n        onPaste: this.handlePaste,\n        name: inputName,\n        id: inputId,\n        maxLength: maxLength,\n        value: this.props.inputValue\n      }), _react2.default.createElement(_Suggestions2.default, {\n        query: query,\n        suggestions: suggestions,\n        selectedIndex: selectedIndex,\n        handleClick: this.handleSuggestionClick,\n        handleHover: this.handleSuggestionHover,\n        minQueryLength: this.props.minQueryLength,\n        shouldRenderSuggestions: this.props.shouldRenderSuggestions,\n        isFocused: this.state.isFocused,\n        classNames: this.state.classNames\n      })) : null;\n      return _react2.default.createElement(\"div\", {\n        className: this.state.classNames.tags\n      }, _react2.default.createElement(\"div\", {\n        className: this.state.classNames.selected\n      }, tagItems, this.props.inline && tagInput), !this.props.inline && tagInput);\n    }\n  }]);\n\n  return ReactTags;\n}(_react.Component);\n\nReactTags.propTypes = {\n  placeholder: _propTypes2.default.string,\n  labelField: _propTypes2.default.string,\n  suggestions: _propTypes2.default.array,\n  delimiters: _propTypes2.default.array,\n  autofocus: _propTypes2.default.bool,\n  inline: _propTypes2.default.bool,\n  handleDelete: _propTypes2.default.func.isRequired,\n  handleAddition: _propTypes2.default.func.isRequired,\n  handleDrag: _propTypes2.default.func,\n  handleFilterSuggestions: _propTypes2.default.func,\n  handleTagClick: _propTypes2.default.func,\n  allowDeleteFromEmptyInput: _propTypes2.default.bool,\n  allowAdditionFromPaste: _propTypes2.default.bool,\n  resetInputOnDelete: _propTypes2.default.bool,\n  handleInputChange: _propTypes2.default.func,\n  handleInputFocus: _propTypes2.default.func,\n  handleInputBlur: _propTypes2.default.func,\n  minQueryLength: _propTypes2.default.number,\n  shouldRenderSuggestions: _propTypes2.default.func,\n  removeComponent: _propTypes2.default.func,\n  autocomplete: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.number]),\n  readOnly: _propTypes2.default.bool,\n  classNames: _propTypes2.default.object,\n  name: _propTypes2.default.string,\n  id: _propTypes2.default.string,\n  maxLength: _propTypes2.default.string,\n  inputValue: _propTypes2.default.string\n};\nReactTags.defaultProps = {\n  placeholder: DEFAULT_PLACEHOLDER,\n  tags: [],\n  suggestions: [],\n  delimiters: [Keys.ENTER, Keys.TAB],\n  autofocus: true,\n  inline: true,\n  allowDeleteFromEmptyInput: true,\n  allowAdditionFromPaste: true,\n  resetInputOnDelete: true,\n  minQueryLength: 2,\n  autocomplete: false,\n  readOnly: false\n};\nmodule.exports = {\n  WithContext: (0, _reactDnd.DragDropContext)(_reactDndHtml5Backend2.default)(ReactTags),\n  WithOutContext: ReactTags,\n  Keys: Keys\n};","map":null,"metadata":{},"sourceType":"script"}