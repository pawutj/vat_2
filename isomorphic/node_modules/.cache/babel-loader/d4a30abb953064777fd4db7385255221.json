{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _createConnector = require('../core/createConnector');\n\nvar _createConnector2 = _interopRequireDefault(_createConnector);\n\nvar _indexUtils = require('../core/indexUtils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction getId() {\n  return 'hitsPerPage';\n}\n\nfunction getCurrentRefinement(props, searchState, context) {\n  var id = getId();\n  return (0, _indexUtils.getCurrentRefinementValue)(props, searchState, context, id, null, function (currentRefinement) {\n    if (typeof currentRefinement === 'string') {\n      return parseInt(currentRefinement, 10);\n    }\n\n    return currentRefinement;\n  });\n}\n/**\n * connectHitsPerPage connector provides the logic to create connected\n * components that will allow a user to choose to display more or less results from Algolia.\n * @name connectHitsPerPage\n * @kind connector\n * @propType {number} defaultRefinement - The number of items selected by default\n * @propType {{value: number, label: string}[]} items - List of hits per page options.\n * @propType {function} [transformItems] - Function to modify the items being displayed, e.g. for filtering or sorting them. Takes an items as parameter and expects it back in return.\n * @providedPropType {function} refine - a function to remove a single filter\n * @providedPropType {function} createURL - a function to generate a URL for the corresponding search state\n * @providedPropType {string} currentRefinement - the refinement currently applied\n * @providedPropType {array.<{isRefined: boolean, label?: string, value: number}>} items - the list of items the HitsPerPage can display. If no label provided, the value will be displayed.\n */\n\n\nexports.default = (0, _createConnector2.default)({\n  displayName: 'AlgoliaHitsPerPage',\n  propTypes: {\n    defaultRefinement: _propTypes2.default.number.isRequired,\n    items: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n      label: _propTypes2.default.string,\n      value: _propTypes2.default.number.isRequired\n    })).isRequired,\n    transformItems: _propTypes2.default.func\n  },\n  getProvidedProps: function getProvidedProps(props, searchState) {\n    var currentRefinement = getCurrentRefinement(props, searchState, this.context);\n    var items = props.items.map(function (item) {\n      return item.value === currentRefinement ? _extends({}, item, {\n        isRefined: true\n      }) : _extends({}, item, {\n        isRefined: false\n      });\n    });\n    return {\n      items: props.transformItems ? props.transformItems(items) : items,\n      currentRefinement: currentRefinement\n    };\n  },\n  refine: function refine(props, searchState, nextRefinement) {\n    var id = getId();\n\n    var nextValue = _defineProperty({}, id, nextRefinement);\n\n    var resetPage = true;\n    return (0, _indexUtils.refineValue)(searchState, nextValue, this.context, resetPage);\n  },\n  cleanUp: function cleanUp(props, searchState) {\n    return (0, _indexUtils.cleanUpValue)(searchState, this.context, getId());\n  },\n  getSearchParameters: function getSearchParameters(searchParameters, props, searchState) {\n    return searchParameters.setHitsPerPage(getCurrentRefinement(props, searchState, this.context));\n  },\n  getMetadata: function getMetadata() {\n    return {\n      id: getId()\n    };\n  }\n});","map":null,"metadata":{},"sourceType":"script"}